// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract_scanner_registry_0_1_3

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IStakeSubjectStakeThreshold is an auto generated low-level Go binding around an user-defined struct.
type IStakeSubjectStakeThreshold struct {
	Min       *big.Int
	Max       *big.Int
	Activated bool
}

// ScannerRegistryMetaData contains all meta data concerning the ScannerRegistry contract.
var ScannerRegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ManagerEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enumScannerRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ScannerEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"ScannerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newstakeController\",\"type\":\"address\"}],\"name\":\"StakeControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"StakeThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"scanner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"adminRegister\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"scanner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"adminUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"enumScannerRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"disableScanner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"enumScannerRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"enableScanner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getDisableFlags\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getManagerAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getManagerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getScanner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getScannerChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getScannerState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"disabledFlags\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeController\",\"outputs\":[{\"internalType\":\"contractIStakeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"getStakeThreshold\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"isStakedOverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"scanner\",\"type\":\"address\"}],\"name\":\"scannerAddressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeController\",\"type\":\"address\"}],\"name\":\"setStakeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"newStakeThreshold\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"setStakeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523060a0523480156200001557600080fd5b506040516200413938038062004139833981016040819052620000389162000180565b6001600160a01b038116608052600054610100900460ff1615808015620000665750600054600160ff909116105b8062000096575062000083306200017160201b620019151760201c565b15801562000096575060005460ff166001145b620000fe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff19166001179055801562000122576000805461ff0019166101001790555b801562000169576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050620001b2565b6001600160a01b03163b151590565b6000602082840312156200019357600080fd5b81516001600160a01b0381168114620001ab57600080fd5b9392505050565b60805160a051613f3e620001fb60003960008181610c1a01528181610c5a01528181610e0301528181610e430152610ed20152600081816104c101526130fa0152613f3e6000f3fe6080604052600436106102675760003560e01c8063773ed13c11610144578063aebb5150116100b6578063c87b56dd1161007a578063c87b56dd14610806578063c958080414610826578063d858a7e514610846578063e11cf71e1461085b578063e985e9c51461087b578063f11b1b88146108c557600080fd5b8063aebb515014610767578063b7b57b2714610786578063b88d4fde146107a6578063c2dae01d146107c6578063c783034c146107e657600080fd5b806395d89b411161010857806395d89b41146106955780639a9d67bd146106aa578063a22cb465146106ca578063a9032e7b146106ea578063a97fe43e1461070a578063ac9650d81461073a57600080fd5b8063773ed13c146105d557806382fe1bcc146105f5578063871016e11461061c5780638e79a36914610655578063906571471461067557600080fd5b80634f1ef286116101dd578063579a6988116101a1578063579a6988146104f157806359238297146105115780635a74fc2914610531578063624ade3c146105515780636352211e1461059557806370a08231146105b557600080fd5b80634f1ef2861461040f5780635109c4791461042257806352d1902d1461045e57806354fd4d5014610473578063572b6c05146104a457600080fd5b80632a91fb341161022f5780632a91fb341461033d5780633121db1c1461035d5780633659cfe61461037d57806337fea0e01461039d57806342842e0e146103cf5780634629f427146103ef57600080fd5b806301ffc9a71461026c57806306fdde03146102a1578063081812fc146102c3578063095ea7b3146102fb57806323b872dd1461031d575b600080fd5b34801561027857600080fd5b5061028c610287366004613208565b6108e5565b60405190151581526020015b60405180910390f35b3480156102ad57600080fd5b506102b6610937565b604051610298919061327d565b3480156102cf57600080fd5b506102e36102de366004613290565b6109ca565b6040516001600160a01b039091168152602001610298565b34801561030757600080fd5b5061031b6103163660046132be565b6109f2565b005b34801561032957600080fd5b5061031b6103383660046132ea565b610b1f565b34801561034957600080fd5b5061031b610358366004613374565b610b57565b34801561036957600080fd5b5061031b6103783660046133e7565b610bc4565b34801561038957600080fd5b5061031b61039836600461343c565b610c0f565b3480156103a957600080fd5b506103bd6103b8366004613290565b610cef565b60405161029896959493929190613459565b3480156103db57600080fd5b5061031b6103ea3660046132ea565b610d48565b3480156103fb57600080fd5b5061031b61040a36600461349d565b610d63565b61031b61041d366004613574565b610df8565b34801561042e57600080fd5b5061045061043d366004613290565b6000908152610227602052604090205490565b604051908152602001610298565b34801561046a57600080fd5b50610450610ec5565b34801561047f57600080fd5b506102b660405180604001604052806005815260200164302e312e3360d81b81525081565b3480156104b057600080fd5b5061028c6104bf36600461343c565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b3480156104fd57600080fd5b5061028c61050c366004613290565b610f78565b34801561051d57600080fd5b5061031b61052c36600461349d565b610f83565b34801561053d57600080fd5b5061031b61054c3660046135d2565b610fa5565b34801561055d57600080fd5b5061057161056c366004613290565b61108e565b60408051825181526020808401519082015291810151151590820152606001610298565b3480156105a157600080fd5b506102e36105b0366004613290565b6110bd565b3480156105c157600080fd5b506104506105d036600461343c565b61111e565b3480156105e157600080fd5b5061028c6105f0366004613614565b6111a5565b34801561060157600080fd5b5061045061061036600461343c565b6001600160a01b031690565b34801561062857600080fd5b50610450610637366004613290565b60009081526101f56020908152604080832083805290915290205490565b34801561066157600080fd5b506102e3610670366004613639565b6111c5565b34801561068157600080fd5b5061031b61069036600461365b565b6111de565b3480156106a157600080fd5b506102b6611320565b3480156106b657600080fd5b5061031b6106c536600461343c565b611330565b3480156106d657600080fd5b5061031b6106e53660046136cd565b611354565b3480156106f657600080fd5b5061031b6107053660046136fb565b611366565b34801561071657600080fd5b5061072a610725366004613290565b61142e565b604051610298949392919061372c565b34801561074657600080fd5b5061075a61075536600461375b565b61150b565b60405161029891906137d0565b34801561077357600080fd5b50610191546001600160a01b03166102e3565b34801561079257600080fd5b5061028c6107a1366004613290565b611600565b3480156107b257600080fd5b5061031b6107c1366004613832565b61160b565b3480156107d257600080fd5b5061031b6107e136600461389e565b611644565b3480156107f257600080fd5b5061028c610801366004613290565b6116b8565b34801561081257600080fd5b506102b6610821366004613290565b6116f7565b34801561083257600080fd5b5061031b61084136600461343c565b61176a565b34801561085257600080fd5b5061031b611828565b34801561086757600080fd5b50610450610876366004613290565b6118b3565b34801561088757600080fd5b5061028c6108963660046138fa565b6001600160a01b0391821660009081526101646020908152604080832093909416825291909152205460ff1690565b3480156108d157600080fd5b5061031b6108e036600461389e565b6118cb565b60006001600160e01b031982166380ac58cd60e01b148061091657506001600160e01b03198216635b5e139f60e01b145b8061093157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606061015f805461094790613928565b80601f016020809104026020016040519081016040528092919081815260200182805461097390613928565b80156109c05780601f10610995576101008083540402835291602001916109c0565b820191906000526020600020905b8154815290600101906020018083116109a357829003601f168201915b5050505050905090565b60006109d582611924565b50600090815261016360205260409020546001600160a01b031690565b60006109fd826110bd565b9050806001600160a01b0316836001600160a01b03161415610a705760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b806001600160a01b0316610a82611974565b6001600160a01b03161480610a9e5750610a9e81610896611974565b610b105760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610a67565b610b1a8383611983565b505050565b610b30610b2a611974565b826119f2565b610b4c5760405162461bcd60e51b8152600401610a6790613963565b610b1a838383611a72565b600080516020613ec2833981519152610b7781610b72611974565b611c11565b610baf5780610b84611974565b6040516301d4003760e61b815260048101929092526001600160a01b03166024820152604401610a67565b610bbc8686868686611c96565b505050505050565b7f664245c7af190fec316596e8231f724e8171b1966cfcd124347ac5a66c34f64a610bf181610b72611974565b610bfe5780610b84611974565b610c09848484611cb6565b50505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c585760405162461bcd60e51b8152600401610a67906139b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610ca1600080516020613ea2833981519152546001600160a01b031690565b6001600160a01b031614610cc75760405162461bcd60e51b8152600401610a67906139fd565b610cd081611dcc565b60408051600080825260208201909252610cec91839190611e06565b50565b60008060006060600080610d028761142e565b9298509096509450925085858585610d198b6116b8565b60008c81526101f560209081526040808320838052909152902054949c939b5091995097509550909350915050565b610b1a8383836040518060200160405280600081525061160b565b610d6c82611f80565b610d8c576040516316b7494760e01b815260048101839052602401610a67565b610d968282612057565b610de857610da2611974565b816004811115610db457610db4613a49565b6040516372fa0ebb60e11b81526001600160a01b03909216600483015260ff16602482015260448101839052606401610a67565b610df48282600161212a565b5050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610e415760405162461bcd60e51b8152600401610a67906139b1565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e8a600080516020613ea2833981519152546001600160a01b031690565b6001600160a01b031614610eb05760405162461bcd60e51b8152600401610a67906139fd565b610eb982611dcc565b610df482826001611e06565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f655760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a67565b50600080516020613ea283398151915290565b600061093182612135565b610f8d8282612057565b610f9957610da2611974565b610df48282600061212a565b82610faf816110bd565b6001600160a01b0316610fc0611974565b6001600160a01b03161461100257610fd6611974565b60405163871d7af360e01b81526001600160a01b03909116600482015260248101829052604401610a67565b81156110275760008481526101c3602052604090206110219084612153565b50611042565b60008481526101c3602052604090206110409084612168565b505b826001600160a01b0316847f538b6537a6fe8f0deae9f3b86ad1924d5e5b3d5a683055276b2824f918be043e84604051611080911515815260200190565b60405180910390a350505050565b6110b4604051806060016040528060008152602001600081526020016000151581525090565b6109318261217d565b600081815261016160205260408120546001600160a01b0316806109315760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a67565b60006001600160a01b0382166111885760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610a67565b506001600160a01b03166000908152610162602052604090205490565b60008281526101c3602052604081206111be90836121ac565b9392505050565b60008281526101c3602052604081206111be90836121ce565b600054610100900460ff16158080156111fe5750600054600160ff909116105b806112185750303b158015611218575060005460ff166001145b6112345760405162461bcd60e51b8152600401610a6790613a5f565b6000805460ff191660011790558015611257576000805461ff0019166101001790555b611260866121da565b6112d385858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f890181900481028201810190925287815292508791508690819084018382808284376000920191909152506122ae92505050565b8015610bbc576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b6060610160805461094790613928565b600061133e81610b72611974565b61134b5780610b84611974565b610df4826122df565b610df461135f611974565b8383612373565b600080516020613ec283398151915261138181610b72611974565b61138e5780610b84611974565b82356020840135116113b357604051632ca637fd60e21b815260040160405180910390fd5b817f52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def843560208601356113ec6060880160408901613aad565b60408051938452602084019290925215159082015260600160405180910390a260008281526101966020526040902083906114278282613aca565b5050505050565b60008060006060600061144086612135565b9050808161144f576000611458565b611458876110bd565b600088815261022760205260409020805460019091018054819061147b90613928565b80601f01602080910402602001604051908101604052809291908181526020018280546114a790613928565b80156114f45780601f106114c9576101008083540402835291602001916114f4565b820191906000526020600020905b8154815290600101906020018083116114d757829003601f168201915b505050505090509450945094509450509193509193565b60608167ffffffffffffffff811115611526576115266134d1565b60405190808252806020026020018201604052801561155957816020015b60608152602001906001900390816115445790505b50905060005b828110156115f9576115c93085858481811061157d5761157d613b00565b905060200281019061158f9190613b16565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061244492505050565b8282815181106115db576115db613b00565b602002602001018190525080806115f190613b73565b91505061155f565b5092915050565b600061093182611f80565b61161c611616611974565b836119f2565b6116385760405162461bcd60e51b8152600401610a6790613963565b610c0984848484612469565b600080516020613ec283398151915261165f81610b72611974565b61166c5780610b84611974565b6001600160a01b03851661167f81610f78565b6116a757604051631cc39a1f60e01b81526001600160a01b0387166004820152602401610a67565b6116b38186868661249c565b610bbc565b60006116c382610f78565b80156116e7575060008281526101f560209081526040808320838052909152902054155b8015610931575061093182611f80565b606061170282611924565b600061171960408051602081019091526000815290565b9050600081511161173957604051806020016040528060008152506111be565b80611743846124a8565b604051602001611754929190613b8e565b6040516020818303038152906040529392505050565b600061177881610b72611974565b6117855780610b84611974565b61179f6001600160a01b038316637965db0b60e01b6125a6565b6117dd576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610a67565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a25050565b6065546001600160a01b03166118765760405163eac0d38960e01b81526020600482015260126024820152712fb232b83932b1b0ba32b22fb937baba32b960711b6044820152606401610a67565b606580546001600160a01b03191690556040516000907f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80908290a2565b60008181526101c360205260408120610931906125c2565b6000838152610196602052604090206002015460ff16611901576040516317e427d760e11b815260048101849052602401610a67565b610c0961190c611974565b85858585611c96565b6001600160a01b03163b151590565b61192d81612135565b610cec5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a67565b600061197e6125cc565b905090565b60008181526101636020526040902080546001600160a01b0319166001600160a01b03841690811790915581906119b9826110bd565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806119fe836110bd565b9050806001600160a01b0316846001600160a01b03161480611a4657506001600160a01b038082166000908152610164602090815260408083209388168352929052205460ff165b80611a6a5750836001600160a01b0316611a5f846109ca565b6001600160a01b0316145b949350505050565b826001600160a01b0316611a85826110bd565b6001600160a01b031614611ae95760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610a67565b6001600160a01b038216611b4b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a67565b611b56600082611983565b6001600160a01b038316600090815261016260205260408120805460019290611b80908490613bbd565b90915550506001600160a01b038216600090815261016260205260408120805460019290611baf908490613bd4565b90915550506000818152610161602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b603354604051632474521560e21b8152600481018490526001600160a01b03838116602483015260009216906391d148549060440160206040518083038186803b158015611c5e57600080fd5b505afa158015611c72573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111be9190613bec565b6001600160a01b038516611caa85826125d6565b6116b38185858561249c565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526001600160a01b038416906302571be39060240160206040518083038186803b158015611d1557600080fd5b505afa158015611d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4d9190613c09565b6001600160a01b031663c47f002783836040518363ffffffff1660e01b8152600401611d7a929190613c26565b602060405180830381600087803b158015611d9457600080fd5b505af1158015611da8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c099190613c55565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3611df981610b72611974565b610df45780610b84611974565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611e3957610b1a8361270b565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e7257600080fd5b505afa925050508015611ea2575060408051601f3d908101601f19168201909252611e9f91810190613c55565b60015b611f055760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a67565b600080516020613ea28339815191528114611f745760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a67565b50610b1a8383836127a7565b600080611f96610191546001600160a01b031690565b6001600160a01b03161415611fad57506001919050565b611fb68261217d565b51610191546001600160a01b031660405163145217e760e31b815260006004820152602481018590526001600160a01b03919091169063a290bf389060440160206040518083038186803b15801561200d57600080fd5b505afa158015612021573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120459190613c55565b10158015610931575061093182612135565b60008082600481111561206c5761206c613a49565b14156120935761208c600080516020613ec2833981519152610b72611974565b9050610931565b60018260048111156120a7576120a7613a49565b14156120c757826120b6611974565b6001600160a01b0316149050610931565b60028260048111156120db576120db613a49565b14156120fb576120ea836110bd565b6001600160a01b03166120b6611974565b600382600481111561210f5761210f613a49565b14156121215761208c836105f0611974565b50600092915050565b610b1a8383836127cc565b600090815261016160205260409020546001600160a01b0316151590565b60006111be836001600160a01b038416612838565b60006111be836001600160a01b038416612887565b6121a3604051806060016040528060008152602001600081526020016000151581525090565b6109318261297a565b6001600160a01b038116600090815260018301602052604081205415156111be565b60006111be83836129ea565b600054610100900460ff16158080156121fa5750600054600160ff909116105b806122145750303b158015612214575060005460ff166001145b6122305760405162461bcd60e51b8152600401610a6790613a5f565b6000805460ff191660011790558015612253576000805461ff0019166101001790555b61225c82612a14565b612264612b6e565b8015610df4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15050565b600054610100900460ff166122d55760405162461bcd60e51b8152600401610a6790613c6e565b610df48282612b97565b6001600160a01b0381166123285760405163eac0d38960e01b815260206004820152600f60248201526e39ba30b5b2a1b7b73a3937b63632b960891b6044820152606401610a67565b61019180546001600160a01b0319166001600160a01b0383169081179091556040517fcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f0090600090a250565b816001600160a01b0316836001600160a01b031614156123d55760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a67565b6001600160a01b0383811660008181526101646020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a3505050565b60606111be8383604051806060016040528060278152602001613ee260279139612be7565b612474848484611a72565b61248084848484612c85565b610c095760405162461bcd60e51b8152600401610a6790613cb9565b610c0984848484612d99565b6060816124cc5750506040805180820190915260018152600360fc1b602082015290565b8160005b81156124f657806124e081613b73565b91506124ef9050600a83613d21565b91506124d0565b60008167ffffffffffffffff811115612511576125116134d1565b6040519080825280601f01601f19166020018201604052801561253b576020820181803683370190505b5090505b8415611a6a57612550600183613bbd565b915061255d600a86613d35565b612568906030613bd4565b60f81b81838151811061257d5761257d613b00565b60200101906001600160f81b031916908160001a90535061259f600a86613d21565b945061253f565b60006125b183612e25565b80156111be57506111be8383612e58565b6000610931825490565b600061197e612f37565b6001600160a01b03821661262c5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a67565b61263581612135565b156126825760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a67565b6001600160a01b0382166000908152610162602052604081208054600192906126ac908490613bd4565b90915550506000818152610161602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b0381163b6127785760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a67565b600080516020613ea283398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b6127b083612f41565b6000825111806127bd5750805b15610b1a57610c098383612f81565b6127fb8260048111156127e1576127e1613a49565b60008581526101f5602052604090209060ff168315613036565b612804836116b8565b1515837fcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d48484604051612437929190613d49565b600081815260018301602052604081205461287f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610931565b506000610931565b600081815260018301602052604081205480156129705760006128ab600183613bbd565b85549091506000906128bf90600190613bbd565b90508181146129245760008660000182815481106128df576128df613b00565b906000526020600020015490508087600001848154811061290257612902613b00565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061293557612935613d7a565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610931565b6000915050610931565b6129a0604051806060016040528060008152602001600081526020016000151581525090565b506000908152610227602090815260408083205483526101968252918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b6000826000018281548110612a0157612a01613b00565b9060005260206000200154905092915050565b600054610100900460ff1615808015612a345750600054600160ff909116105b80612a4e5750303b158015612a4e575060005460ff166001145b612a6a5760405162461bcd60e51b8152600401610a6790613a5f565b6000805460ff191660011790558015612a8d576000805461ff0019166101001790555b612aa76001600160a01b038316637965db0b60e01b6125a6565b612ae5576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610a67565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a28015610df4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016122a2565b600054610100900460ff16612b955760405162461bcd60e51b8152600401610a6790613c6e565b565b600054610100900460ff16612bbe5760405162461bcd60e51b8152600401610a6790613c6e565b8151612bd29061015f906020850190613159565b508051610b1a90610160906020840190613159565b60606001600160a01b0384163b612c105760405162461bcd60e51b8152600401610a6790613d90565b600080856001600160a01b031685604051612c2b9190613dd6565b600060405180830381855af49150503d8060008114612c66576040519150601f19603f3d011682016040523d82523d6000602084013e612c6b565b606091505b5091509150612c7b828286613085565b9695505050505050565b60006001600160a01b0384163b15612d8e57836001600160a01b031663150b7a02612cae611974565b8786866040518563ffffffff1660e01b8152600401612cd09493929190613df2565b602060405180830381600087803b158015612cea57600080fd5b505af1925050508015612d1a575060408051601f3d908101601f19168201909252612d1791810190613e25565b60015b612d74573d808015612d48576040519150601f19603f3d011682016040523d82523d6000602084013e612d4d565b606091505b508051612d6c5760405162461bcd60e51b8152600401610a6790613cb9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611a6a565b506001949350505050565b612da5848484846130be565b604051806040016040528084815260200183838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250508681526102276020908152604090912083518155838201518051919350612e1c926001850192910190613159565b50505050505050565b6000612e38826301ffc9a760e01b612e58565b80156109315750612e51826001600160e01b0319612e58565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090612ebf908690613dd6565b6000604051808303818686fa925050503d8060008114612efb576040519150601f19603f3d011682016040523d82523d6000602084013e612f00565b606091505b5091509150602081511015612f1b5760009350505050610931565b818015612c7b575080806020019051810190612c7b9190613bec565b600061197e6130f1565b612f4a8161270b565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b612faa5760405162461bcd60e51b8152600401610a6790613d90565b600080846001600160a01b031684604051612fc59190613dd6565b600060405180830381855af49150503d8060008114613000576040519150601f19603f3d011682016040523d82523d6000602084013e613005565b606091505b509150915061302d8282604051806060016040528060278152602001613ee260279139613085565b95945050505050565b801561306057600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b606083156130945750816111be565b8251156130a45782518084602001fd5b8160405162461bcd60e51b8152600401610a67919061327d565b82847f72d55569a8bd2d7bfb37627de4db16b8967136cfd50c423227036b24055e440d8484604051611080929190613c26565b600061197e60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633141561315457600036613137601482613bbd565b61314392369290613e42565b61314c91613e6c565b60601c905090565b503390565b82805461316590613928565b90600052602060002090601f01602090048101928261318757600085556131cd565b82601f106131a057805160ff19168380011785556131cd565b828001600101855582156131cd579182015b828111156131cd5782518255916020019190600101906131b2565b506131d99291506131dd565b5090565b5b808211156131d957600081556001016131de565b6001600160e01b031981168114610cec57600080fd5b60006020828403121561321a57600080fd5b81356111be816131f2565b60005b83811015613240578181015183820152602001613228565b83811115610c095750506000910152565b60008151808452613269816020860160208601613225565b601f01601f19169290920160200192915050565b6020815260006111be6020830184613251565b6000602082840312156132a257600080fd5b5035919050565b6001600160a01b0381168114610cec57600080fd5b600080604083850312156132d157600080fd5b82356132dc816132a9565b946020939093013593505050565b6000806000606084860312156132ff57600080fd5b833561330a816132a9565b9250602084013561331a816132a9565b929592945050506040919091013590565b60008083601f84011261333d57600080fd5b50813567ffffffffffffffff81111561335557600080fd5b60208301915083602082850101111561336d57600080fd5b9250929050565b60008060008060006080868803121561338c57600080fd5b8535613397816132a9565b945060208601356133a7816132a9565b935060408601359250606086013567ffffffffffffffff8111156133ca57600080fd5b6133d68882890161332b565b969995985093965092949392505050565b6000806000604084860312156133fc57600080fd5b8335613407816132a9565b9250602084013567ffffffffffffffff81111561342357600080fd5b61342f8682870161332b565b9497909650939450505050565b60006020828403121561344e57600080fd5b81356111be816132a9565b861515815260018060a01b038616602082015284604082015260c06060820152600061348860c0830186613251565b93151560808301525060a00152949350505050565b600080604083850312156134b057600080fd5b823591506020830135600581106134c657600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126134f857600080fd5b813567ffffffffffffffff80821115613513576135136134d1565b604051601f8301601f19908116603f0116810190828211818310171561353b5761353b6134d1565b8160405283815286602085880101111561355457600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561358757600080fd5b8235613592816132a9565b9150602083013567ffffffffffffffff8111156135ae57600080fd5b6135ba858286016134e7565b9150509250929050565b8015158114610cec57600080fd5b6000806000606084860312156135e757600080fd5b8335925060208401356135f9816132a9565b91506040840135613609816135c4565b809150509250925092565b6000806040838503121561362757600080fd5b8235915060208301356134c6816132a9565b6000806040838503121561364c57600080fd5b50508035926020909101359150565b60008060008060006060868803121561367357600080fd5b853561367e816132a9565b9450602086013567ffffffffffffffff8082111561369b57600080fd5b6136a789838a0161332b565b909650945060408801359150808211156136c057600080fd5b506133d68882890161332b565b600080604083850312156136e057600080fd5b82356136eb816132a9565b915060208301356134c6816135c4565b600080828403608081121561370f57600080fd5b606081121561371d57600080fd5b50919360608501359350915050565b841515815260018060a01b0384166020820152826040820152608060608201526000612c7b6080830184613251565b6000806020838503121561376e57600080fd5b823567ffffffffffffffff8082111561378657600080fd5b818501915085601f83011261379a57600080fd5b8135818111156137a957600080fd5b8660208260051b85010111156137be57600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561382557603f19888603018452613813858351613251565b945092850192908501906001016137f7565b5092979650505050505050565b6000806000806080858703121561384857600080fd5b8435613853816132a9565b93506020850135613863816132a9565b925060408501359150606085013567ffffffffffffffff81111561388657600080fd5b613892878288016134e7565b91505092959194509250565b600080600080606085870312156138b457600080fd5b84356138bf816132a9565b935060208501359250604085013567ffffffffffffffff8111156138e257600080fd5b6138ee8782880161332b565b95989497509550505050565b6000806040838503121561390d57600080fd5b8235613918816132a9565b915060208301356134c6816132a9565b600181811c9082168061393c57607f821691505b6020821081141561395d57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215613abf57600080fd5b81356111be816135c4565b8135815560208201356001820155600281016040830135613aea816135c4565b815490151560ff1660ff19919091161790555050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112613b2d57600080fd5b83018035915067ffffffffffffffff821115613b4857600080fd5b60200191503681900382131561336d57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415613b8757613b87613b5d565b5060010190565b60008351613ba0818460208801613225565b835190830190613bb4818360208801613225565b01949350505050565b600082821015613bcf57613bcf613b5d565b500390565b60008219821115613be757613be7613b5d565b500190565b600060208284031215613bfe57600080fd5b81516111be816135c4565b600060208284031215613c1b57600080fd5b81516111be816132a9565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215613c6757600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082613d3057613d30613d0b565b500490565b600082613d4457613d44613d0b565b500690565b6040810160058410613d6b57634e487b7160e01b600052602160045260246000fd5b92815290151560209091015290565b634e487b7160e01b600052603160045260246000fd5b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60008251613de8818460208701613225565b9190910192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612c7b90830184613251565b600060208284031215613e3757600080fd5b81516111be816131f2565b60008085851115613e5257600080fd5b83861115613e5f57600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff198135818116916014851015613e995780818660140360031b1b83161692505b50509291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbcbfe45770ac5a9057f648bdbd7f3526086df3fa2d93fe61f5b631e50d01f0074a416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ef494ff55815381b75d4acea8eaccd6f361b3dd345fd8cd1688fa157fc829e8e64736f6c63430008090033",
}

// ScannerRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use ScannerRegistryMetaData.ABI instead.
var ScannerRegistryABI = ScannerRegistryMetaData.ABI

// ScannerRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ScannerRegistryMetaData.Bin instead.
var ScannerRegistryBin = ScannerRegistryMetaData.Bin

// DeployScannerRegistry deploys a new Ethereum contract, binding an instance of ScannerRegistry to it.
func DeployScannerRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, forwarder common.Address) (common.Address, *types.Transaction, *ScannerRegistry, error) {
	parsed, err := ScannerRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ScannerRegistryBin), backend, forwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ScannerRegistry{ScannerRegistryCaller: ScannerRegistryCaller{contract: contract}, ScannerRegistryTransactor: ScannerRegistryTransactor{contract: contract}, ScannerRegistryFilterer: ScannerRegistryFilterer{contract: contract}}, nil
}

// ScannerRegistry is an auto generated Go binding around an Ethereum contract.
type ScannerRegistry struct {
	ScannerRegistryCaller     // Read-only binding to the contract
	ScannerRegistryTransactor // Write-only binding to the contract
	ScannerRegistryFilterer   // Log filterer for contract events
}

// ScannerRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ScannerRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScannerRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ScannerRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScannerRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ScannerRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScannerRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ScannerRegistrySession struct {
	Contract     *ScannerRegistry  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ScannerRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ScannerRegistryCallerSession struct {
	Contract *ScannerRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ScannerRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ScannerRegistryTransactorSession struct {
	Contract     *ScannerRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ScannerRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ScannerRegistryRaw struct {
	Contract *ScannerRegistry // Generic contract binding to access the raw methods on
}

// ScannerRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ScannerRegistryCallerRaw struct {
	Contract *ScannerRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// ScannerRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ScannerRegistryTransactorRaw struct {
	Contract *ScannerRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewScannerRegistry creates a new instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistry(address common.Address, backend bind.ContractBackend) (*ScannerRegistry, error) {
	contract, err := bindScannerRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistry{ScannerRegistryCaller: ScannerRegistryCaller{contract: contract}, ScannerRegistryTransactor: ScannerRegistryTransactor{contract: contract}, ScannerRegistryFilterer: ScannerRegistryFilterer{contract: contract}}, nil
}

// NewScannerRegistryCaller creates a new read-only instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistryCaller(address common.Address, caller bind.ContractCaller) (*ScannerRegistryCaller, error) {
	contract, err := bindScannerRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryCaller{contract: contract}, nil
}

// NewScannerRegistryTransactor creates a new write-only instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*ScannerRegistryTransactor, error) {
	contract, err := bindScannerRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryTransactor{contract: contract}, nil
}

// NewScannerRegistryFilterer creates a new log filterer instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*ScannerRegistryFilterer, error) {
	contract, err := bindScannerRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryFilterer{contract: contract}, nil
}

// bindScannerRegistry binds a generic wrapper to an already deployed contract.
func bindScannerRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ScannerRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScannerRegistry *ScannerRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScannerRegistry.Contract.ScannerRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScannerRegistry *ScannerRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.ScannerRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScannerRegistry *ScannerRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.ScannerRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScannerRegistry *ScannerRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScannerRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScannerRegistry *ScannerRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScannerRegistry *ScannerRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.BalanceOf(&_ScannerRegistry.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.BalanceOf(&_ScannerRegistry.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetApproved(&_ScannerRegistry.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetApproved(&_ScannerRegistry.CallOpts, tokenId)
}

// GetDisableFlags is a free data retrieval call binding the contract method 0x871016e1.
//
// Solidity: function getDisableFlags(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) GetDisableFlags(opts *bind.CallOpts, scannerId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getDisableFlags", scannerId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDisableFlags is a free data retrieval call binding the contract method 0x871016e1.
//
// Solidity: function getDisableFlags(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) GetDisableFlags(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetDisableFlags(&_ScannerRegistry.CallOpts, scannerId)
}

// GetDisableFlags is a free data retrieval call binding the contract method 0x871016e1.
//
// Solidity: function getDisableFlags(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetDisableFlags(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetDisableFlags(&_ScannerRegistry.CallOpts, scannerId)
}

// GetManagerAt is a free data retrieval call binding the contract method 0x8e79a369.
//
// Solidity: function getManagerAt(uint256 scannerId, uint256 index) view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) GetManagerAt(opts *bind.CallOpts, scannerId *big.Int, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getManagerAt", scannerId, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetManagerAt is a free data retrieval call binding the contract method 0x8e79a369.
//
// Solidity: function getManagerAt(uint256 scannerId, uint256 index) view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) GetManagerAt(scannerId *big.Int, index *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetManagerAt(&_ScannerRegistry.CallOpts, scannerId, index)
}

// GetManagerAt is a free data retrieval call binding the contract method 0x8e79a369.
//
// Solidity: function getManagerAt(uint256 scannerId, uint256 index) view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetManagerAt(scannerId *big.Int, index *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetManagerAt(&_ScannerRegistry.CallOpts, scannerId, index)
}

// GetManagerCount is a free data retrieval call binding the contract method 0xe11cf71e.
//
// Solidity: function getManagerCount(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) GetManagerCount(opts *bind.CallOpts, scannerId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getManagerCount", scannerId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetManagerCount is a free data retrieval call binding the contract method 0xe11cf71e.
//
// Solidity: function getManagerCount(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) GetManagerCount(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetManagerCount(&_ScannerRegistry.CallOpts, scannerId)
}

// GetManagerCount is a free data retrieval call binding the contract method 0xe11cf71e.
//
// Solidity: function getManagerCount(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetManagerCount(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetManagerCount(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScanner is a free data retrieval call binding the contract method 0xa97fe43e.
//
// Solidity: function getScanner(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryCaller) GetScanner(opts *bind.CallOpts, scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
}, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getScanner", scannerId)

	outstruct := new(struct {
		Registered bool
		Owner      common.Address
		ChainId    *big.Int
		Metadata   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.ChainId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)

	return *outstruct, err

}

// GetScanner is a free data retrieval call binding the contract method 0xa97fe43e.
//
// Solidity: function getScanner(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata)
func (_ScannerRegistry *ScannerRegistrySession) GetScanner(scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
}, error) {
	return _ScannerRegistry.Contract.GetScanner(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScanner is a free data retrieval call binding the contract method 0xa97fe43e.
//
// Solidity: function getScanner(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetScanner(scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
}, error) {
	return _ScannerRegistry.Contract.GetScanner(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerChainId is a free data retrieval call binding the contract method 0x5109c479.
//
// Solidity: function getScannerChainId(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) GetScannerChainId(opts *bind.CallOpts, scannerId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getScannerChainId", scannerId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetScannerChainId is a free data retrieval call binding the contract method 0x5109c479.
//
// Solidity: function getScannerChainId(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) GetScannerChainId(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetScannerChainId(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerChainId is a free data retrieval call binding the contract method 0x5109c479.
//
// Solidity: function getScannerChainId(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetScannerChainId(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetScannerChainId(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerState is a free data retrieval call binding the contract method 0x37fea0e0.
//
// Solidity: function getScannerState(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata, bool enabled, uint256 disabledFlags)
func (_ScannerRegistry *ScannerRegistryCaller) GetScannerState(opts *bind.CallOpts, scannerId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	ChainId       *big.Int
	Metadata      string
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getScannerState", scannerId)

	outstruct := new(struct {
		Registered    bool
		Owner         common.Address
		ChainId       *big.Int
		Metadata      string
		Enabled       bool
		DisabledFlags *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.ChainId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Enabled = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.DisabledFlags = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetScannerState is a free data retrieval call binding the contract method 0x37fea0e0.
//
// Solidity: function getScannerState(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata, bool enabled, uint256 disabledFlags)
func (_ScannerRegistry *ScannerRegistrySession) GetScannerState(scannerId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	ChainId       *big.Int
	Metadata      string
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	return _ScannerRegistry.Contract.GetScannerState(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerState is a free data retrieval call binding the contract method 0x37fea0e0.
//
// Solidity: function getScannerState(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata, bool enabled, uint256 disabledFlags)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetScannerState(scannerId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	ChainId       *big.Int
	Metadata      string
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	return _ScannerRegistry.Contract.GetScannerState(&_ScannerRegistry.CallOpts, scannerId)
}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) GetStakeController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getStakeController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) GetStakeController() (common.Address, error) {
	return _ScannerRegistry.Contract.GetStakeController(&_ScannerRegistry.CallOpts)
}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetStakeController() (common.Address, error) {
	return _ScannerRegistry.Contract.GetStakeController(&_ScannerRegistry.CallOpts)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 subject) view returns((uint256,uint256,bool))
func (_ScannerRegistry *ScannerRegistryCaller) GetStakeThreshold(opts *bind.CallOpts, subject *big.Int) (IStakeSubjectStakeThreshold, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getStakeThreshold", subject)

	if err != nil {
		return *new(IStakeSubjectStakeThreshold), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeSubjectStakeThreshold)).(*IStakeSubjectStakeThreshold)

	return out0, err

}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 subject) view returns((uint256,uint256,bool))
func (_ScannerRegistry *ScannerRegistrySession) GetStakeThreshold(subject *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _ScannerRegistry.Contract.GetStakeThreshold(&_ScannerRegistry.CallOpts, subject)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 subject) view returns((uint256,uint256,bool))
func (_ScannerRegistry *ScannerRegistryCallerSession) GetStakeThreshold(subject *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _ScannerRegistry.Contract.GetStakeThreshold(&_ScannerRegistry.CallOpts, subject)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsApprovedForAll(&_ScannerRegistry.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsApprovedForAll(&_ScannerRegistry.CallOpts, owner, operator)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsEnabled(opts *bind.CallOpts, scannerId *big.Int) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isEnabled", scannerId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsEnabled(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsEnabled(&_ScannerRegistry.CallOpts, scannerId)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsEnabled(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsEnabled(&_ScannerRegistry.CallOpts, scannerId)
}

// IsManager is a free data retrieval call binding the contract method 0x773ed13c.
//
// Solidity: function isManager(uint256 scannerId, address manager) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsManager(opts *bind.CallOpts, scannerId *big.Int, manager common.Address) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isManager", scannerId, manager)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsManager is a free data retrieval call binding the contract method 0x773ed13c.
//
// Solidity: function isManager(uint256 scannerId, address manager) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsManager(scannerId *big.Int, manager common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsManager(&_ScannerRegistry.CallOpts, scannerId, manager)
}

// IsManager is a free data retrieval call binding the contract method 0x773ed13c.
//
// Solidity: function isManager(uint256 scannerId, address manager) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsManager(scannerId *big.Int, manager common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsManager(&_ScannerRegistry.CallOpts, scannerId, manager)
}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsRegistered(opts *bind.CallOpts, scannerId *big.Int) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isRegistered", scannerId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsRegistered(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsRegistered(&_ScannerRegistry.CallOpts, scannerId)
}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsRegistered(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsRegistered(&_ScannerRegistry.CallOpts, scannerId)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsStakedOverMin(opts *bind.CallOpts, subject *big.Int) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isStakedOverMin", subject)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsStakedOverMin(&_ScannerRegistry.CallOpts, subject)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsStakedOverMin(&_ScannerRegistry.CallOpts, subject)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsTrustedForwarder(&_ScannerRegistry.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsTrustedForwarder(&_ScannerRegistry.CallOpts, forwarder)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) Name() (string, error) {
	return _ScannerRegistry.Contract.Name(&_ScannerRegistry.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) Name() (string, error) {
	return _ScannerRegistry.Contract.Name(&_ScannerRegistry.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.OwnerOf(&_ScannerRegistry.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.OwnerOf(&_ScannerRegistry.CallOpts, tokenId)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ScannerRegistry *ScannerRegistryCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ScannerRegistry *ScannerRegistrySession) ProxiableUUID() ([32]byte, error) {
	return _ScannerRegistry.Contract.ProxiableUUID(&_ScannerRegistry.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ScannerRegistry *ScannerRegistryCallerSession) ProxiableUUID() ([32]byte, error) {
	return _ScannerRegistry.Contract.ProxiableUUID(&_ScannerRegistry.CallOpts)
}

// ScannerAddressToId is a free data retrieval call binding the contract method 0x82fe1bcc.
//
// Solidity: function scannerAddressToId(address scanner) pure returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) ScannerAddressToId(opts *bind.CallOpts, scanner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "scannerAddressToId", scanner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScannerAddressToId is a free data retrieval call binding the contract method 0x82fe1bcc.
//
// Solidity: function scannerAddressToId(address scanner) pure returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) ScannerAddressToId(scanner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.ScannerAddressToId(&_ScannerRegistry.CallOpts, scanner)
}

// ScannerAddressToId is a free data retrieval call binding the contract method 0x82fe1bcc.
//
// Solidity: function scannerAddressToId(address scanner) pure returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) ScannerAddressToId(scanner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.ScannerAddressToId(&_ScannerRegistry.CallOpts, scanner)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ScannerRegistry.Contract.SupportsInterface(&_ScannerRegistry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ScannerRegistry.Contract.SupportsInterface(&_ScannerRegistry.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) Symbol() (string, error) {
	return _ScannerRegistry.Contract.Symbol(&_ScannerRegistry.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) Symbol() (string, error) {
	return _ScannerRegistry.Contract.Symbol(&_ScannerRegistry.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) TokenURI(tokenId *big.Int) (string, error) {
	return _ScannerRegistry.Contract.TokenURI(&_ScannerRegistry.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ScannerRegistry.Contract.TokenURI(&_ScannerRegistry.CallOpts, tokenId)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) Version() (string, error) {
	return _ScannerRegistry.Contract.Version(&_ScannerRegistry.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) Version() (string, error) {
	return _ScannerRegistry.Contract.Version(&_ScannerRegistry.CallOpts)
}

// AdminRegister is a paid mutator transaction binding the contract method 0x2a91fb34.
//
// Solidity: function adminRegister(address scanner, address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) AdminRegister(opts *bind.TransactOpts, scanner common.Address, owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "adminRegister", scanner, owner, chainId, metadata)
}

// AdminRegister is a paid mutator transaction binding the contract method 0x2a91fb34.
//
// Solidity: function adminRegister(address scanner, address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistrySession) AdminRegister(scanner common.Address, owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.AdminRegister(&_ScannerRegistry.TransactOpts, scanner, owner, chainId, metadata)
}

// AdminRegister is a paid mutator transaction binding the contract method 0x2a91fb34.
//
// Solidity: function adminRegister(address scanner, address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) AdminRegister(scanner common.Address, owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.AdminRegister(&_ScannerRegistry.TransactOpts, scanner, owner, chainId, metadata)
}

// AdminUpdate is a paid mutator transaction binding the contract method 0xc2dae01d.
//
// Solidity: function adminUpdate(address scanner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) AdminUpdate(opts *bind.TransactOpts, scanner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "adminUpdate", scanner, chainId, metadata)
}

// AdminUpdate is a paid mutator transaction binding the contract method 0xc2dae01d.
//
// Solidity: function adminUpdate(address scanner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistrySession) AdminUpdate(scanner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.AdminUpdate(&_ScannerRegistry.TransactOpts, scanner, chainId, metadata)
}

// AdminUpdate is a paid mutator transaction binding the contract method 0xc2dae01d.
//
// Solidity: function adminUpdate(address scanner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) AdminUpdate(scanner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.AdminUpdate(&_ScannerRegistry.TransactOpts, scanner, chainId, metadata)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistrySession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Approve(&_ScannerRegistry.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Approve(&_ScannerRegistry.TransactOpts, to, tokenId)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_ScannerRegistry *ScannerRegistryTransactor) DisableRouter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "disableRouter")
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_ScannerRegistry *ScannerRegistrySession) DisableRouter() (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DisableRouter(&_ScannerRegistry.TransactOpts)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) DisableRouter() (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DisableRouter(&_ScannerRegistry.TransactOpts)
}

// DisableScanner is a paid mutator transaction binding the contract method 0x59238297.
//
// Solidity: function disableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) DisableScanner(opts *bind.TransactOpts, scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "disableScanner", scannerId, permission)
}

// DisableScanner is a paid mutator transaction binding the contract method 0x59238297.
//
// Solidity: function disableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistrySession) DisableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DisableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// DisableScanner is a paid mutator transaction binding the contract method 0x59238297.
//
// Solidity: function disableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) DisableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DisableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// EnableScanner is a paid mutator transaction binding the contract method 0x4629f427.
//
// Solidity: function enableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) EnableScanner(opts *bind.TransactOpts, scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "enableScanner", scannerId, permission)
}

// EnableScanner is a paid mutator transaction binding the contract method 0x4629f427.
//
// Solidity: function enableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistrySession) EnableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.EnableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// EnableScanner is a paid mutator transaction binding the contract method 0x4629f427.
//
// Solidity: function enableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) EnableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.EnableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// Initialize is a paid mutator transaction binding the contract method 0x90657147.
//
// Solidity: function initialize(address __manager, string __name, string __symbol) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) Initialize(opts *bind.TransactOpts, __manager common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "initialize", __manager, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x90657147.
//
// Solidity: function initialize(address __manager, string __name, string __symbol) returns()
func (_ScannerRegistry *ScannerRegistrySession) Initialize(__manager common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Initialize(&_ScannerRegistry.TransactOpts, __manager, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x90657147.
//
// Solidity: function initialize(address __manager, string __name, string __symbol) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) Initialize(__manager common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Initialize(&_ScannerRegistry.TransactOpts, __manager, __name, __symbol)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ScannerRegistry *ScannerRegistryTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ScannerRegistry *ScannerRegistrySession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Multicall(&_ScannerRegistry.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ScannerRegistry *ScannerRegistryTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Multicall(&_ScannerRegistry.TransactOpts, data)
}

// Register is a paid mutator transaction binding the contract method 0xf11b1b88.
//
// Solidity: function register(address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) Register(opts *bind.TransactOpts, owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "register", owner, chainId, metadata)
}

// Register is a paid mutator transaction binding the contract method 0xf11b1b88.
//
// Solidity: function register(address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistrySession) Register(owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Register(&_ScannerRegistry.TransactOpts, owner, chainId, metadata)
}

// Register is a paid mutator transaction binding the contract method 0xf11b1b88.
//
// Solidity: function register(address owner, uint256 chainId, string metadata) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) Register(owner common.Address, chainId *big.Int, metadata string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Register(&_ScannerRegistry.TransactOpts, owner, chainId, metadata)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistrySession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ScannerRegistry *ScannerRegistrySession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom0(&_ScannerRegistry.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom0(&_ScannerRegistry.TransactOpts, from, to, tokenId, data)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetAccessManager(opts *bind.TransactOpts, newManager common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setAccessManager", newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetAccessManager(&_ScannerRegistry.TransactOpts, newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetAccessManager(&_ScannerRegistry.TransactOpts, newManager)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetApprovalForAll(&_ScannerRegistry.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetApprovalForAll(&_ScannerRegistry.TransactOpts, operator, approved)
}

// SetManager is a paid mutator transaction binding the contract method 0x5a74fc29.
//
// Solidity: function setManager(uint256 scannerId, address manager, bool enable) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetManager(opts *bind.TransactOpts, scannerId *big.Int, manager common.Address, enable bool) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setManager", scannerId, manager, enable)
}

// SetManager is a paid mutator transaction binding the contract method 0x5a74fc29.
//
// Solidity: function setManager(uint256 scannerId, address manager, bool enable) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetManager(scannerId *big.Int, manager common.Address, enable bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetManager(&_ScannerRegistry.TransactOpts, scannerId, manager, enable)
}

// SetManager is a paid mutator transaction binding the contract method 0x5a74fc29.
//
// Solidity: function setManager(uint256 scannerId, address manager, bool enable) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetManager(scannerId *big.Int, manager common.Address, enable bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetManager(&_ScannerRegistry.TransactOpts, scannerId, manager, enable)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetName(opts *bind.TransactOpts, ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setName", ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetName(&_ScannerRegistry.TransactOpts, ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetName(&_ScannerRegistry.TransactOpts, ensRegistry, ensName)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetStakeController(opts *bind.TransactOpts, stakeController common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setStakeController", stakeController)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetStakeController(stakeController common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetStakeController(&_ScannerRegistry.TransactOpts, stakeController)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetStakeController(stakeController common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetStakeController(&_ScannerRegistry.TransactOpts, stakeController)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xa9032e7b.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold, uint256 chainId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetStakeThreshold(opts *bind.TransactOpts, newStakeThreshold IStakeSubjectStakeThreshold, chainId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setStakeThreshold", newStakeThreshold, chainId)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xa9032e7b.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold, uint256 chainId) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold, chainId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetStakeThreshold(&_ScannerRegistry.TransactOpts, newStakeThreshold, chainId)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xa9032e7b.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold, uint256 chainId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold, chainId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetStakeThreshold(&_ScannerRegistry.TransactOpts, newStakeThreshold, chainId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistrySession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.TransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.TransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ScannerRegistry *ScannerRegistrySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeTo(&_ScannerRegistry.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeTo(&_ScannerRegistry.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ScannerRegistry *ScannerRegistryTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ScannerRegistry *ScannerRegistrySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeToAndCall(&_ScannerRegistry.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeToAndCall(&_ScannerRegistry.TransactOpts, newImplementation, data)
}

// ScannerRegistryAccessManagerUpdatedIterator is returned from FilterAccessManagerUpdated and is used to iterate over the raw logs and unpacked data for AccessManagerUpdated events raised by the ScannerRegistry contract.
type ScannerRegistryAccessManagerUpdatedIterator struct {
	Event *ScannerRegistryAccessManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryAccessManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryAccessManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryAccessManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryAccessManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryAccessManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryAccessManagerUpdated represents a AccessManagerUpdated event raised by the ScannerRegistry contract.
type ScannerRegistryAccessManagerUpdated struct {
	NewAddressManager common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAccessManagerUpdated is a free log retrieval operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterAccessManagerUpdated(opts *bind.FilterOpts, newAddressManager []common.Address) (*ScannerRegistryAccessManagerUpdatedIterator, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryAccessManagerUpdatedIterator{contract: _ScannerRegistry.contract, event: "AccessManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchAccessManagerUpdated is a free log subscription operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchAccessManagerUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistryAccessManagerUpdated, newAddressManager []common.Address) (event.Subscription, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryAccessManagerUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessManagerUpdated is a log parse operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseAccessManagerUpdated(log types.Log) (*ScannerRegistryAccessManagerUpdated, error) {
	event := new(ScannerRegistryAccessManagerUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the ScannerRegistry contract.
type ScannerRegistryAdminChangedIterator struct {
	Event *ScannerRegistryAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryAdminChanged represents a AdminChanged event raised by the ScannerRegistry contract.
type ScannerRegistryAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*ScannerRegistryAdminChangedIterator, error) {

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryAdminChangedIterator{contract: _ScannerRegistry.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *ScannerRegistryAdminChanged) (event.Subscription, error) {

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryAdminChanged)
				if err := _ScannerRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseAdminChanged(log types.Log) (*ScannerRegistryAdminChanged, error) {
	event := new(ScannerRegistryAdminChanged)
	if err := _ScannerRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ScannerRegistry contract.
type ScannerRegistryApprovalIterator struct {
	Event *ScannerRegistryApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryApproval represents a Approval event raised by the ScannerRegistry contract.
type ScannerRegistryApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ScannerRegistryApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryApprovalIterator{contract: _ScannerRegistry.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ScannerRegistryApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryApproval)
				if err := _ScannerRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseApproval(log types.Log) (*ScannerRegistryApproval, error) {
	event := new(ScannerRegistryApproval)
	if err := _ScannerRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ScannerRegistry contract.
type ScannerRegistryApprovalForAllIterator struct {
	Event *ScannerRegistryApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryApprovalForAll represents a ApprovalForAll event raised by the ScannerRegistry contract.
type ScannerRegistryApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ScannerRegistryApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryApprovalForAllIterator{contract: _ScannerRegistry.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ScannerRegistryApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryApprovalForAll)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseApprovalForAll(log types.Log) (*ScannerRegistryApprovalForAll, error) {
	event := new(ScannerRegistryApprovalForAll)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the ScannerRegistry contract.
type ScannerRegistryBeaconUpgradedIterator struct {
	Event *ScannerRegistryBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryBeaconUpgraded represents a BeaconUpgraded event raised by the ScannerRegistry contract.
type ScannerRegistryBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*ScannerRegistryBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryBeaconUpgradedIterator{contract: _ScannerRegistry.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *ScannerRegistryBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryBeaconUpgraded)
				if err := _ScannerRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseBeaconUpgraded(log types.Log) (*ScannerRegistryBeaconUpgraded, error) {
	event := new(ScannerRegistryBeaconUpgraded)
	if err := _ScannerRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ScannerRegistry contract.
type ScannerRegistryInitializedIterator struct {
	Event *ScannerRegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryInitialized represents a Initialized event raised by the ScannerRegistry contract.
type ScannerRegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*ScannerRegistryInitializedIterator, error) {

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryInitializedIterator{contract: _ScannerRegistry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ScannerRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryInitialized)
				if err := _ScannerRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseInitialized(log types.Log) (*ScannerRegistryInitialized, error) {
	event := new(ScannerRegistryInitialized)
	if err := _ScannerRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryManagerEnabledIterator is returned from FilterManagerEnabled and is used to iterate over the raw logs and unpacked data for ManagerEnabled events raised by the ScannerRegistry contract.
type ScannerRegistryManagerEnabledIterator struct {
	Event *ScannerRegistryManagerEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryManagerEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryManagerEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryManagerEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryManagerEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryManagerEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryManagerEnabled represents a ManagerEnabled event raised by the ScannerRegistry contract.
type ScannerRegistryManagerEnabled struct {
	ScannerId *big.Int
	Manager   common.Address
	Enabled   bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerEnabled is a free log retrieval operation binding the contract event 0x538b6537a6fe8f0deae9f3b86ad1924d5e5b3d5a683055276b2824f918be043e.
//
// Solidity: event ManagerEnabled(uint256 indexed scannerId, address indexed manager, bool enabled)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterManagerEnabled(opts *bind.FilterOpts, scannerId []*big.Int, manager []common.Address) (*ScannerRegistryManagerEnabledIterator, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var managerRule []interface{}
	for _, managerItem := range manager {
		managerRule = append(managerRule, managerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ManagerEnabled", scannerIdRule, managerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryManagerEnabledIterator{contract: _ScannerRegistry.contract, event: "ManagerEnabled", logs: logs, sub: sub}, nil
}

// WatchManagerEnabled is a free log subscription operation binding the contract event 0x538b6537a6fe8f0deae9f3b86ad1924d5e5b3d5a683055276b2824f918be043e.
//
// Solidity: event ManagerEnabled(uint256 indexed scannerId, address indexed manager, bool enabled)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchManagerEnabled(opts *bind.WatchOpts, sink chan<- *ScannerRegistryManagerEnabled, scannerId []*big.Int, manager []common.Address) (event.Subscription, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var managerRule []interface{}
	for _, managerItem := range manager {
		managerRule = append(managerRule, managerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ManagerEnabled", scannerIdRule, managerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryManagerEnabled)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ManagerEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerEnabled is a log parse operation binding the contract event 0x538b6537a6fe8f0deae9f3b86ad1924d5e5b3d5a683055276b2824f918be043e.
//
// Solidity: event ManagerEnabled(uint256 indexed scannerId, address indexed manager, bool enabled)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseManagerEnabled(log types.Log) (*ScannerRegistryManagerEnabled, error) {
	event := new(ScannerRegistryManagerEnabled)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ManagerEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryRouterUpdatedIterator is returned from FilterRouterUpdated and is used to iterate over the raw logs and unpacked data for RouterUpdated events raised by the ScannerRegistry contract.
type ScannerRegistryRouterUpdatedIterator struct {
	Event *ScannerRegistryRouterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryRouterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryRouterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryRouterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryRouterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryRouterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryRouterUpdated represents a RouterUpdated event raised by the ScannerRegistry contract.
type ScannerRegistryRouterUpdated struct {
	Router common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRouterUpdated is a free log retrieval operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterRouterUpdated(opts *bind.FilterOpts, router []common.Address) (*ScannerRegistryRouterUpdatedIterator, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryRouterUpdatedIterator{contract: _ScannerRegistry.contract, event: "RouterUpdated", logs: logs, sub: sub}, nil
}

// WatchRouterUpdated is a free log subscription operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchRouterUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistryRouterUpdated, router []common.Address) (event.Subscription, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryRouterUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRouterUpdated is a log parse operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseRouterUpdated(log types.Log) (*ScannerRegistryRouterUpdated, error) {
	event := new(ScannerRegistryRouterUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryScannerEnabledIterator is returned from FilterScannerEnabled and is used to iterate over the raw logs and unpacked data for ScannerEnabled events raised by the ScannerRegistry contract.
type ScannerRegistryScannerEnabledIterator struct {
	Event *ScannerRegistryScannerEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryScannerEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryScannerEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryScannerEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryScannerEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryScannerEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryScannerEnabled represents a ScannerEnabled event raised by the ScannerRegistry contract.
type ScannerRegistryScannerEnabled struct {
	ScannerId  *big.Int
	Enabled    bool
	Permission uint8
	Value      bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScannerEnabled is a free log retrieval operation binding the contract event 0xcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d4.
//
// Solidity: event ScannerEnabled(uint256 indexed scannerId, bool indexed enabled, uint8 permission, bool value)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterScannerEnabled(opts *bind.FilterOpts, scannerId []*big.Int, enabled []bool) (*ScannerRegistryScannerEnabledIterator, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ScannerEnabled", scannerIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryScannerEnabledIterator{contract: _ScannerRegistry.contract, event: "ScannerEnabled", logs: logs, sub: sub}, nil
}

// WatchScannerEnabled is a free log subscription operation binding the contract event 0xcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d4.
//
// Solidity: event ScannerEnabled(uint256 indexed scannerId, bool indexed enabled, uint8 permission, bool value)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchScannerEnabled(opts *bind.WatchOpts, sink chan<- *ScannerRegistryScannerEnabled, scannerId []*big.Int, enabled []bool) (event.Subscription, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ScannerEnabled", scannerIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryScannerEnabled)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScannerEnabled is a log parse operation binding the contract event 0xcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d4.
//
// Solidity: event ScannerEnabled(uint256 indexed scannerId, bool indexed enabled, uint8 permission, bool value)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseScannerEnabled(log types.Log) (*ScannerRegistryScannerEnabled, error) {
	event := new(ScannerRegistryScannerEnabled)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryScannerUpdatedIterator is returned from FilterScannerUpdated and is used to iterate over the raw logs and unpacked data for ScannerUpdated events raised by the ScannerRegistry contract.
type ScannerRegistryScannerUpdatedIterator struct {
	Event *ScannerRegistryScannerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryScannerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryScannerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryScannerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryScannerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryScannerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryScannerUpdated represents a ScannerUpdated event raised by the ScannerRegistry contract.
type ScannerRegistryScannerUpdated struct {
	ScannerId *big.Int
	ChainId   *big.Int
	Metadata  string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterScannerUpdated is a free log retrieval operation binding the contract event 0x72d55569a8bd2d7bfb37627de4db16b8967136cfd50c423227036b24055e440d.
//
// Solidity: event ScannerUpdated(uint256 indexed scannerId, uint256 indexed chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterScannerUpdated(opts *bind.FilterOpts, scannerId []*big.Int, chainId []*big.Int) (*ScannerRegistryScannerUpdatedIterator, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ScannerUpdated", scannerIdRule, chainIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryScannerUpdatedIterator{contract: _ScannerRegistry.contract, event: "ScannerUpdated", logs: logs, sub: sub}, nil
}

// WatchScannerUpdated is a free log subscription operation binding the contract event 0x72d55569a8bd2d7bfb37627de4db16b8967136cfd50c423227036b24055e440d.
//
// Solidity: event ScannerUpdated(uint256 indexed scannerId, uint256 indexed chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchScannerUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistryScannerUpdated, scannerId []*big.Int, chainId []*big.Int) (event.Subscription, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ScannerUpdated", scannerIdRule, chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryScannerUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScannerUpdated is a log parse operation binding the contract event 0x72d55569a8bd2d7bfb37627de4db16b8967136cfd50c423227036b24055e440d.
//
// Solidity: event ScannerUpdated(uint256 indexed scannerId, uint256 indexed chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseScannerUpdated(log types.Log) (*ScannerRegistryScannerUpdated, error) {
	event := new(ScannerRegistryScannerUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryStakeControllerUpdatedIterator is returned from FilterStakeControllerUpdated and is used to iterate over the raw logs and unpacked data for StakeControllerUpdated events raised by the ScannerRegistry contract.
type ScannerRegistryStakeControllerUpdatedIterator struct {
	Event *ScannerRegistryStakeControllerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryStakeControllerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryStakeControllerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryStakeControllerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryStakeControllerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryStakeControllerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryStakeControllerUpdated represents a StakeControllerUpdated event raised by the ScannerRegistry contract.
type ScannerRegistryStakeControllerUpdated struct {
	NewstakeController common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterStakeControllerUpdated is a free log retrieval operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterStakeControllerUpdated(opts *bind.FilterOpts, newstakeController []common.Address) (*ScannerRegistryStakeControllerUpdatedIterator, error) {

	var newstakeControllerRule []interface{}
	for _, newstakeControllerItem := range newstakeController {
		newstakeControllerRule = append(newstakeControllerRule, newstakeControllerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "StakeControllerUpdated", newstakeControllerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryStakeControllerUpdatedIterator{contract: _ScannerRegistry.contract, event: "StakeControllerUpdated", logs: logs, sub: sub}, nil
}

// WatchStakeControllerUpdated is a free log subscription operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchStakeControllerUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistryStakeControllerUpdated, newstakeController []common.Address) (event.Subscription, error) {

	var newstakeControllerRule []interface{}
	for _, newstakeControllerItem := range newstakeController {
		newstakeControllerRule = append(newstakeControllerRule, newstakeControllerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "StakeControllerUpdated", newstakeControllerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryStakeControllerUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "StakeControllerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeControllerUpdated is a log parse operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseStakeControllerUpdated(log types.Log) (*ScannerRegistryStakeControllerUpdated, error) {
	event := new(ScannerRegistryStakeControllerUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "StakeControllerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryStakeThresholdChangedIterator is returned from FilterStakeThresholdChanged and is used to iterate over the raw logs and unpacked data for StakeThresholdChanged events raised by the ScannerRegistry contract.
type ScannerRegistryStakeThresholdChangedIterator struct {
	Event *ScannerRegistryStakeThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryStakeThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryStakeThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryStakeThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryStakeThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryStakeThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryStakeThresholdChanged represents a StakeThresholdChanged event raised by the ScannerRegistry contract.
type ScannerRegistryStakeThresholdChanged struct {
	ChainId   *big.Int
	Min       *big.Int
	Max       *big.Int
	Activated bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStakeThresholdChanged is a free log retrieval operation binding the contract event 0x52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def.
//
// Solidity: event StakeThresholdChanged(uint256 indexed chainId, uint256 min, uint256 max, bool activated)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterStakeThresholdChanged(opts *bind.FilterOpts, chainId []*big.Int) (*ScannerRegistryStakeThresholdChangedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "StakeThresholdChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryStakeThresholdChangedIterator{contract: _ScannerRegistry.contract, event: "StakeThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchStakeThresholdChanged is a free log subscription operation binding the contract event 0x52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def.
//
// Solidity: event StakeThresholdChanged(uint256 indexed chainId, uint256 min, uint256 max, bool activated)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchStakeThresholdChanged(opts *bind.WatchOpts, sink chan<- *ScannerRegistryStakeThresholdChanged, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "StakeThresholdChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryStakeThresholdChanged)
				if err := _ScannerRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeThresholdChanged is a log parse operation binding the contract event 0x52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def.
//
// Solidity: event StakeThresholdChanged(uint256 indexed chainId, uint256 min, uint256 max, bool activated)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseStakeThresholdChanged(log types.Log) (*ScannerRegistryStakeThresholdChanged, error) {
	event := new(ScannerRegistryStakeThresholdChanged)
	if err := _ScannerRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ScannerRegistry contract.
type ScannerRegistryTransferIterator struct {
	Event *ScannerRegistryTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryTransfer represents a Transfer event raised by the ScannerRegistry contract.
type ScannerRegistryTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ScannerRegistryTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryTransferIterator{contract: _ScannerRegistry.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ScannerRegistryTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryTransfer)
				if err := _ScannerRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseTransfer(log types.Log) (*ScannerRegistryTransfer, error) {
	event := new(ScannerRegistryTransfer)
	if err := _ScannerRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the ScannerRegistry contract.
type ScannerRegistryUpgradedIterator struct {
	Event *ScannerRegistryUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryUpgraded represents a Upgraded event raised by the ScannerRegistry contract.
type ScannerRegistryUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ScannerRegistryUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryUpgradedIterator{contract: _ScannerRegistry.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ScannerRegistryUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryUpgraded)
				if err := _ScannerRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseUpgraded(log types.Log) (*ScannerRegistryUpgraded, error) {
	event := new(ScannerRegistryUpgraded)
	if err := _ScannerRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
