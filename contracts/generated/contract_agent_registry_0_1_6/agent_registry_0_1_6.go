// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract_agent_registry_0_1_6

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IStakeSubjectStakeThreshold is an auto generated low-level Go binding around an user-defined struct.
type IStakeSubjectStakeThreshold struct {
	Min       *big.Int
	Max       *big.Int
	Activated bool
}

// AgentRegistryMetaData contains all meta data concerning the AgentRegistry contract.
var AgentRegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"}],\"name\":\"AgentCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enumAgentRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AgentEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"AgentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"FrontRunningDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"StakeThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newHandler\",\"type\":\"address\"}],\"name\":\"SubjectHandlerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"createAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"enumAgentRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"disableAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"enumAgentRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"enableAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frontRunningDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agentVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgentByChainAndIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgentByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getAgentCountByChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getAgentState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agentVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"disabledFlags\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"}],\"name\":\"getCommitTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getDisableFlags\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getStakeThreshold\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubjectHandler\",\"outputs\":[{\"internalType\":\"contractIStakeSubjectGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"isStakedOverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"}],\"name\":\"prepareAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"registerAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setFrontRunningDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"newStakeThreshold\",\"type\":\"tuple\"}],\"name\":\"setStakeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subjectGateway\",\"type\":\"address\"}],\"name\":\"setSubjectHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"updateAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523060a0523480156200001557600080fd5b506040516200469238038062004692833981016040819052620000389162000180565b6001600160a01b038116608052600054610100900460ff1615808015620000665750600054600160ff909116105b8062000096575062000083306200017160201b62001bad1760201c565b15801562000096575060005460ff166001145b620000fe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff19166001179055801562000122576000805461ff0019166101001790555b801562000169576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050620001b2565b6001600160a01b03163b151590565b6000602082840312156200019357600080fd5b81516001600160a01b0381168114620001ab57600080fd5b9392505050565b60805160a0516144a1620001f160003960008181610d9f01528181610ddf01528181610eba01528181610efa0152610f890152600050506144a16000f3fe6080604052600436106102725760003560e01c8063871016e11161014f578063ac9650d8116100c1578063c87b56dd1161007a578063c87b56dd146107eb578063c95808041461080b578063d0c6464b1461082b578063d858a7e51461084b578063e985e9c514610860578063e9965e44146108aa57600080fd5b8063ac9650d814610727578063b7b57b2714610754578063b88d4fde14610774578063c01bf17d14610794578063c02674c5146107b4578063c783034c146107cb57600080fd5b806395d89b411161011357806395d89b41146106735780639f79b63a14610688578063a22cb465146106a7578063a8439d98146106c7578063aa9ac6c6146106e7578063ac388ff51461070757600080fd5b8063871016e1146105c557806389432d40146105fe5780638eea276f1461061e578063906571471461063e57806391cab63e1461065e57600080fd5b806342842e0e116101e857806355d372fb116101ac57806355d372fb146104e1578063579a698814610501578063624ade3c146105215780636352211e1461056557806370a08231146105855780637935d5b4146105a557600080fd5b806342842e0e1461044857806344014b6b146104685780634f1ef2861461048857806352d1902d1461049b57806354fd4d50146104b057600080fd5b80631e4def831161023a5780631e4def831461036457806321095d651461039757806323b872dd146103b75780632de5aaf7146103d75780633121db1c146104085780633659cfe61461042857600080fd5b806301ffc9a71461027757806306fdde03146102ac578063081812fc146102ce578063095ea7b314610306578063143527df14610328575b600080fd5b34801561028357600080fd5b5061029761029236600461365a565b6108ca565b60405190151581526020015b60405180910390f35b3480156102b857600080fd5b506102c161091c565b6040516102a391906136cf565b3480156102da57600080fd5b506102ee6102e93660046136e2565b6109af565b6040516001600160a01b0390911681526020016102a3565b34801561031257600080fd5b50610326610321366004613710565b6109d7565b005b34801561033457600080fd5b506103566103433660046136e2565b600090815261012d602052604090205490565b6040519081526020016102a3565b34801561037057600080fd5b5061038461037f3660046136e2565b610af2565b6040516102a39796959493929190613777565b3480156103a357600080fd5b506103266103b23660046137cf565b610b52565b3480156103c357600080fd5b506103266103d2366004613803565b610bb8565b3480156103e357600080fd5b506103f76103f23660046136e2565b610be9565b6040516102a3959493929190613844565b34801561041457600080fd5b506103266104233660046138d9565b610d26565b34801561043457600080fd5b5061032661044336600461392d565b610d94565b34801561045457600080fd5b50610326610463366004613803565b610e74565b34801561047457600080fd5b5061032661048336600461392d565b610e8f565b6103266104963660046139ec565b610eaf565b3480156104a757600080fd5b50610356610f7c565b3480156104bc57600080fd5b506102c160405180604001604052806005815260200164181718971b60d91b81525081565b3480156104ed57600080fd5b506103266104fc3660046136e2565b61102f565b34801561050d57600080fd5b5061029761051c3660046136e2565b6110a3565b34801561052d57600080fd5b5061054161053c3660046136e2565b6110ae565b604080518251815260208084015190820152918101511515908201526060016102a3565b34801561057157600080fd5b506102ee6105803660046136e2565b611102565b34801561059157600080fd5b506103566105a036600461392d565b61110d565b3480156105b157600080fd5b506103266105c0366004613a7f565b611194565b3480156105d157600080fd5b506103566105e03660046136e2565b60009081526101c46020908152604080832083805290915290205490565b34801561060a57600080fd5b506103566106193660046136e2565b6111a9565b34801561062a57600080fd5b506103566106393660046136e2565b6111b7565b34801561064a57600080fd5b50610326610659366004613b0a565b6111cf565b34801561066a57600080fd5b50610356611311565b34801561067f57600080fd5b506102c1611323565b34801561069457600080fd5b50610192546001600160a01b03166102ee565b3480156106b357600080fd5b506103266106c2366004613b9a565b611333565b3480156106d357600080fd5b506103266106e23660046136e2565b61133e565b3480156106f357600080fd5b50610326610702366004613bc8565b611347565b34801561071357600080fd5b50610356610722366004613c30565b611531565b34801561073357600080fd5b50610747610742366004613c52565b611551565b6040516102a39190613c93565b34801561076057600080fd5b5061029761076f3660046136e2565b611645565b34801561078057600080fd5b5061032661078f366004613cf5565b611650565b3480156107a057600080fd5b506103266107af366004613bc8565b611682565b3480156107c057600080fd5b5061035661019a5481565b3480156107d757600080fd5b506102976107e63660046136e2565b6118c8565b3480156107f757600080fd5b506102c16108063660046136e2565b611916565b34801561081757600080fd5b5061032661082636600461392d565b611989565b34801561083757600080fd5b506103266108463660046137cf565b611a43565b34801561085757600080fd5b50610326611a63565b34801561086c57600080fd5b5061029761087b366004613d60565b6001600160a01b0391821660009081526101656020908152604080832093909416825291909152205460ff1690565b3480156108b657600080fd5b506103266108c5366004613d8e565b611aee565b60006001600160e01b031982166380ac58cd60e01b14806108fb57506001600160e01b03198216635b5e139f60e01b145b8061091657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060610160805461092c90613def565b80601f016020809104026020016040519081016040528092919081815260200182805461095890613def565b80156109a55780601f1061097a576101008083540402835291602001916109a5565b820191906000526020600020905b81548152906001019060200180831161098857829003601f168201915b5050505050905090565b60006109ba82611bbc565b50600090815261016460205260409020546001600160a01b031690565b60006109e282611c0c565b9050806001600160a01b0316836001600160a01b03161415610a555760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610a715750610a71813361087b565b610ae35760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610a4c565b610aed8383611c6d565b505050565b6000806000606080600080610b0688610be9565b939a509198509650945092508686868686610b208d6118c8565b60008e81526101c460209081526040808320838052909152902054959e949d50929b5090995097509550909350915050565b610b5c8282611cdc565b610ba857335b816002811115610b7457610b74613e2a565b6040516372fa0ebb60e11b81526001600160a01b03909216600483015260ff16602482015260448101839052606401610a4c565b610bb482826000611d6f565b5050565b610bc23382611d7a565b610bde5760405162461bcd60e51b8152600401610a4c90613e40565b610aed838383611dfa565b60008060006060806000610bfc87611f99565b90508081610c0b576000610c14565b610c1488611102565b60008981526101f6602052604090208054600182018054919290916002909101908290610c4090613def565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6c90613def565b8015610cb95780601f10610c8e57610100808354040283529160200191610cb9565b820191906000526020600020905b815481529060010190602001808311610c9c57829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610d0b57602002820191906000526020600020905b815481526020019060010190808311610cf7575b50505050509050955095509550955095505091939590929450565b7f664245c7af190fec316596e8231f724e8171b1966cfcd124347ac5a66c34f64a610d518133611fb7565b610d835780335b6040516301d4003760e61b815260048101929092526001600160a01b03166024820152604401610a4c565b610d8e84848461203c565b50505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ddd5760405162461bcd60e51b8152600401610a4c90613e8e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e26600080516020614425833981519152546001600160a01b031690565b6001600160a01b031614610e4c5760405162461bcd60e51b8152600401610a4c90613eda565b610e5581612152565b60408051600080825260208201909252610e7191839190612188565b50565b610aed83838360405180602001604052806000815250611650565b6000610e9b8133611fb7565b610ea6578033610d58565b610bb482612302565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610ef85760405162461bcd60e51b8152600401610a4c90613e8e565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f41600080516020614425833981519152546001600160a01b031690565b6001600160a01b031614610f675760405162461bcd60e51b8152600401610a4c90613eda565b610f7082612152565b610bb482826001612188565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461101c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a4c565b5060008051602061442583398151915290565b7f2a32a1662c1214ad9d5a31a0a1cb01ef357b3d1954570b75c128485ad3931dbc61105a8133611fb7565b611065578033610d58565b61019a8290556040518281527ff6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77906020015b60405180910390a15050565b600061091682611f99565b6110d4604051806060016040528060008152602001600081526020016000151581525090565b5050604080516060810182526101975481526101985460208201526101995460ff1615159181019190915290565b600061091682611c0c565b60006001600160a01b0382166111775760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610a4c565b506001600160a01b03166000908152610163602052604090205490565b6111a18685858585611682565b505050505050565b600061091661022883612395565b600081815261022a60205260408120610916906123a1565b600054610100900460ff16158080156111ef5750600054600160ff909116105b806112095750303b158015611209575060005460ff166001145b6112255760405162461bcd60e51b8152600401610a4c90613f26565b6000805460ff191660011790558015611248576000805461ff0019166101001790555b611251866123ab565b6112c485858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152925087915086908190840183828082843760009201919091525061247792505050565b80156111a1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050505050565b600061131e6102286123a1565b905090565b6060610161805461092c90613def565b610bb43383836124a8565b610e7181612579565b8461135181611102565b6001600160a01b0316336001600160a01b03161461138b5760405163871d7af360e01b815233600482015260248101829052604401610a4c565b828280806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508251151591506113e1905057604051630446493360e01b8152600401610a4c90613f74565b60015b815181101561145b57816113f9600183613fac565b8151811061140957611409613fc3565b602002602001015182828151811061142357611423613fc3565b6020026020010151116114495760405163237c384f60e01b8152600401610a4c90613f74565b8061145381613fd9565b9150506113e4565b506114a08787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992508891506125bb9050565b6114e48787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992508891506125c79050565b6115288787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250889150610d8e9050565b50505050505050565b600082815261022a6020526040812061154a9083612395565b9392505050565b6060816001600160401b0381111561156b5761156b61394a565b60405190808252806020026020018201604052801561159e57816020015b60608152602001906001900390816115895790505b50905060005b8281101561163e5761160e308585848181106115c2576115c2613fc3565b90506020028101906115d49190613ff4565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506125d392505050565b82828151811061162057611620613fc3565b6020026020010181905250808061163690613fd9565b9150506115a4565b5092915050565b6000610916826125f8565b61165a3383611d7a565b6116765760405162461bcd60e51b8152600401610a4c90613e40565b610d8e848484846126a5565b818180806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508251151591506116d8905057604051630446493360e01b8152600401610a4c90613f74565b60015b815181101561175257816116f0600183613fac565b8151811061170057611700613fc3565b602002602001015182828151811061171a5761171a613fc3565b6020026020010151116117405760405163237c384f60e01b8152600401610a4c90613f74565b8061174a81613fd9565b9150506116db565b5085338686868660405160200161176e9695949392919061403a565b60408051601f19818403018152918152815160209283012061019a54600082815261012d90945291909220548115806117ba575080158015906117ba5750426117b7838361409b565b11155b6117d757604051631a74087f60e01b815260040160405180910390fd5b600083815261012d60205260408120556117f1338a6126d8565b6118358989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a91506125bb9050565b6118798989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a91506125c79050565b6118bd8989898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150610d8e9050565b505050505050505050565b60006118d3826110a3565b80156118f7575060008281526101c460209081526040808320838052909152902054155b8015610916575061190661280d565b15806109165750610916826125f8565b606061192182611bbc565b600061193860408051602081019091526000815290565b90506000815111611958576040518060200160405280600081525061154a565b8061196284612840565b6040516020016119739291906140b3565b6040516020818303038152906040529392505050565b60006119958133611fb7565b6119a0578033610d58565b6119ba6001600160a01b038316637965db0b60e01b61293d565b6119f8576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610a4c565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a25050565b611a4d8282611cdc565b611a575733610b62565b610bb482826001611d6f565b6065546001600160a01b0316611ab15760405163eac0d38960e01b81526020600482015260126024820152712fb232b83932b1b0ba32b22fb937baba32b960711b6044820152606401610a4c565b606580546001600160a01b03191690556040516000907f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80908290a2565b7f2a32a1662c1214ad9d5a31a0a1cb01ef357b3d1954570b75c128485ad3931dbc611b198133611fb7565b611b24578033610d58565b8151602083015111611b4957604051632ca637fd60e21b815260040160405180910390fd5b8151610197819055602080840151610198819055604080860151610199805460ff191691151591821790558151948552928401919091528201527f6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b590606001611097565b6001600160a01b03163b151590565b611bc581611f99565b610e715760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a4c565b600081815261016260205260408120546001600160a01b0316806109165760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a4c565b60008181526101646020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611ca382611c0c565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080826002811115611cf157611cf1613e2a565b1415611d2857611d217f2a32a1662c1214ad9d5a31a0a1cb01ef357b3d1954570b75c128485ad3931dbc33611fb7565b9050610916565b6001826002811115611d3c57611d3c613e2a565b1415611d6657611d4b83611102565b6001600160a01b0316336001600160a01b0316149050610916565b50600092915050565b610aed838383612959565b600080611d8683611c0c565b9050806001600160a01b0316846001600160a01b03161480611dce57506001600160a01b038082166000908152610165602090815260408083209388168352929052205460ff165b80611df25750836001600160a01b0316611de7846109af565b6001600160a01b0316145b949350505050565b826001600160a01b0316611e0d82611c0c565b6001600160a01b031614611e715760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610a4c565b6001600160a01b038216611ed35760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a4c565b611ede600082611c6d565b6001600160a01b038316600090815261016360205260408120805460019290611f08908490613fac565b90915550506001600160a01b038216600090815261016360205260408120805460019290611f3790849061409b565b90915550506000818152610162602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600090815261016260205260409020546001600160a01b0316151590565b603354604051632474521560e21b8152600481018490526001600160a01b03838116602483015260009216906391d148549060440160206040518083038186803b15801561200457600080fd5b505afa158015612018573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a91906140e2565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526001600160a01b038416906302571be39060240160206040518083038186803b15801561209b57600080fd5b505afa1580156120af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d391906140ff565b6001600160a01b031663c47f002783836040518363ffffffff1660e01b815260040161210092919061411c565b602060405180830381600087803b15801561211a57600080fd5b505af115801561212e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8e919061414b565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361217d8133611fb7565b610bb4578033610d58565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156121bb57610aed836129c5565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156121f457600080fd5b505afa925050508015612224575060408051601f3d908101601f191682019092526122219181019061414b565b60015b6122875760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a4c565b60008051602061442583398151915281146122f65760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a4c565b50610aed838383612a61565b6001600160a01b03811661234a5760405163eac0d38960e01b815260206004820152600e60248201526d7375626a6563744761746577617960901b6044820152606401610a4c565b61019280546001600160a01b0319166001600160a01b0383169081179091556040517f16d72e484786227d7b6dd05e079be9ff9904a81a0a9ec36fc346b20f8c47aff090600090a250565b600061154a8383612a86565b6000610916825490565b600054610100900460ff16158080156123cb5750600054600160ff909116105b806123e55750303b1580156123e5575060005460ff166001145b6124015760405162461bcd60e51b8152600401610a4c90613f26565b6000805460ff191660011790558015612424576000805461ff0019166101001790555b61242d82612ab0565b612435612c0a565b8015610bb4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611097565b600054610100900460ff1661249e5760405162461bcd60e51b8152600401610a4c90614164565b610bb48282612c33565b816001600160a01b0316836001600160a01b0316141561250a5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a4c565b6001600160a01b0383811660008181526101656020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a3505050565b600081815261012d6020526040902054156125a75760405163012b37c560e21b815260040160405180910390fd5b600090815261012d60205260409020429055565b610d8e84848484612c83565b610d8e84848484612e33565b606061154a838360405180606001604052806027815260200161444560279139612f91565b61019754600090612612610192546001600160a01b031690565b60405163145217e760e31b815260016004820152602481018590526001600160a01b03919091169063a290bf389060440160206040518083038186803b15801561265b57600080fd5b505afa15801561266f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612693919061414b565b10158015610916575061091682611f99565b6126b0848484611dfa565b6126bc8484848461302f565b610d8e5760405162461bcd60e51b8152600401610a4c906141af565b6001600160a01b03821661272e5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a4c565b61273781611f99565b156127845760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a4c565b6001600160a01b0382166000908152610163602052604081208054600192906127ae90849061409b565b90915550506000818152610162602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600080612823610192546001600160a01b031690565b6001600160a01b03161415801561131e5750506101995460ff1690565b6060816128645750506040805180820190915260018152600360fc1b602082015290565b8160005b811561288e578061287881613fd9565b91506128879050600a83614217565b9150612868565b6000816001600160401b038111156128a8576128a861394a565b6040519080825280601f01601f1916602001820160405280156128d2576020820181803683370190505b5090505b8415611df2576128e7600183613fac565b91506128f4600a8661422b565b6128ff90603061409b565b60f81b81838151811061291457612914613fc3565b60200101906001600160f81b031916908160001a905350612936600a86614217565b94506128d6565b60006129488361313c565b801561154a575061154a838361316f565b61298882600281111561296e5761296e613e2a565b60008581526101c4602052604090209060ff16831561324e565b612991836118c8565b1515837fb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d641848460405161256c92919061423f565b6001600160a01b0381163b612a325760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a4c565b60008051602061442583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612a6a8361329d565b600082511180612a775750805b15610aed57610d8e83836132dd565b6000826000018281548110612a9d57612a9d613fc3565b9060005260206000200154905092915050565b600054610100900460ff1615808015612ad05750600054600160ff909116105b80612aea5750303b158015612aea575060005460ff166001145b612b065760405162461bcd60e51b8152600401610a4c90613f26565b6000805460ff191660011790558015612b29576000805461ff0019166101001790555b612b436001600160a01b038316637965db0b60e01b61293d565b612b81576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610a4c565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a28015610bb4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611097565b600054610100900460ff16612c315760405162461bcd60e51b8152600401610a4c90614164565b565b600054610100900460ff16612c5a5760405162461bcd60e51b8152600401610a4c90614164565b8151612c6e90610160906020850190613571565b508051610aed90610161906020840190613571565b600080612c8f86610be9565b945050935050508160001415612cad57612cab61022887613392565b505b6000805b8251821080612cbf57508481105b15612e29578251821415612d1c57612d168861022a6000898986612ce281613fd9565b9750818110612cf357612cf3613fc3565b90506020020135815260200190815260200160002061339290919063ffffffff16565b50612cb1565b80851415612d6e57612d168861022a60008686612d3881613fd9565b975081518110612d4a57612d4a613fc3565b6020026020010151815260200190815260200160002061339e90919063ffffffff16565b858582818110612d8057612d80613fc3565b90506020020135838381518110612d9957612d99613fc3565b60200260200101511015612dbb57612d168861022a60008686612d3881613fd9565b858582818110612dcd57612dcd613fc3565b90506020020135838381518110612de657612de6613fc3565b60200260200101511115612e0957612d168861022a6000898986612ce281613fd9565b81612e1381613fd9565b9250508080612e2190613fd9565b915050612cb1565b5050505050505050565b612e3f848484846133aa565b60008481526101f660205260408082209051612e5e9160010190614270565b6040805191829003909120855160208088019190912060008181526101f79092529290205490925060ff1615612eaa576040516313f6180160e31b815260048101829052602401610a4c565b60008181526101f7602090815260408083208054600160ff199182168117909255868552828520805490911690558984526101f6909252822054612eed9161409b565b9050604051806060016040528082815260200187815260200186868080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509390945250508981526101f66020908152604090912083518155838201518051919350612f69926001850192910190613571565b5060408201518051612f859160028401916020909101906135f5565b50505050505050505050565b60606001600160a01b0384163b612fba5760405162461bcd60e51b8152600401610a4c9061430c565b600080856001600160a01b031685604051612fd59190614352565b600060405180830381855af49150503d8060008114613010576040519150601f19603f3d011682016040523d82523d6000602084013e613015565b606091505b50915091506130258282866133f6565b9695505050505050565b60006001600160a01b0384163b1561313157604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061307390339089908890889060040161436e565b602060405180830381600087803b15801561308d57600080fd5b505af19250505080156130bd575060408051601f3d908101601f191682019092526130ba918101906143a1565b60015b613117573d8080156130eb576040519150601f19603f3d011682016040523d82523d6000602084013e6130f0565b606091505b50805161310f5760405162461bcd60e51b8152600401610a4c906141af565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611df2565b506001949350505050565b600061314f826301ffc9a760e01b61316f565b80156109165750613168826001600160e01b031961316f565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906131d6908690614352565b6000604051808303818686fa925050503d8060008114613212576040519150601f19603f3d011682016040523d82523d6000602084013e613217565b606091505b50915091506020815110156132325760009350505050610916565b81801561302557508080602001905181019061302591906140e2565b801561327857600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b6132a6816129c5565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6133065760405162461bcd60e51b8152600401610a4c9061430c565b600080846001600160a01b0316846040516133219190614352565b600060405180830381855af49150503d806000811461335c576040519150601f19603f3d011682016040523d82523d6000602084013e613361565b606091505b50915091506133898282604051806060016040528060278152602001614445602791396133f6565b95945050505050565b600061154a838361342f565b600061154a838361347e565b336001600160a01b0316847f334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff68585856040516133e8939291906143be565b60405180910390a350505050565b6060831561340557508161154a565b8251156134155782518084602001fd5b8160405162461bcd60e51b8152600401610a4c91906136cf565b600081815260018301602052604081205461347657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610916565b506000610916565b600081815260018301602052604081205480156135675760006134a2600183613fac565b85549091506000906134b690600190613fac565b905081811461351b5760008660000182815481106134d6576134d6613fc3565b90600052602060002001549050808760000184815481106134f9576134f9613fc3565b6000918252602080832090910192909255918252600188019052604090208390555b855486908061352c5761352c61440e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610916565b6000915050610916565b82805461357d90613def565b90600052602060002090601f01602090048101928261359f57600085556135e5565b82601f106135b857805160ff19168380011785556135e5565b828001600101855582156135e5579182015b828111156135e55782518255916020019190600101906135ca565b506135f192915061362f565b5090565b8280548282559060005260206000209081019282156135e557916020028201828111156135e55782518255916020019190600101906135ca565b5b808211156135f15760008155600101613630565b6001600160e01b031981168114610e7157600080fd5b60006020828403121561366c57600080fd5b813561154a81613644565b60005b8381101561369257818101518382015260200161367a565b83811115610d8e5750506000910152565b600081518084526136bb816020860160208601613677565b601f01601f19169290920160200192915050565b60208152600061154a60208301846136a3565b6000602082840312156136f457600080fd5b5035919050565b6001600160a01b0381168114610e7157600080fd5b6000806040838503121561372357600080fd5b823561372e816136fb565b946020939093013593505050565b600081518084526020808501945080840160005b8381101561376c57815187529582019590820190600101613750565b509495945050505050565b871515815260018060a01b038716602082015285604082015260e0606082015260006137a660e08301876136a3565b82810360808401526137b8818761373c565b94151560a0840152505060c0015295945050505050565b600080604083850312156137e257600080fd5b823591506020830135600381106137f857600080fd5b809150509250929050565b60008060006060848603121561381857600080fd5b8335613823816136fb565b92506020840135613833816136fb565b929592945050506040919091013590565b851515815260018060a01b038516602082015283604082015260a06060820152600061387360a08301856136a3565b8281036080840152613885818561373c565b98975050505050505050565b60008083601f8401126138a357600080fd5b5081356001600160401b038111156138ba57600080fd5b6020830191508360208285010111156138d257600080fd5b9250929050565b6000806000604084860312156138ee57600080fd5b83356138f9816136fb565b925060208401356001600160401b0381111561391457600080fd5b61392086828701613891565b9497909650939450505050565b60006020828403121561393f57600080fd5b813561154a816136fb565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261397157600080fd5b81356001600160401b038082111561398b5761398b61394a565b604051601f8301601f19908116603f011681019082821181831017156139b3576139b361394a565b816040528381528660208588010111156139cc57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156139ff57600080fd5b8235613a0a816136fb565b915060208301356001600160401b03811115613a2557600080fd5b613a3185828601613960565b9150509250929050565b60008083601f840112613a4d57600080fd5b5081356001600160401b03811115613a6457600080fd5b6020830191508360208260051b85010111156138d257600080fd5b60008060008060008060808789031215613a9857600080fd5b863595506020870135613aaa816136fb565b945060408701356001600160401b0380821115613ac657600080fd5b613ad28a838b01613891565b90965094506060890135915080821115613aeb57600080fd5b50613af889828a01613a3b565b979a9699509497509295939492505050565b600080600080600060608688031215613b2257600080fd5b8535613b2d816136fb565b945060208601356001600160401b0380821115613b4957600080fd5b613b5589838a01613891565b90965094506040880135915080821115613b6e57600080fd5b50613b7b88828901613891565b969995985093965092949392505050565b8015158114610e7157600080fd5b60008060408385031215613bad57600080fd5b8235613bb8816136fb565b915060208301356137f881613b8c565b600080600080600060608688031215613be057600080fd5b8535945060208601356001600160401b0380821115613bfe57600080fd5b613c0a89838a01613891565b90965094506040880135915080821115613c2357600080fd5b50613b7b88828901613a3b565b60008060408385031215613c4357600080fd5b50508035926020909101359150565b60008060208385031215613c6557600080fd5b82356001600160401b03811115613c7b57600080fd5b613c8785828601613a3b565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613ce857603f19888603018452613cd68583516136a3565b94509285019290850190600101613cba565b5092979650505050505050565b60008060008060808587031215613d0b57600080fd5b8435613d16816136fb565b93506020850135613d26816136fb565b92506040850135915060608501356001600160401b03811115613d4857600080fd5b613d5487828801613960565b91505092959194509250565b60008060408385031215613d7357600080fd5b8235613d7e816136fb565b915060208301356137f8816136fb565b600060608284031215613da057600080fd5b604051606081018181106001600160401b0382111715613dc257613dc261394a565b806040525082358152602083013560208201526040830135613de381613b8c565b60408201529392505050565b600181811c90821680613e0357607f821691505b60208210811415613e2457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052602160045260246000fd5b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b602080825260089082015267636861696e49647360c01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015613fbe57613fbe613f96565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415613fed57613fed613f96565b5060010190565b6000808335601e1984360301811261400b57600080fd5b8301803591506001600160401b0382111561402557600080fd5b6020019150368190038213156138d257600080fd5b8681526bffffffffffffffffffffffff198660601b166020820152838560348301376000848201603481018281526001600160fb1b0385111561407c57600080fd5b8460051b80878337600092016034019182525098975050505050505050565b600082198211156140ae576140ae613f96565b500190565b600083516140c5818460208801613677565b8351908301906140d9818360208801613677565b01949350505050565b6000602082840312156140f457600080fd5b815161154a81613b8c565b60006020828403121561411157600080fd5b815161154a816136fb565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b60006020828403121561415d57600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b60008261422657614226614201565b500490565b60008261423a5761423a614201565b500690565b604081016003841061426157634e487b7160e01b600052602160045260246000fd5b92815290151560209091015290565b600080835481600182811c91508083168061428c57607f831692505b60208084108214156142ac57634e487b7160e01b86526022600452602486fd5b8180156142c057600181146142d1576142fe565b60ff198616895284890196506142fe565b60008a81526020902060005b868110156142f65781548b8201529085019083016142dd565b505084890196505b509498975050505050505050565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60008251614364818460208701613677565b9190910192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090613025908301846136a3565b6000602082840312156143b357600080fd5b815161154a81613644565b6040815260006143d160408301866136a3565b82810360208401528381526001600160fb1b038411156143f057600080fd5b8360051b808660208401376000910160200190815295945050505050565b634e487b7160e01b600052603160045260246000fdfe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220558c1cd9715a9cf33434b182f38b0b8f9f507622f6a63d9e3cb4ba2426d5c8a364736f6c63430008090033",
}

// AgentRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use AgentRegistryMetaData.ABI instead.
var AgentRegistryABI = AgentRegistryMetaData.ABI

// AgentRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AgentRegistryMetaData.Bin instead.
var AgentRegistryBin = AgentRegistryMetaData.Bin

// DeployAgentRegistry deploys a new Ethereum contract, binding an instance of AgentRegistry to it.
func DeployAgentRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, forwarder common.Address) (common.Address, *types.Transaction, *AgentRegistry, error) {
	parsed, err := AgentRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AgentRegistryBin), backend, forwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AgentRegistry{AgentRegistryCaller: AgentRegistryCaller{contract: contract}, AgentRegistryTransactor: AgentRegistryTransactor{contract: contract}, AgentRegistryFilterer: AgentRegistryFilterer{contract: contract}}, nil
}

// AgentRegistry is an auto generated Go binding around an Ethereum contract.
type AgentRegistry struct {
	AgentRegistryCaller     // Read-only binding to the contract
	AgentRegistryTransactor // Write-only binding to the contract
	AgentRegistryFilterer   // Log filterer for contract events
}

// AgentRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AgentRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AgentRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AgentRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AgentRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AgentRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AgentRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AgentRegistrySession struct {
	Contract     *AgentRegistry    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AgentRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AgentRegistryCallerSession struct {
	Contract *AgentRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AgentRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AgentRegistryTransactorSession struct {
	Contract     *AgentRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AgentRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AgentRegistryRaw struct {
	Contract *AgentRegistry // Generic contract binding to access the raw methods on
}

// AgentRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AgentRegistryCallerRaw struct {
	Contract *AgentRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// AgentRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AgentRegistryTransactorRaw struct {
	Contract *AgentRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAgentRegistry creates a new instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistry(address common.Address, backend bind.ContractBackend) (*AgentRegistry, error) {
	contract, err := bindAgentRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AgentRegistry{AgentRegistryCaller: AgentRegistryCaller{contract: contract}, AgentRegistryTransactor: AgentRegistryTransactor{contract: contract}, AgentRegistryFilterer: AgentRegistryFilterer{contract: contract}}, nil
}

// NewAgentRegistryCaller creates a new read-only instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistryCaller(address common.Address, caller bind.ContractCaller) (*AgentRegistryCaller, error) {
	contract, err := bindAgentRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryCaller{contract: contract}, nil
}

// NewAgentRegistryTransactor creates a new write-only instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*AgentRegistryTransactor, error) {
	contract, err := bindAgentRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryTransactor{contract: contract}, nil
}

// NewAgentRegistryFilterer creates a new log filterer instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*AgentRegistryFilterer, error) {
	contract, err := bindAgentRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryFilterer{contract: contract}, nil
}

// bindAgentRegistry binds a generic wrapper to an already deployed contract.
func bindAgentRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AgentRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AgentRegistry *AgentRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AgentRegistry.Contract.AgentRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AgentRegistry *AgentRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AgentRegistry.Contract.AgentRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AgentRegistry *AgentRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AgentRegistry.Contract.AgentRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AgentRegistry *AgentRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AgentRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AgentRegistry *AgentRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AgentRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AgentRegistry *AgentRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AgentRegistry.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _AgentRegistry.Contract.BalanceOf(&_AgentRegistry.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _AgentRegistry.Contract.BalanceOf(&_AgentRegistry.CallOpts, owner)
}

// FrontRunningDelay is a free data retrieval call binding the contract method 0xc02674c5.
//
// Solidity: function frontRunningDelay() view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) FrontRunningDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "frontRunningDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FrontRunningDelay is a free data retrieval call binding the contract method 0xc02674c5.
//
// Solidity: function frontRunningDelay() view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) FrontRunningDelay() (*big.Int, error) {
	return _AgentRegistry.Contract.FrontRunningDelay(&_AgentRegistry.CallOpts)
}

// FrontRunningDelay is a free data retrieval call binding the contract method 0xc02674c5.
//
// Solidity: function frontRunningDelay() view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) FrontRunningDelay() (*big.Int, error) {
	return _AgentRegistry.Contract.FrontRunningDelay(&_AgentRegistry.CallOpts)
}

// GetAgent is a free data retrieval call binding the contract method 0x2de5aaf7.
//
// Solidity: function getAgent(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryCaller) GetAgent(opts *bind.CallOpts, agentId *big.Int) (struct {
	Registered   bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
}, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgent", agentId)

	outstruct := new(struct {
		Registered   bool
		Owner        common.Address
		AgentVersion *big.Int
		Metadata     string
		ChainIds     []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.AgentVersion = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.ChainIds = *abi.ConvertType(out[4], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetAgent is a free data retrieval call binding the contract method 0x2de5aaf7.
//
// Solidity: function getAgent(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistrySession) GetAgent(agentId *big.Int) (struct {
	Registered   bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
}, error) {
	return _AgentRegistry.Contract.GetAgent(&_AgentRegistry.CallOpts, agentId)
}

// GetAgent is a free data retrieval call binding the contract method 0x2de5aaf7.
//
// Solidity: function getAgent(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgent(agentId *big.Int) (struct {
	Registered   bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
}, error) {
	return _AgentRegistry.Contract.GetAgent(&_AgentRegistry.CallOpts, agentId)
}

// GetAgentByChainAndIndex is a free data retrieval call binding the contract method 0xac388ff5.
//
// Solidity: function getAgentByChainAndIndex(uint256 chainId, uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentByChainAndIndex(opts *bind.CallOpts, chainId *big.Int, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentByChainAndIndex", chainId, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentByChainAndIndex is a free data retrieval call binding the contract method 0xac388ff5.
//
// Solidity: function getAgentByChainAndIndex(uint256 chainId, uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentByChainAndIndex(chainId *big.Int, index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByChainAndIndex(&_AgentRegistry.CallOpts, chainId, index)
}

// GetAgentByChainAndIndex is a free data retrieval call binding the contract method 0xac388ff5.
//
// Solidity: function getAgentByChainAndIndex(uint256 chainId, uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentByChainAndIndex(chainId *big.Int, index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByChainAndIndex(&_AgentRegistry.CallOpts, chainId, index)
}

// GetAgentByIndex is a free data retrieval call binding the contract method 0x89432d40.
//
// Solidity: function getAgentByIndex(uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentByIndex is a free data retrieval call binding the contract method 0x89432d40.
//
// Solidity: function getAgentByIndex(uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentByIndex(index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByIndex(&_AgentRegistry.CallOpts, index)
}

// GetAgentByIndex is a free data retrieval call binding the contract method 0x89432d40.
//
// Solidity: function getAgentByIndex(uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentByIndex(index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByIndex(&_AgentRegistry.CallOpts, index)
}

// GetAgentCount is a free data retrieval call binding the contract method 0x91cab63e.
//
// Solidity: function getAgentCount() view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentCount is a free data retrieval call binding the contract method 0x91cab63e.
//
// Solidity: function getAgentCount() view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentCount() (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCount(&_AgentRegistry.CallOpts)
}

// GetAgentCount is a free data retrieval call binding the contract method 0x91cab63e.
//
// Solidity: function getAgentCount() view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentCount() (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCount(&_AgentRegistry.CallOpts)
}

// GetAgentCountByChain is a free data retrieval call binding the contract method 0x8eea276f.
//
// Solidity: function getAgentCountByChain(uint256 chainId) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentCountByChain(opts *bind.CallOpts, chainId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentCountByChain", chainId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentCountByChain is a free data retrieval call binding the contract method 0x8eea276f.
//
// Solidity: function getAgentCountByChain(uint256 chainId) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentCountByChain(chainId *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCountByChain(&_AgentRegistry.CallOpts, chainId)
}

// GetAgentCountByChain is a free data retrieval call binding the contract method 0x8eea276f.
//
// Solidity: function getAgentCountByChain(uint256 chainId) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentCountByChain(chainId *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCountByChain(&_AgentRegistry.CallOpts, chainId)
}

// GetAgentState is a free data retrieval call binding the contract method 0x1e4def83.
//
// Solidity: function getAgentState(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled, uint256 disabledFlags)
func (_AgentRegistry *AgentRegistryCaller) GetAgentState(opts *bind.CallOpts, agentId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	AgentVersion  *big.Int
	Metadata      string
	ChainIds      []*big.Int
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentState", agentId)

	outstruct := new(struct {
		Registered    bool
		Owner         common.Address
		AgentVersion  *big.Int
		Metadata      string
		ChainIds      []*big.Int
		Enabled       bool
		DisabledFlags *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.AgentVersion = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.ChainIds = *abi.ConvertType(out[4], new([]*big.Int)).(*[]*big.Int)
	outstruct.Enabled = *abi.ConvertType(out[5], new(bool)).(*bool)
	outstruct.DisabledFlags = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetAgentState is a free data retrieval call binding the contract method 0x1e4def83.
//
// Solidity: function getAgentState(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled, uint256 disabledFlags)
func (_AgentRegistry *AgentRegistrySession) GetAgentState(agentId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	AgentVersion  *big.Int
	Metadata      string
	ChainIds      []*big.Int
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	return _AgentRegistry.Contract.GetAgentState(&_AgentRegistry.CallOpts, agentId)
}

// GetAgentState is a free data retrieval call binding the contract method 0x1e4def83.
//
// Solidity: function getAgentState(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled, uint256 disabledFlags)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentState(agentId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	AgentVersion  *big.Int
	Metadata      string
	ChainIds      []*big.Int
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	return _AgentRegistry.Contract.GetAgentState(&_AgentRegistry.CallOpts, agentId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistryCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistrySession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.GetApproved(&_AgentRegistry.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistryCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.GetApproved(&_AgentRegistry.CallOpts, tokenId)
}

// GetCommitTimestamp is a free data retrieval call binding the contract method 0x143527df.
//
// Solidity: function getCommitTimestamp(bytes32 commit) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetCommitTimestamp(opts *bind.CallOpts, commit [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getCommitTimestamp", commit)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommitTimestamp is a free data retrieval call binding the contract method 0x143527df.
//
// Solidity: function getCommitTimestamp(bytes32 commit) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetCommitTimestamp(commit [32]byte) (*big.Int, error) {
	return _AgentRegistry.Contract.GetCommitTimestamp(&_AgentRegistry.CallOpts, commit)
}

// GetCommitTimestamp is a free data retrieval call binding the contract method 0x143527df.
//
// Solidity: function getCommitTimestamp(bytes32 commit) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetCommitTimestamp(commit [32]byte) (*big.Int, error) {
	return _AgentRegistry.Contract.GetCommitTimestamp(&_AgentRegistry.CallOpts, commit)
}

// GetDisableFlags is a free data retrieval call binding the contract method 0x871016e1.
//
// Solidity: function getDisableFlags(uint256 agentId) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetDisableFlags(opts *bind.CallOpts, agentId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getDisableFlags", agentId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDisableFlags is a free data retrieval call binding the contract method 0x871016e1.
//
// Solidity: function getDisableFlags(uint256 agentId) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetDisableFlags(agentId *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetDisableFlags(&_AgentRegistry.CallOpts, agentId)
}

// GetDisableFlags is a free data retrieval call binding the contract method 0x871016e1.
//
// Solidity: function getDisableFlags(uint256 agentId) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetDisableFlags(agentId *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetDisableFlags(&_AgentRegistry.CallOpts, agentId)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 ) view returns((uint256,uint256,bool))
func (_AgentRegistry *AgentRegistryCaller) GetStakeThreshold(opts *bind.CallOpts, arg0 *big.Int) (IStakeSubjectStakeThreshold, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getStakeThreshold", arg0)

	if err != nil {
		return *new(IStakeSubjectStakeThreshold), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeSubjectStakeThreshold)).(*IStakeSubjectStakeThreshold)

	return out0, err

}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 ) view returns((uint256,uint256,bool))
func (_AgentRegistry *AgentRegistrySession) GetStakeThreshold(arg0 *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _AgentRegistry.Contract.GetStakeThreshold(&_AgentRegistry.CallOpts, arg0)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 ) view returns((uint256,uint256,bool))
func (_AgentRegistry *AgentRegistryCallerSession) GetStakeThreshold(arg0 *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _AgentRegistry.Contract.GetStakeThreshold(&_AgentRegistry.CallOpts, arg0)
}

// GetSubjectHandler is a free data retrieval call binding the contract method 0x9f79b63a.
//
// Solidity: function getSubjectHandler() view returns(address)
func (_AgentRegistry *AgentRegistryCaller) GetSubjectHandler(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getSubjectHandler")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSubjectHandler is a free data retrieval call binding the contract method 0x9f79b63a.
//
// Solidity: function getSubjectHandler() view returns(address)
func (_AgentRegistry *AgentRegistrySession) GetSubjectHandler() (common.Address, error) {
	return _AgentRegistry.Contract.GetSubjectHandler(&_AgentRegistry.CallOpts)
}

// GetSubjectHandler is a free data retrieval call binding the contract method 0x9f79b63a.
//
// Solidity: function getSubjectHandler() view returns(address)
func (_AgentRegistry *AgentRegistryCallerSession) GetSubjectHandler() (common.Address, error) {
	return _AgentRegistry.Contract.GetSubjectHandler(&_AgentRegistry.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _AgentRegistry.Contract.IsApprovedForAll(&_AgentRegistry.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _AgentRegistry.Contract.IsApprovedForAll(&_AgentRegistry.CallOpts, owner, operator)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsEnabled(opts *bind.CallOpts, agentId *big.Int) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isEnabled", agentId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsEnabled(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsEnabled(&_AgentRegistry.CallOpts, agentId)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsEnabled(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsEnabled(&_AgentRegistry.CallOpts, agentId)
}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsRegistered(opts *bind.CallOpts, agentId *big.Int) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isRegistered", agentId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsRegistered(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsRegistered(&_AgentRegistry.CallOpts, agentId)
}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsRegistered(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsRegistered(&_AgentRegistry.CallOpts, agentId)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsStakedOverMin(opts *bind.CallOpts, subject *big.Int) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isStakedOverMin", subject)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsStakedOverMin(&_AgentRegistry.CallOpts, subject)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsStakedOverMin(&_AgentRegistry.CallOpts, subject)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AgentRegistry *AgentRegistryCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AgentRegistry *AgentRegistrySession) Name() (string, error) {
	return _AgentRegistry.Contract.Name(&_AgentRegistry.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) Name() (string, error) {
	return _AgentRegistry.Contract.Name(&_AgentRegistry.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 subject) view returns(address)
func (_AgentRegistry *AgentRegistryCaller) OwnerOf(opts *bind.CallOpts, subject *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "ownerOf", subject)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 subject) view returns(address)
func (_AgentRegistry *AgentRegistrySession) OwnerOf(subject *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.OwnerOf(&_AgentRegistry.CallOpts, subject)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 subject) view returns(address)
func (_AgentRegistry *AgentRegistryCallerSession) OwnerOf(subject *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.OwnerOf(&_AgentRegistry.CallOpts, subject)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AgentRegistry *AgentRegistryCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AgentRegistry *AgentRegistrySession) ProxiableUUID() ([32]byte, error) {
	return _AgentRegistry.Contract.ProxiableUUID(&_AgentRegistry.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AgentRegistry *AgentRegistryCallerSession) ProxiableUUID() ([32]byte, error) {
	return _AgentRegistry.Contract.ProxiableUUID(&_AgentRegistry.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AgentRegistry.Contract.SupportsInterface(&_AgentRegistry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AgentRegistry.Contract.SupportsInterface(&_AgentRegistry.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AgentRegistry *AgentRegistryCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AgentRegistry *AgentRegistrySession) Symbol() (string, error) {
	return _AgentRegistry.Contract.Symbol(&_AgentRegistry.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) Symbol() (string, error) {
	return _AgentRegistry.Contract.Symbol(&_AgentRegistry.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AgentRegistry *AgentRegistryCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AgentRegistry *AgentRegistrySession) TokenURI(tokenId *big.Int) (string, error) {
	return _AgentRegistry.Contract.TokenURI(&_AgentRegistry.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _AgentRegistry.Contract.TokenURI(&_AgentRegistry.CallOpts, tokenId)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AgentRegistry *AgentRegistryCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AgentRegistry *AgentRegistrySession) Version() (string, error) {
	return _AgentRegistry.Contract.Version(&_AgentRegistry.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) Version() (string, error) {
	return _AgentRegistry.Contract.Version(&_AgentRegistry.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistrySession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Approve(&_AgentRegistry.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Approve(&_AgentRegistry.TransactOpts, to, tokenId)
}

// CreateAgent is a paid mutator transaction binding the contract method 0x7935d5b4.
//
// Solidity: function createAgent(uint256 agentId, address , string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactor) CreateAgent(opts *bind.TransactOpts, agentId *big.Int, arg1 common.Address, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "createAgent", agentId, arg1, metadata, chainIds)
}

// CreateAgent is a paid mutator transaction binding the contract method 0x7935d5b4.
//
// Solidity: function createAgent(uint256 agentId, address , string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistrySession) CreateAgent(agentId *big.Int, arg1 common.Address, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.CreateAgent(&_AgentRegistry.TransactOpts, agentId, arg1, metadata, chainIds)
}

// CreateAgent is a paid mutator transaction binding the contract method 0x7935d5b4.
//
// Solidity: function createAgent(uint256 agentId, address , string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) CreateAgent(agentId *big.Int, arg1 common.Address, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.CreateAgent(&_AgentRegistry.TransactOpts, agentId, arg1, metadata, chainIds)
}

// DisableAgent is a paid mutator transaction binding the contract method 0x21095d65.
//
// Solidity: function disableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactor) DisableAgent(opts *bind.TransactOpts, agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "disableAgent", agentId, permission)
}

// DisableAgent is a paid mutator transaction binding the contract method 0x21095d65.
//
// Solidity: function disableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistrySession) DisableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.DisableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// DisableAgent is a paid mutator transaction binding the contract method 0x21095d65.
//
// Solidity: function disableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) DisableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.DisableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_AgentRegistry *AgentRegistryTransactor) DisableRouter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "disableRouter")
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_AgentRegistry *AgentRegistrySession) DisableRouter() (*types.Transaction, error) {
	return _AgentRegistry.Contract.DisableRouter(&_AgentRegistry.TransactOpts)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_AgentRegistry *AgentRegistryTransactorSession) DisableRouter() (*types.Transaction, error) {
	return _AgentRegistry.Contract.DisableRouter(&_AgentRegistry.TransactOpts)
}

// EnableAgent is a paid mutator transaction binding the contract method 0xd0c6464b.
//
// Solidity: function enableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactor) EnableAgent(opts *bind.TransactOpts, agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "enableAgent", agentId, permission)
}

// EnableAgent is a paid mutator transaction binding the contract method 0xd0c6464b.
//
// Solidity: function enableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistrySession) EnableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.EnableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// EnableAgent is a paid mutator transaction binding the contract method 0xd0c6464b.
//
// Solidity: function enableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) EnableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.EnableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// Initialize is a paid mutator transaction binding the contract method 0x90657147.
//
// Solidity: function initialize(address __manager, string __name, string __symbol) returns()
func (_AgentRegistry *AgentRegistryTransactor) Initialize(opts *bind.TransactOpts, __manager common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "initialize", __manager, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x90657147.
//
// Solidity: function initialize(address __manager, string __name, string __symbol) returns()
func (_AgentRegistry *AgentRegistrySession) Initialize(__manager common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Initialize(&_AgentRegistry.TransactOpts, __manager, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x90657147.
//
// Solidity: function initialize(address __manager, string __name, string __symbol) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) Initialize(__manager common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Initialize(&_AgentRegistry.TransactOpts, __manager, __name, __symbol)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_AgentRegistry *AgentRegistryTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_AgentRegistry *AgentRegistrySession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Multicall(&_AgentRegistry.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_AgentRegistry *AgentRegistryTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Multicall(&_AgentRegistry.TransactOpts, data)
}

// PrepareAgent is a paid mutator transaction binding the contract method 0xa8439d98.
//
// Solidity: function prepareAgent(bytes32 commit) returns()
func (_AgentRegistry *AgentRegistryTransactor) PrepareAgent(opts *bind.TransactOpts, commit [32]byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "prepareAgent", commit)
}

// PrepareAgent is a paid mutator transaction binding the contract method 0xa8439d98.
//
// Solidity: function prepareAgent(bytes32 commit) returns()
func (_AgentRegistry *AgentRegistrySession) PrepareAgent(commit [32]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.PrepareAgent(&_AgentRegistry.TransactOpts, commit)
}

// PrepareAgent is a paid mutator transaction binding the contract method 0xa8439d98.
//
// Solidity: function prepareAgent(bytes32 commit) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) PrepareAgent(commit [32]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.PrepareAgent(&_AgentRegistry.TransactOpts, commit)
}

// RegisterAgent is a paid mutator transaction binding the contract method 0xc01bf17d.
//
// Solidity: function registerAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactor) RegisterAgent(opts *bind.TransactOpts, agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "registerAgent", agentId, metadata, chainIds)
}

// RegisterAgent is a paid mutator transaction binding the contract method 0xc01bf17d.
//
// Solidity: function registerAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistrySession) RegisterAgent(agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.RegisterAgent(&_AgentRegistry.TransactOpts, agentId, metadata, chainIds)
}

// RegisterAgent is a paid mutator transaction binding the contract method 0xc01bf17d.
//
// Solidity: function registerAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) RegisterAgent(agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.RegisterAgent(&_AgentRegistry.TransactOpts, agentId, metadata, chainIds)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistrySession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AgentRegistry *AgentRegistryTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AgentRegistry *AgentRegistrySession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom0(&_AgentRegistry.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom0(&_AgentRegistry.TransactOpts, from, to, tokenId, data)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetAccessManager(opts *bind.TransactOpts, newManager common.Address) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setAccessManager", newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_AgentRegistry *AgentRegistrySession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetAccessManager(&_AgentRegistry.TransactOpts, newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetAccessManager(&_AgentRegistry.TransactOpts, newManager)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AgentRegistry *AgentRegistrySession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetApprovalForAll(&_AgentRegistry.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetApprovalForAll(&_AgentRegistry.TransactOpts, operator, approved)
}

// SetFrontRunningDelay is a paid mutator transaction binding the contract method 0x55d372fb.
//
// Solidity: function setFrontRunningDelay(uint256 delay) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetFrontRunningDelay(opts *bind.TransactOpts, delay *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setFrontRunningDelay", delay)
}

// SetFrontRunningDelay is a paid mutator transaction binding the contract method 0x55d372fb.
//
// Solidity: function setFrontRunningDelay(uint256 delay) returns()
func (_AgentRegistry *AgentRegistrySession) SetFrontRunningDelay(delay *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetFrontRunningDelay(&_AgentRegistry.TransactOpts, delay)
}

// SetFrontRunningDelay is a paid mutator transaction binding the contract method 0x55d372fb.
//
// Solidity: function setFrontRunningDelay(uint256 delay) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetFrontRunningDelay(delay *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetFrontRunningDelay(&_AgentRegistry.TransactOpts, delay)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetName(opts *bind.TransactOpts, ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setName", ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_AgentRegistry *AgentRegistrySession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetName(&_AgentRegistry.TransactOpts, ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetName(&_AgentRegistry.TransactOpts, ensRegistry, ensName)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xe9965e44.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetStakeThreshold(opts *bind.TransactOpts, newStakeThreshold IStakeSubjectStakeThreshold) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setStakeThreshold", newStakeThreshold)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xe9965e44.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold) returns()
func (_AgentRegistry *AgentRegistrySession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetStakeThreshold(&_AgentRegistry.TransactOpts, newStakeThreshold)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xe9965e44.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetStakeThreshold(&_AgentRegistry.TransactOpts, newStakeThreshold)
}

// SetSubjectHandler is a paid mutator transaction binding the contract method 0x44014b6b.
//
// Solidity: function setSubjectHandler(address subjectGateway) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetSubjectHandler(opts *bind.TransactOpts, subjectGateway common.Address) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setSubjectHandler", subjectGateway)
}

// SetSubjectHandler is a paid mutator transaction binding the contract method 0x44014b6b.
//
// Solidity: function setSubjectHandler(address subjectGateway) returns()
func (_AgentRegistry *AgentRegistrySession) SetSubjectHandler(subjectGateway common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetSubjectHandler(&_AgentRegistry.TransactOpts, subjectGateway)
}

// SetSubjectHandler is a paid mutator transaction binding the contract method 0x44014b6b.
//
// Solidity: function setSubjectHandler(address subjectGateway) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetSubjectHandler(subjectGateway common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetSubjectHandler(&_AgentRegistry.TransactOpts, subjectGateway)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistrySession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.TransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.TransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0xaa9ac6c6.
//
// Solidity: function updateAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactor) UpdateAgent(opts *bind.TransactOpts, agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "updateAgent", agentId, metadata, chainIds)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0xaa9ac6c6.
//
// Solidity: function updateAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistrySession) UpdateAgent(agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpdateAgent(&_AgentRegistry.TransactOpts, agentId, metadata, chainIds)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0xaa9ac6c6.
//
// Solidity: function updateAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) UpdateAgent(agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpdateAgent(&_AgentRegistry.TransactOpts, agentId, metadata, chainIds)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AgentRegistry *AgentRegistryTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AgentRegistry *AgentRegistrySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeTo(&_AgentRegistry.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeTo(&_AgentRegistry.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AgentRegistry *AgentRegistryTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AgentRegistry *AgentRegistrySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeToAndCall(&_AgentRegistry.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AgentRegistry *AgentRegistryTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeToAndCall(&_AgentRegistry.TransactOpts, newImplementation, data)
}

// AgentRegistryAccessManagerUpdatedIterator is returned from FilterAccessManagerUpdated and is used to iterate over the raw logs and unpacked data for AccessManagerUpdated events raised by the AgentRegistry contract.
type AgentRegistryAccessManagerUpdatedIterator struct {
	Event *AgentRegistryAccessManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAccessManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAccessManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAccessManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAccessManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAccessManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAccessManagerUpdated represents a AccessManagerUpdated event raised by the AgentRegistry contract.
type AgentRegistryAccessManagerUpdated struct {
	NewAddressManager common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAccessManagerUpdated is a free log retrieval operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_AgentRegistry *AgentRegistryFilterer) FilterAccessManagerUpdated(opts *bind.FilterOpts, newAddressManager []common.Address) (*AgentRegistryAccessManagerUpdatedIterator, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAccessManagerUpdatedIterator{contract: _AgentRegistry.contract, event: "AccessManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchAccessManagerUpdated is a free log subscription operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_AgentRegistry *AgentRegistryFilterer) WatchAccessManagerUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistryAccessManagerUpdated, newAddressManager []common.Address) (event.Subscription, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAccessManagerUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessManagerUpdated is a log parse operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_AgentRegistry *AgentRegistryFilterer) ParseAccessManagerUpdated(log types.Log) (*AgentRegistryAccessManagerUpdated, error) {
	event := new(AgentRegistryAccessManagerUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the AgentRegistry contract.
type AgentRegistryAdminChangedIterator struct {
	Event *AgentRegistryAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAdminChanged represents a AdminChanged event raised by the AgentRegistry contract.
type AgentRegistryAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AgentRegistry *AgentRegistryFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*AgentRegistryAdminChangedIterator, error) {

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAdminChangedIterator{contract: _AgentRegistry.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AgentRegistry *AgentRegistryFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *AgentRegistryAdminChanged) (event.Subscription, error) {

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAdminChanged)
				if err := _AgentRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AgentRegistry *AgentRegistryFilterer) ParseAdminChanged(log types.Log) (*AgentRegistryAdminChanged, error) {
	event := new(AgentRegistryAdminChanged)
	if err := _AgentRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAgentCommittedIterator is returned from FilterAgentCommitted and is used to iterate over the raw logs and unpacked data for AgentCommitted events raised by the AgentRegistry contract.
type AgentRegistryAgentCommittedIterator struct {
	Event *AgentRegistryAgentCommitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAgentCommittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAgentCommitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAgentCommitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAgentCommittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAgentCommittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAgentCommitted represents a AgentCommitted event raised by the AgentRegistry contract.
type AgentRegistryAgentCommitted struct {
	Commit [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAgentCommitted is a free log retrieval operation binding the contract event 0x43343771105cc71439fde05af6660ad660519c971ddc249e5d5cd9c29da46d38.
//
// Solidity: event AgentCommitted(bytes32 indexed commit)
func (_AgentRegistry *AgentRegistryFilterer) FilterAgentCommitted(opts *bind.FilterOpts, commit [][32]byte) (*AgentRegistryAgentCommittedIterator, error) {

	var commitRule []interface{}
	for _, commitItem := range commit {
		commitRule = append(commitRule, commitItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AgentCommitted", commitRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAgentCommittedIterator{contract: _AgentRegistry.contract, event: "AgentCommitted", logs: logs, sub: sub}, nil
}

// WatchAgentCommitted is a free log subscription operation binding the contract event 0x43343771105cc71439fde05af6660ad660519c971ddc249e5d5cd9c29da46d38.
//
// Solidity: event AgentCommitted(bytes32 indexed commit)
func (_AgentRegistry *AgentRegistryFilterer) WatchAgentCommitted(opts *bind.WatchOpts, sink chan<- *AgentRegistryAgentCommitted, commit [][32]byte) (event.Subscription, error) {

	var commitRule []interface{}
	for _, commitItem := range commit {
		commitRule = append(commitRule, commitItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AgentCommitted", commitRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAgentCommitted)
				if err := _AgentRegistry.contract.UnpackLog(event, "AgentCommitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentCommitted is a log parse operation binding the contract event 0x43343771105cc71439fde05af6660ad660519c971ddc249e5d5cd9c29da46d38.
//
// Solidity: event AgentCommitted(bytes32 indexed commit)
func (_AgentRegistry *AgentRegistryFilterer) ParseAgentCommitted(log types.Log) (*AgentRegistryAgentCommitted, error) {
	event := new(AgentRegistryAgentCommitted)
	if err := _AgentRegistry.contract.UnpackLog(event, "AgentCommitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAgentEnabledIterator is returned from FilterAgentEnabled and is used to iterate over the raw logs and unpacked data for AgentEnabled events raised by the AgentRegistry contract.
type AgentRegistryAgentEnabledIterator struct {
	Event *AgentRegistryAgentEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAgentEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAgentEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAgentEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAgentEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAgentEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAgentEnabled represents a AgentEnabled event raised by the AgentRegistry contract.
type AgentRegistryAgentEnabled struct {
	AgentId    *big.Int
	Enabled    bool
	Permission uint8
	Value      bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAgentEnabled is a free log retrieval operation binding the contract event 0xb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d641.
//
// Solidity: event AgentEnabled(uint256 indexed agentId, bool indexed enabled, uint8 permission, bool value)
func (_AgentRegistry *AgentRegistryFilterer) FilterAgentEnabled(opts *bind.FilterOpts, agentId []*big.Int, enabled []bool) (*AgentRegistryAgentEnabledIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AgentEnabled", agentIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAgentEnabledIterator{contract: _AgentRegistry.contract, event: "AgentEnabled", logs: logs, sub: sub}, nil
}

// WatchAgentEnabled is a free log subscription operation binding the contract event 0xb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d641.
//
// Solidity: event AgentEnabled(uint256 indexed agentId, bool indexed enabled, uint8 permission, bool value)
func (_AgentRegistry *AgentRegistryFilterer) WatchAgentEnabled(opts *bind.WatchOpts, sink chan<- *AgentRegistryAgentEnabled, agentId []*big.Int, enabled []bool) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AgentEnabled", agentIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAgentEnabled)
				if err := _AgentRegistry.contract.UnpackLog(event, "AgentEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentEnabled is a log parse operation binding the contract event 0xb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d641.
//
// Solidity: event AgentEnabled(uint256 indexed agentId, bool indexed enabled, uint8 permission, bool value)
func (_AgentRegistry *AgentRegistryFilterer) ParseAgentEnabled(log types.Log) (*AgentRegistryAgentEnabled, error) {
	event := new(AgentRegistryAgentEnabled)
	if err := _AgentRegistry.contract.UnpackLog(event, "AgentEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAgentUpdatedIterator is returned from FilterAgentUpdated and is used to iterate over the raw logs and unpacked data for AgentUpdated events raised by the AgentRegistry contract.
type AgentRegistryAgentUpdatedIterator struct {
	Event *AgentRegistryAgentUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAgentUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAgentUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAgentUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAgentUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAgentUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAgentUpdated represents a AgentUpdated event raised by the AgentRegistry contract.
type AgentRegistryAgentUpdated struct {
	AgentId  *big.Int
	By       common.Address
	Metadata string
	ChainIds []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAgentUpdated is a free log retrieval operation binding the contract event 0x334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff6.
//
// Solidity: event AgentUpdated(uint256 indexed agentId, address indexed by, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryFilterer) FilterAgentUpdated(opts *bind.FilterOpts, agentId []*big.Int, by []common.Address) (*AgentRegistryAgentUpdatedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var byRule []interface{}
	for _, byItem := range by {
		byRule = append(byRule, byItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AgentUpdated", agentIdRule, byRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAgentUpdatedIterator{contract: _AgentRegistry.contract, event: "AgentUpdated", logs: logs, sub: sub}, nil
}

// WatchAgentUpdated is a free log subscription operation binding the contract event 0x334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff6.
//
// Solidity: event AgentUpdated(uint256 indexed agentId, address indexed by, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryFilterer) WatchAgentUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistryAgentUpdated, agentId []*big.Int, by []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var byRule []interface{}
	for _, byItem := range by {
		byRule = append(byRule, byItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AgentUpdated", agentIdRule, byRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAgentUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "AgentUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentUpdated is a log parse operation binding the contract event 0x334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff6.
//
// Solidity: event AgentUpdated(uint256 indexed agentId, address indexed by, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryFilterer) ParseAgentUpdated(log types.Log) (*AgentRegistryAgentUpdated, error) {
	event := new(AgentRegistryAgentUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "AgentUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the AgentRegistry contract.
type AgentRegistryApprovalIterator struct {
	Event *AgentRegistryApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryApproval represents a Approval event raised by the AgentRegistry contract.
type AgentRegistryApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*AgentRegistryApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryApprovalIterator{contract: _AgentRegistry.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *AgentRegistryApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryApproval)
				if err := _AgentRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) ParseApproval(log types.Log) (*AgentRegistryApproval, error) {
	event := new(AgentRegistryApproval)
	if err := _AgentRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the AgentRegistry contract.
type AgentRegistryApprovalForAllIterator struct {
	Event *AgentRegistryApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryApprovalForAll represents a ApprovalForAll event raised by the AgentRegistry contract.
type AgentRegistryApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AgentRegistry *AgentRegistryFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*AgentRegistryApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryApprovalForAllIterator{contract: _AgentRegistry.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AgentRegistry *AgentRegistryFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *AgentRegistryApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryApprovalForAll)
				if err := _AgentRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AgentRegistry *AgentRegistryFilterer) ParseApprovalForAll(log types.Log) (*AgentRegistryApprovalForAll, error) {
	event := new(AgentRegistryApprovalForAll)
	if err := _AgentRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the AgentRegistry contract.
type AgentRegistryBeaconUpgradedIterator struct {
	Event *AgentRegistryBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryBeaconUpgraded represents a BeaconUpgraded event raised by the AgentRegistry contract.
type AgentRegistryBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AgentRegistry *AgentRegistryFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*AgentRegistryBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryBeaconUpgradedIterator{contract: _AgentRegistry.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AgentRegistry *AgentRegistryFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *AgentRegistryBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryBeaconUpgraded)
				if err := _AgentRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AgentRegistry *AgentRegistryFilterer) ParseBeaconUpgraded(log types.Log) (*AgentRegistryBeaconUpgraded, error) {
	event := new(AgentRegistryBeaconUpgraded)
	if err := _AgentRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryFrontRunningDelaySetIterator is returned from FilterFrontRunningDelaySet and is used to iterate over the raw logs and unpacked data for FrontRunningDelaySet events raised by the AgentRegistry contract.
type AgentRegistryFrontRunningDelaySetIterator struct {
	Event *AgentRegistryFrontRunningDelaySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryFrontRunningDelaySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryFrontRunningDelaySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryFrontRunningDelaySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryFrontRunningDelaySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryFrontRunningDelaySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryFrontRunningDelaySet represents a FrontRunningDelaySet event raised by the AgentRegistry contract.
type AgentRegistryFrontRunningDelaySet struct {
	Delay *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterFrontRunningDelaySet is a free log retrieval operation binding the contract event 0xf6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77.
//
// Solidity: event FrontRunningDelaySet(uint256 delay)
func (_AgentRegistry *AgentRegistryFilterer) FilterFrontRunningDelaySet(opts *bind.FilterOpts) (*AgentRegistryFrontRunningDelaySetIterator, error) {

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "FrontRunningDelaySet")
	if err != nil {
		return nil, err
	}
	return &AgentRegistryFrontRunningDelaySetIterator{contract: _AgentRegistry.contract, event: "FrontRunningDelaySet", logs: logs, sub: sub}, nil
}

// WatchFrontRunningDelaySet is a free log subscription operation binding the contract event 0xf6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77.
//
// Solidity: event FrontRunningDelaySet(uint256 delay)
func (_AgentRegistry *AgentRegistryFilterer) WatchFrontRunningDelaySet(opts *bind.WatchOpts, sink chan<- *AgentRegistryFrontRunningDelaySet) (event.Subscription, error) {

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "FrontRunningDelaySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryFrontRunningDelaySet)
				if err := _AgentRegistry.contract.UnpackLog(event, "FrontRunningDelaySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFrontRunningDelaySet is a log parse operation binding the contract event 0xf6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77.
//
// Solidity: event FrontRunningDelaySet(uint256 delay)
func (_AgentRegistry *AgentRegistryFilterer) ParseFrontRunningDelaySet(log types.Log) (*AgentRegistryFrontRunningDelaySet, error) {
	event := new(AgentRegistryFrontRunningDelaySet)
	if err := _AgentRegistry.contract.UnpackLog(event, "FrontRunningDelaySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the AgentRegistry contract.
type AgentRegistryInitializedIterator struct {
	Event *AgentRegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryInitialized represents a Initialized event raised by the AgentRegistry contract.
type AgentRegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_AgentRegistry *AgentRegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*AgentRegistryInitializedIterator, error) {

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &AgentRegistryInitializedIterator{contract: _AgentRegistry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_AgentRegistry *AgentRegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *AgentRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryInitialized)
				if err := _AgentRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_AgentRegistry *AgentRegistryFilterer) ParseInitialized(log types.Log) (*AgentRegistryInitialized, error) {
	event := new(AgentRegistryInitialized)
	if err := _AgentRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryRouterUpdatedIterator is returned from FilterRouterUpdated and is used to iterate over the raw logs and unpacked data for RouterUpdated events raised by the AgentRegistry contract.
type AgentRegistryRouterUpdatedIterator struct {
	Event *AgentRegistryRouterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryRouterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryRouterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryRouterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryRouterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryRouterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryRouterUpdated represents a RouterUpdated event raised by the AgentRegistry contract.
type AgentRegistryRouterUpdated struct {
	Router common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRouterUpdated is a free log retrieval operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_AgentRegistry *AgentRegistryFilterer) FilterRouterUpdated(opts *bind.FilterOpts, router []common.Address) (*AgentRegistryRouterUpdatedIterator, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryRouterUpdatedIterator{contract: _AgentRegistry.contract, event: "RouterUpdated", logs: logs, sub: sub}, nil
}

// WatchRouterUpdated is a free log subscription operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_AgentRegistry *AgentRegistryFilterer) WatchRouterUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistryRouterUpdated, router []common.Address) (event.Subscription, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryRouterUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRouterUpdated is a log parse operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_AgentRegistry *AgentRegistryFilterer) ParseRouterUpdated(log types.Log) (*AgentRegistryRouterUpdated, error) {
	event := new(AgentRegistryRouterUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryStakeThresholdChangedIterator is returned from FilterStakeThresholdChanged and is used to iterate over the raw logs and unpacked data for StakeThresholdChanged events raised by the AgentRegistry contract.
type AgentRegistryStakeThresholdChangedIterator struct {
	Event *AgentRegistryStakeThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryStakeThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryStakeThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryStakeThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryStakeThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryStakeThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryStakeThresholdChanged represents a StakeThresholdChanged event raised by the AgentRegistry contract.
type AgentRegistryStakeThresholdChanged struct {
	Min       *big.Int
	Max       *big.Int
	Activated bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStakeThresholdChanged is a free log retrieval operation binding the contract event 0x6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b5.
//
// Solidity: event StakeThresholdChanged(uint256 min, uint256 max, bool activated)
func (_AgentRegistry *AgentRegistryFilterer) FilterStakeThresholdChanged(opts *bind.FilterOpts) (*AgentRegistryStakeThresholdChangedIterator, error) {

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "StakeThresholdChanged")
	if err != nil {
		return nil, err
	}
	return &AgentRegistryStakeThresholdChangedIterator{contract: _AgentRegistry.contract, event: "StakeThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchStakeThresholdChanged is a free log subscription operation binding the contract event 0x6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b5.
//
// Solidity: event StakeThresholdChanged(uint256 min, uint256 max, bool activated)
func (_AgentRegistry *AgentRegistryFilterer) WatchStakeThresholdChanged(opts *bind.WatchOpts, sink chan<- *AgentRegistryStakeThresholdChanged) (event.Subscription, error) {

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "StakeThresholdChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryStakeThresholdChanged)
				if err := _AgentRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeThresholdChanged is a log parse operation binding the contract event 0x6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b5.
//
// Solidity: event StakeThresholdChanged(uint256 min, uint256 max, bool activated)
func (_AgentRegistry *AgentRegistryFilterer) ParseStakeThresholdChanged(log types.Log) (*AgentRegistryStakeThresholdChanged, error) {
	event := new(AgentRegistryStakeThresholdChanged)
	if err := _AgentRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistrySubjectHandlerUpdatedIterator is returned from FilterSubjectHandlerUpdated and is used to iterate over the raw logs and unpacked data for SubjectHandlerUpdated events raised by the AgentRegistry contract.
type AgentRegistrySubjectHandlerUpdatedIterator struct {
	Event *AgentRegistrySubjectHandlerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistrySubjectHandlerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistrySubjectHandlerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistrySubjectHandlerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistrySubjectHandlerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistrySubjectHandlerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistrySubjectHandlerUpdated represents a SubjectHandlerUpdated event raised by the AgentRegistry contract.
type AgentRegistrySubjectHandlerUpdated struct {
	NewHandler common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSubjectHandlerUpdated is a free log retrieval operation binding the contract event 0x16d72e484786227d7b6dd05e079be9ff9904a81a0a9ec36fc346b20f8c47aff0.
//
// Solidity: event SubjectHandlerUpdated(address indexed newHandler)
func (_AgentRegistry *AgentRegistryFilterer) FilterSubjectHandlerUpdated(opts *bind.FilterOpts, newHandler []common.Address) (*AgentRegistrySubjectHandlerUpdatedIterator, error) {

	var newHandlerRule []interface{}
	for _, newHandlerItem := range newHandler {
		newHandlerRule = append(newHandlerRule, newHandlerItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "SubjectHandlerUpdated", newHandlerRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistrySubjectHandlerUpdatedIterator{contract: _AgentRegistry.contract, event: "SubjectHandlerUpdated", logs: logs, sub: sub}, nil
}

// WatchSubjectHandlerUpdated is a free log subscription operation binding the contract event 0x16d72e484786227d7b6dd05e079be9ff9904a81a0a9ec36fc346b20f8c47aff0.
//
// Solidity: event SubjectHandlerUpdated(address indexed newHandler)
func (_AgentRegistry *AgentRegistryFilterer) WatchSubjectHandlerUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistrySubjectHandlerUpdated, newHandler []common.Address) (event.Subscription, error) {

	var newHandlerRule []interface{}
	for _, newHandlerItem := range newHandler {
		newHandlerRule = append(newHandlerRule, newHandlerItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "SubjectHandlerUpdated", newHandlerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistrySubjectHandlerUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "SubjectHandlerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubjectHandlerUpdated is a log parse operation binding the contract event 0x16d72e484786227d7b6dd05e079be9ff9904a81a0a9ec36fc346b20f8c47aff0.
//
// Solidity: event SubjectHandlerUpdated(address indexed newHandler)
func (_AgentRegistry *AgentRegistryFilterer) ParseSubjectHandlerUpdated(log types.Log) (*AgentRegistrySubjectHandlerUpdated, error) {
	event := new(AgentRegistrySubjectHandlerUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "SubjectHandlerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the AgentRegistry contract.
type AgentRegistryTransferIterator struct {
	Event *AgentRegistryTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryTransfer represents a Transfer event raised by the AgentRegistry contract.
type AgentRegistryTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*AgentRegistryTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryTransferIterator{contract: _AgentRegistry.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AgentRegistryTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryTransfer)
				if err := _AgentRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) ParseTransfer(log types.Log) (*AgentRegistryTransfer, error) {
	event := new(AgentRegistryTransfer)
	if err := _AgentRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the AgentRegistry contract.
type AgentRegistryUpgradedIterator struct {
	Event *AgentRegistryUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryUpgraded represents a Upgraded event raised by the AgentRegistry contract.
type AgentRegistryUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AgentRegistry *AgentRegistryFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*AgentRegistryUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryUpgradedIterator{contract: _AgentRegistry.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AgentRegistry *AgentRegistryFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *AgentRegistryUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryUpgraded)
				if err := _AgentRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AgentRegistry *AgentRegistryFilterer) ParseUpgraded(log types.Log) (*AgentRegistryUpgraded, error) {
	event := new(AgentRegistryUpgraded)
	if err := _AgentRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
