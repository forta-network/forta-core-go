// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract_scanner_registry_0_1_4

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IStakeSubjectStakeThreshold is an auto generated low-level Go binding around an user-defined struct.
type IStakeSubjectStakeThreshold struct {
	Min       *big.Int
	Max       *big.Int
	Activated bool
}

// ScannerRegistryMetaData contains all meta data concerning the ScannerRegistry contract.
var ScannerRegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sunsettingTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"scannerPoolRegistry\",\"type\":\"address\"}],\"name\":\"ConfiguredMigration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"DeregisteredScanner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ManagerEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enumScannerRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"ScannerEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"ScannerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"StakeThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newHandler\",\"type\":\"address\"}],\"name\":\"SubjectHandlerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_sunsettingTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_scannerPoolRegistry\",\"type\":\"address\"}],\"name\":\"configureMigration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"deregisterScannerNode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"enumScannerRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"disableScanner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"enumScannerRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"enableScanner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getManagerAt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getManagerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getScanner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getScannerChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"getScannerState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"disabledFlags\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"getStakeThreshold\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubjectHandler\",\"outputs\":[{\"internalType\":\"contractIStakeSubjectGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasMigrationEnded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__manager\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"isStakedOverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"optingOutOfMigration\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"scanner\",\"type\":\"address\"}],\"name\":\"scannerAddressToId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scannerPoolRegistry\",\"outputs\":[{\"internalType\":\"contractScannerPoolRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scannerId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOut\",\"type\":\"bool\"}],\"name\":\"setMigrationPrefrence\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"newStakeThreshold\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"setStakeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subjectGateway\",\"type\":\"address\"}],\"name\":\"setSubjectHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sunsettingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523060a0523480156200001557600080fd5b506040516200427b3803806200427b833981016040819052620000389162000180565b6001600160a01b038116608052600054610100900460ff1615808015620000665750600054600160ff909116105b8062000096575062000083306200017160201b62001a601760201c565b15801562000096575060005460ff166001145b620000fe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff19166001179055801562000122576000805461ff0019166101001790555b801562000169576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050620001b2565b6001600160a01b03163b151590565b6000602082840312156200019357600080fd5b81516001600160a01b0381168114620001ab57600080fd5b9392505050565b60805160a05161408a620001f160003960008181610bc301528181610c0301528181610efc01528181610f3c0152610fcb01526000505061408a6000f3fe6080604052600436106102725760003560e01c8063773ed13c1161014f578063ac9650d8116100c1578063c95808041161007a578063c9580804146107eb578063cde574fe1461080b578063d858a7e51461082c578063e11cf71e14610841578063e985e9c514610861578063ec6aa8e9146108ab57600080fd5b8063ac9650d814610727578063b7b57b2714610754578063b88d4fde14610774578063c4b2b34614610794578063c783034c146107ab578063c87b56dd146107cb57600080fd5b806395d89b411161011357806395d89b41146106635780639f79b63a14610678578063a22cb46514610697578063a51433c5146106b7578063a9032e7b146106d7578063a97fe43e146106f757600080fd5b8063773ed13c146105c45780637cf1140d146105e457806382fe1bcc146105fc5780638e79a36914610623578063906571471461064357600080fd5b80634629f427116101e8578063579a6988116101ac578063579a6988146104cf57806359238297146104ef578063624ade3c1461050f5780636352211e146105535780636eb41f771461057357806370a08231146105a457600080fd5b80634629f4271461041a5780634f1ef2861461043a5780635109c4791461044d57806352d1902d1461048957806354fd4d501461049e57600080fd5b80633121db1c1161023a5780633121db1c146103485780633659cfe61461036857806337fea0e01461038857806339c7ac21146103ba57806342842e0e146103da57806344014b6b146103fa57600080fd5b806301ffc9a71461027757806306fdde03146102ac578063081812fc146102ce578063095ea7b31461030657806323b872dd14610328575b600080fd5b34801561028357600080fd5b506102976102923660046133ce565b6108cb565b60405190151581526020015b60405180910390f35b3480156102b857600080fd5b506102c161091d565b6040516102a39190613443565b3480156102da57600080fd5b506102ee6102e9366004613456565b6109b0565b6040516001600160a01b0390911681526020016102a3565b34801561031257600080fd5b50610326610321366004613484565b6109d8565b005b34801561033457600080fd5b506103266103433660046134b0565b610b05565b34801561035457600080fd5b5061032661036336600461353a565b610b3d565b34801561037457600080fd5b5061032661038336600461358f565b610bb8565b34801561039457600080fd5b506103a86103a3366004613456565b610c98565b6040516102a3969594939291906135ac565b3480156103c657600080fd5b506103266103d5366004613456565b610d55565b3480156103e657600080fd5b506103266103f53660046134b0565b610e46565b34801561040657600080fd5b5061032661041536600461358f565b610e61565b34801561042657600080fd5b506103266104353660046135f0565b610e89565b6103266104483660046136e9565b610ef1565b34801561045957600080fd5b5061047b610468366004613456565b6000908152610227602052604090205490565b6040519081526020016102a3565b34801561049557600080fd5b5061047b610fbe565b3480156104aa57600080fd5b506102c1604051806040016040528060058152602001640c0b8c4b8d60da1b81525081565b3480156104db57600080fd5b506102976104ea366004613456565b611071565b3480156104fb57600080fd5b5061032661050a3660046135f0565b611091565b34801561051b57600080fd5b5061052f61052a366004613456565b6110b3565b604080518251815260208084015190820152918101511515908201526060016102a3565b34801561055f57600080fd5b506102ee61056e366004613456565b6110e2565b34801561057f57600080fd5b5061029761058e366004613456565b6102596020526000908152604090205460ff1681565b3480156105b057600080fd5b5061047b6105bf36600461358f565b6110ed565b3480156105d057600080fd5b506102976105df366004613739565b611174565b3480156105f057600080fd5b5061025a544211610297565b34801561060857600080fd5b5061047b61061736600461358f565b6001600160a01b031690565b34801561062f57600080fd5b506102ee61063e36600461375e565b611194565b34801561064f57600080fd5b5061032661065e366004613780565b6111ad565b34801561066f57600080fd5b506102c16112f0565b34801561068457600080fd5b50610191546001600160a01b03166102ee565b3480156106a357600080fd5b506103266106b2366004613811565b611300565b3480156106c357600080fd5b506103266106d2366004613739565b611312565b3480156106e357600080fd5b506103266106f236600461383f565b61141f565b34801561070357600080fd5b50610717610712366004613456565b6114f9565b6040516102a39493929190613870565b34801561073357600080fd5b5061074761074236600461389f565b6115aa565b6040516102a39190613914565b34801561076057600080fd5b5061029761076f366004613456565b61169f565b34801561078057600080fd5b5061032661078f366004613976565b6116aa565b3480156107a057600080fd5b5061047b61025a5481565b3480156107b757600080fd5b506102976107c6366004613456565b6116e3565b3480156107d757600080fd5b506102c16107e6366004613456565b61180d565b3480156107f757600080fd5b5061032661080636600461358f565b611880565b34801561081757600080fd5b5061025b546102ee906001600160a01b031681565b34801561083857600080fd5b5061032661193e565b34801561084d57600080fd5b5061047b61085c366004613456565b6119c9565b34801561086d57600080fd5b5061029761087c3660046139e2565b6001600160a01b0391821660009081526101646020908152604080832093909416825291909152205460ff1690565b3480156108b757600080fd5b506103266108c6366004613a10565b6119e1565b60006001600160e01b031982166380ac58cd60e01b14806108fc57506001600160e01b03198216635b5e139f60e01b145b8061091757506301ffc9a760e01b6001600160e01b03198316145b92915050565b606061015f805461092d90613a35565b80601f016020809104026020016040519081016040528092919081815260200182805461095990613a35565b80156109a65780601f1061097b576101008083540402835291602001916109a6565b820191906000526020600020905b81548152906001019060200180831161098957829003601f168201915b5050505050905090565b60006109bb82611a6f565b50600090815261016360205260409020546001600160a01b031690565b60006109e382611acf565b9050806001600160a01b0316836001600160a01b03161415610a565760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b806001600160a01b0316610a68611b30565b6001600160a01b03161480610a845750610a848161087c611b30565b610af65760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610a4d565b610b008383611b3e565b505050565b610b16610b10611b30565b82611bad565b610b325760405162461bcd60e51b8152600401610a4d90613a70565b610b00838383611c2d565b7f664245c7af190fec316596e8231f724e8171b1966cfcd124347ac5a66c34f64a610b6f81610b6a611b30565b611dcc565b610ba75780610b7c611b30565b6040516301d4003760e61b815260048101929092526001600160a01b03166024820152604401610a4d565b610bb2848484611e51565b50505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610c015760405162461bcd60e51b8152600401610a4d90613abe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610c4a60008051602061400e833981519152546001600160a01b031690565b6001600160a01b031614610c705760405162461bcd60e51b8152600401610a4d90613b0a565b610c7981611f67565b60408051600080825260208201909252610c9591839190611fa1565b50565b61025b5460405163760d0d3960e01b81526001600160a01b03838116600483015260009283928392606092849283929091169063760d0d399060240160206040518083038186803b158015610cec57600080fd5b505afa158015610d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d249190613b61565b15610d4357610d328761211b565b955095509550955095509550610d4c565b610d32876121cf565b91939550919395565b7fcbe0462e67cb804f0011a6c0b71e9ff49be70d0f907ffdf4f3c74499282ab0b1610d8281610b6a611b30565b610d8f5780610b7c611b30565b6000828152610259602052604090205460ff1615610dc35760405163ee92990360e01b815260048101839052602401610a4d565b610dcc82612228565b60008281526101c360205260408120908181610de882826132c7565b5050506000838152610227602052604081208181559150610e0c60018301826132e5565b50506040518281527f9a5580f0db5f4bd3ad8e8bc7d501f53e457db9d330e8e3ce873d1d05a932d962906020015b60405180910390a15050565b610b00838383604051806020016040528060008152506116aa565b6000610e6f81610b6a611b30565b610e7c5780610b7c611b30565b610e85826122c5565b5050565b610e938282612358565b610ee557610e9f611b30565b816004811115610eb157610eb1613b7e565b6040516372fa0ebb60e11b81526001600160a01b03909216600483015260ff16602482015260448101839052606401610a4d565b610e858282600161243d565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610f3a5760405162461bcd60e51b8152600401610a4d90613abe565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610f8360008051602061400e833981519152546001600160a01b031690565b6001600160a01b031614610fa95760405162461bcd60e51b8152600401610a4d90613b0a565b610fb282611f67565b610e8582826001611fa1565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461105e5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a4d565b5060008051602061400e83398151915290565b600081815261016160205260408120546001600160a01b03161515610917565b61109b8282612358565b6110a757610e9f611b30565b610e858282600061243d565b6110d9604051806060016040528060008152602001600081526020016000151581525090565b610917826124e7565b600061091782611acf565b60006001600160a01b0382166111575760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610a4d565b506001600160a01b03166000908152610162602052604090205490565b60008281526101c36020526040812061118d9083612516565b9392505050565b60008281526101c36020526040812061118d9083612538565b600054610100900460ff16158080156111cd5750600054600160ff909116105b806111e75750303b1580156111e7575060005460ff166001145b6112035760405162461bcd60e51b8152600401610a4d90613b94565b6000805460ff191660011790558015611226576000805461ff0019166101001790555b61122f86612544565b6112a285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152925087915086908190840183828082843760009201919091525061261092505050565b80156112e8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b6060610160805461092d90613a35565b610e8561130b611b30565b8383612641565b600061132081610b6a611b30565b61132d5780610b7c611b30565b8261136d576040516303b3e63560e41b815260206004820152600f60248201526e5f73756e73657474696e6754696d6560881b6044820152606401610a4d565b6001600160a01b0382166113bb5760405163eac0d38960e01b81526020600482015260146024820152735f7363616e6e6572506f6f6c526567697374727960601b6044820152606401610a4d565b61025a83905561025b80546001600160a01b0319166001600160a01b0384169081179091556040805185815260208101929092527fdf229224425c8db50e92e3ad3fdf806d155ea3d6cbdaac5ede11188827d7c5a4910160405180910390a1505050565b7fbfe45770ac5a9057f648bdbd7f3526086df3fa2d93fe61f5b631e50d01f0074a61144c81610b6a611b30565b6114595780610b7c611b30565b823560208401351161147e57604051632ca637fd60e21b815260040160405180910390fd5b817f52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def843560208601356114b76060880160408901613be2565b60408051938452602084019290925215159082015260600160405180910390a260008281526101966020526040902083906114f28282613bff565b5050505050565b61025b5460405163760d0d3960e01b81526001600160a01b03838116600483015260009283928392606092169063760d0d399060240160206040518083038186803b15801561154757600080fd5b505afa15801561155b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157f9190613b61565b1561159a5761158d85612709565b93509350935093506115a3565b61158d856127a4565b9193509193565b60608167ffffffffffffffff8111156115c5576115c5613624565b6040519080825280602002602001820160405280156115f857816020015b60608152602001906001900390816115e35790505b50905060005b82811015611698576116683085858481811061161c5761161c613c35565b905060200281019061162e9190613c4b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061289a92505050565b82828151811061167a5761167a613c35565b6020026020010181905250808061169090613ca8565b9150506115fe565b5092915050565b6000610917826128bf565b6116bb6116b5611b30565b83611bad565b6116d75760405162461bcd60e51b8152600401610a4d90613a70565b610bb2848484846129c2565b60006116f161025a54421190565b156116fe57506000919050565b61025b5460405163760d0d3960e01b81526001600160a01b0384811660048301529091169063760d0d399060240160206040518083038186803b15801561174457600080fd5b505afa158015611758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177c9190613b61565b156117ff5761025b54604051630911b7b360e41b81526001600160a01b0384811660048301529091169063911b7b309060240160206040518083038186803b1580156117c757600080fd5b505afa1580156117db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109179190613b61565b610917826129f5565b919050565b606061181882611a6f565b600061182f60408051602081019091526000815290565b9050600081511161184f576040518060200160405280600081525061118d565b8061185984612a34565b60405160200161186a929190613cc3565b6040516020818303038152906040529392505050565b600061188e81610b6a611b30565b61189b5780610b7c611b30565b6118b56001600160a01b038316637965db0b60e01b612b32565b6118f3576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610a4d565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a25050565b6065546001600160a01b031661198c5760405163eac0d38960e01b81526020600482015260126024820152712fb232b83932b1b0ba32b22fb937baba32b960711b6044820152606401610a4d565b606580546001600160a01b03191690556040516000907f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80908290a2565b60008181526101c36020526040812061091790612b4e565b816119eb816110e2565b6001600160a01b03166119fc611b30565b6001600160a01b031614611a3e57611a12611b30565b60405163871d7af360e01b81526001600160a01b03909116600482015260248101829052604401610a4d565b5060009182526102596020526040909120805460ff1916911515919091179055565b6001600160a01b03163b151590565b600081815261016160205260409020546001600160a01b0316610c955760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a4d565b600081815261016160205260408120546001600160a01b0316806109175760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a4d565b6000611b396000335b905090565b60008181526101636020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b7482611acf565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611bb983611acf565b9050806001600160a01b0316846001600160a01b03161480611c0157506001600160a01b038082166000908152610164602090815260408083209388168352929052205460ff165b80611c255750836001600160a01b0316611c1a846109b0565b6001600160a01b0316145b949350505050565b826001600160a01b0316611c4082611acf565b6001600160a01b031614611ca45760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610a4d565b6001600160a01b038216611d065760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a4d565b611d11600082611b3e565b6001600160a01b038316600090815261016260205260408120805460019290611d3b908490613cf2565b90915550506001600160a01b038216600090815261016260205260408120805460019290611d6a908490613d09565b90915550506000818152610161602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b603354604051632474521560e21b8152600481018490526001600160a01b03838116602483015260009216906391d148549060440160206040518083038186803b158015611e1957600080fd5b505afa158015611e2d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118d9190613b61565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526001600160a01b038416906302571be39060240160206040518083038186803b158015611eb057600080fd5b505afa158015611ec4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee89190613d21565b6001600160a01b031663c47f002783836040518363ffffffff1660e01b8152600401611f15929190613d3e565b602060405180830381600087803b158015611f2f57600080fd5b505af1158015611f43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb29190613d6d565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e3611f9481610b6a611b30565b610e855780610b7c611b30565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611fd457610b0083612b58565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561200d57600080fd5b505afa92505050801561203d575060408051601f3d908101601f1916820190925261203a91810190613d6d565b60015b6120a05760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a4d565b60008051602061400e833981519152811461210f5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a4d565b50610b00838383612bf4565b61025b54604051637434d8e760e01b81526001600160a01b038381166004830152600092839283926060928492839283921690637434d8e79060240160006040518083038186803b15801561216f57600080fd5b505afa158015612183573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121ab9190810190613d86565b949b5092995090975095509350905080156121c557600191505b5091939550919395565b600080600060606000806121e2876127a4565b92985090965094509250858585856121f98b6116e3565b60008c81526101f560209081526040808320838052909152902054949c939b5091995097509550909350915050565b600061223382611acf565b9050612240600083611b3e565b6001600160a01b03811660009081526101626020526040812080546001929061226a908490613cf2565b90915550506000828152610161602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b6001600160a01b03811661230d5760405163eac0d38960e01b815260206004820152600e60248201526d7375626a6563744761746577617960901b6044820152606401610a4d565b61019180546001600160a01b0319166001600160a01b0383169081179091556040517f16d72e484786227d7b6dd05e079be9ff9904a81a0a9ec36fc346b20f8c47aff090600090a250565b60008082600481111561236d5761236d613b7e565b14156123a65761239f7fbfe45770ac5a9057f648bdbd7f3526086df3fa2d93fe61f5b631e50d01f0074a610b6a611b30565b9050610917565b60018260048111156123ba576123ba613b7e565b14156123da57826123c9611b30565b6001600160a01b0316149050610917565b60028260048111156123ee576123ee613b7e565b141561240e576123fd836110e2565b6001600160a01b03166123c9611b30565b600382600481111561242257612422613b7e565b14156124345761239f836105df611b30565b50600092915050565b61244683611071565b61246e57604051631cc39a1f60e01b81526001600160a01b0384166004820152602401610a4d565b61249d82600481111561248357612483613b7e565b60008581526101f5602052604090209060ff168315612c19565b6124a6836116e3565b1515837fcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d484846040516124da929190613e4f565b60405180910390a3505050565b61250d604051806060016040528060008152602001600081526020016000151581525090565b61091782612c68565b6001600160a01b0381166000908152600183016020526040812054151561118d565b600061118d8383612cd8565b600054610100900460ff16158080156125645750600054600160ff909116105b8061257e5750303b15801561257e575060005460ff166001145b61259a5760405162461bcd60e51b8152600401610a4d90613b94565b6000805460ff1916600117905580156125bd576000805461ff0019166101001790555b6125c682612d02565b6125ce612e5c565b8015610e85576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610e3a565b600054610100900460ff166126375760405162461bcd60e51b8152600401610a4d90613e80565b610e858282612e85565b816001600160a01b0316836001600160a01b031614156126a35760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a4d565b6001600160a01b0383811660008181526101646020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191016124da565b61025b54604051637434d8e760e01b81526001600160a01b038381166004830152600092839283926060921690637434d8e79060240160006040518083038186803b15801561275757600080fd5b505afa15801561276b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526127939190810190613d86565b509399929850909650945092505050565b6000806000606060006127cf86600090815261016160205260409020546001600160a01b0316151590565b905080816127de5760006127e7565b6127e7876110e2565b600088815261022760205260409020805460019091018054819061280a90613a35565b80601f016020809104026020016040519081016040528092919081815260200182805461283690613a35565b80156128835780601f1061285857610100808354040283529160200191612883565b820191906000526020600020905b81548152906001019060200180831161286657829003601f168201915b505050505090509450945094509450509193509193565b606061118d838360405180606001604052806027815260200161402e60279139612ed5565b6000806128d5610191546001600160a01b031690565b6001600160a01b031614806128f457506128ee826124e7565b60400151155b1561290157506001919050565b61290a826124e7565b51610191546001600160a01b031660405163145217e760e31b815260006004820152602481018590526001600160a01b03919091169063a290bf389060440160206040518083038186803b15801561296157600080fd5b505afa158015612975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129999190613d6d565b101580156109175750600082815261016160205260409020546001600160a01b03161515610917565b6129cd848484611c2d565b6129d984848484612f73565b610bb25760405162461bcd60e51b8152600401610a4d90613ecb565b6000612a0082611071565b8015612a24575060008281526101f560209081526040808320838052909152902054155b80156109175750610917826128bf565b606081612a585750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612a825780612a6c81613ca8565b9150612a7b9050600a83613f33565b9150612a5c565b60008167ffffffffffffffff811115612a9d57612a9d613624565b6040519080825280601f01601f191660200182016040528015612ac7576020820181803683370190505b5090505b8415611c2557612adc600183613cf2565b9150612ae9600a86613f47565b612af4906030613d09565b60f81b818381518110612b0957612b09613c35565b60200101906001600160f81b031916908160001a905350612b2b600a86613f33565b9450612acb565b6000612b3d83613087565b801561118d575061118d83836130ba565b6000610917825490565b6001600160a01b0381163b612bc55760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a4d565b60008051602061400e83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612bfd83613199565b600082511180612c0a5750805b15610b0057610bb283836131d9565b8015612c4357600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b612c8e604051806060016040528060008152602001600081526020016000151581525090565b506000908152610227602090815260408083205483526101968252918290208251606081018452815481526001820154928101929092526002015460ff1615159181019190915290565b6000826000018281548110612cef57612cef613c35565b9060005260206000200154905092915050565b600054610100900460ff1615808015612d225750600054600160ff909116105b80612d3c5750303b158015612d3c575060005460ff166001145b612d585760405162461bcd60e51b8152600401610a4d90613b94565b6000805460ff191660011790558015612d7b576000805461ff0019166101001790555b612d956001600160a01b038316637965db0b60e01b612b32565b612dd3576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610a4d565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a28015610e85576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610e3a565b600054610100900460ff16612e835760405162461bcd60e51b8152600401610a4d90613e80565b565b600054610100900460ff16612eac5760405162461bcd60e51b8152600401610a4d90613e80565b8151612ec09061015f90602085019061331f565b508051610b009061016090602084019061331f565b60606001600160a01b0384163b612efe5760405162461bcd60e51b8152600401610a4d90613f5b565b600080856001600160a01b031685604051612f199190613fa1565b600060405180830381855af49150503d8060008114612f54576040519150601f19603f3d011682016040523d82523d6000602084013e612f59565b606091505b5091509150612f6982828661328e565b9695505050505050565b60006001600160a01b0384163b1561307c57836001600160a01b031663150b7a02612f9c611b30565b8786866040518563ffffffff1660e01b8152600401612fbe9493929190613fbd565b602060405180830381600087803b158015612fd857600080fd5b505af1925050508015613008575060408051601f3d908101601f1916820190925261300591810190613ff0565b60015b613062573d808015613036576040519150601f19603f3d011682016040523d82523d6000602084013e61303b565b606091505b50805161305a5760405162461bcd60e51b8152600401610a4d90613ecb565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611c25565b506001949350505050565b600061309a826301ffc9a760e01b6130ba565b801561091757506130b3826001600160e01b03196130ba565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b0387169061753090613121908690613fa1565b6000604051808303818686fa925050503d806000811461315d576040519150601f19603f3d011682016040523d82523d6000602084013e613162565b606091505b509150915060208151101561317d5760009350505050610917565b818015612f69575080806020019051810190612f699190613b61565b6131a281612b58565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b6132025760405162461bcd60e51b8152600401610a4d90613f5b565b600080846001600160a01b03168460405161321d9190613fa1565b600060405180830381855af49150503d8060008114613258576040519150601f19603f3d011682016040523d82523d6000602084013e61325d565b606091505b5091509150613285828260405180606001604052806027815260200161402e6027913961328e565b95945050505050565b6060831561329d57508161118d565b8251156132ad5782518084602001fd5b8160405162461bcd60e51b8152600401610a4d9190613443565b5080546000825590600052602060002090810190610c9591906133a3565b5080546132f190613a35565b6000825580601f10613301575050565b601f016020900490600052602060002090810190610c9591906133a3565b82805461332b90613a35565b90600052602060002090601f01602090048101928261334d5760008555613393565b82601f1061336657805160ff1916838001178555613393565b82800160010185558215613393579182015b82811115613393578251825591602001919060010190613378565b5061339f9291506133a3565b5090565b5b8082111561339f57600081556001016133a4565b6001600160e01b031981168114610c9557600080fd5b6000602082840312156133e057600080fd5b813561118d816133b8565b60005b838110156134065781810151838201526020016133ee565b83811115610bb25750506000910152565b6000815180845261342f8160208601602086016133eb565b601f01601f19169290920160200192915050565b60208152600061118d6020830184613417565b60006020828403121561346857600080fd5b5035919050565b6001600160a01b0381168114610c9557600080fd5b6000806040838503121561349757600080fd5b82356134a28161346f565b946020939093013593505050565b6000806000606084860312156134c557600080fd5b83356134d08161346f565b925060208401356134e08161346f565b929592945050506040919091013590565b60008083601f84011261350357600080fd5b50813567ffffffffffffffff81111561351b57600080fd5b60208301915083602082850101111561353357600080fd5b9250929050565b60008060006040848603121561354f57600080fd5b833561355a8161346f565b9250602084013567ffffffffffffffff81111561357657600080fd5b613582868287016134f1565b9497909650939450505050565b6000602082840312156135a157600080fd5b813561118d8161346f565b861515815260018060a01b038616602082015284604082015260c0606082015260006135db60c0830186613417565b93151560808301525060a00152949350505050565b6000806040838503121561360357600080fd5b8235915060208301356005811061361957600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561366357613663613624565b604052919050565b600067ffffffffffffffff82111561368557613685613624565b50601f01601f191660200190565b600082601f8301126136a457600080fd5b81356136b76136b28261366b565b61363a565b8181528460208386010111156136cc57600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156136fc57600080fd5b82356137078161346f565b9150602083013567ffffffffffffffff81111561372357600080fd5b61372f85828601613693565b9150509250929050565b6000806040838503121561374c57600080fd5b8235915060208301356136198161346f565b6000806040838503121561377157600080fd5b50508035926020909101359150565b60008060008060006060868803121561379857600080fd5b85356137a38161346f565b9450602086013567ffffffffffffffff808211156137c057600080fd5b6137cc89838a016134f1565b909650945060408801359150808211156137e557600080fd5b506137f2888289016134f1565b969995985093965092949392505050565b8015158114610c9557600080fd5b6000806040838503121561382457600080fd5b823561382f8161346f565b9150602083013561361981613803565b600080828403608081121561385357600080fd5b606081121561386157600080fd5b50919360608501359350915050565b841515815260018060a01b0384166020820152826040820152608060608201526000612f696080830184613417565b600080602083850312156138b257600080fd5b823567ffffffffffffffff808211156138ca57600080fd5b818501915085601f8301126138de57600080fd5b8135818111156138ed57600080fd5b8660208260051b850101111561390257600080fd5b60209290920196919550909350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561396957603f19888603018452613957858351613417565b9450928501929085019060010161393b565b5092979650505050505050565b6000806000806080858703121561398c57600080fd5b84356139978161346f565b935060208501356139a78161346f565b925060408501359150606085013567ffffffffffffffff8111156139ca57600080fd5b6139d687828801613693565b91505092959194509250565b600080604083850312156139f557600080fd5b8235613a008161346f565b915060208301356136198161346f565b60008060408385031215613a2357600080fd5b82359150602083013561361981613803565b600181811c90821680613a4957607f821691505b60208210811415613a6a57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b805161180881613803565b600060208284031215613b7357600080fd5b815161118d81613803565b634e487b7160e01b600052602160045260246000fd5b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600060208284031215613bf457600080fd5b813561118d81613803565b8135815560208201356001820155600281016040830135613c1f81613803565b815490151560ff1660ff19919091161790555050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e19843603018112613c6257600080fd5b83018035915067ffffffffffffffff821115613c7d57600080fd5b60200191503681900382131561353357600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415613cbc57613cbc613c92565b5060010190565b60008351613cd58184602088016133eb565b835190830190613ce98183602088016133eb565b01949350505050565b600082821015613d0457613d04613c92565b500390565b60008219821115613d1c57613d1c613c92565b500190565b600060208284031215613d3357600080fd5b815161118d8161346f565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600060208284031215613d7f57600080fd5b5051919050565b60008060008060008060c08789031215613d9f57600080fd5b8651613daa81613803565b6020880151909650613dbb8161346f565b60408801516060890151919650945067ffffffffffffffff811115613ddf57600080fd5b8701601f81018913613df057600080fd5b8051613dfe6136b28261366b565b8181528a6020838501011115613e1357600080fd5b613e248260208301602086016133eb565b9450613e3591505060808801613b56565b9150613e4360a08801613b56565b90509295509295509295565b6040810160058410613e7157634e487b7160e01b600052602160045260246000fd5b92815290151560209091015290565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b600082613f4257613f42613f1d565b500490565b600082613f5657613f56613f1d565b500690565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b60008251613fb38184602087016133eb565b9190910192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612f6990830184613417565b60006020828403121561400257600080fd5b815161118d816133b856fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220bed3f4c8de97baa1f729a3a08214706def2dc566ed020dcbf446dd1c440f5bb564736f6c63430008090033",
}

// ScannerRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use ScannerRegistryMetaData.ABI instead.
var ScannerRegistryABI = ScannerRegistryMetaData.ABI

// ScannerRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ScannerRegistryMetaData.Bin instead.
var ScannerRegistryBin = ScannerRegistryMetaData.Bin

// DeployScannerRegistry deploys a new Ethereum contract, binding an instance of ScannerRegistry to it.
func DeployScannerRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, forwarder common.Address) (common.Address, *types.Transaction, *ScannerRegistry, error) {
	parsed, err := ScannerRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ScannerRegistryBin), backend, forwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ScannerRegistry{ScannerRegistryCaller: ScannerRegistryCaller{contract: contract}, ScannerRegistryTransactor: ScannerRegistryTransactor{contract: contract}, ScannerRegistryFilterer: ScannerRegistryFilterer{contract: contract}}, nil
}

// ScannerRegistry is an auto generated Go binding around an Ethereum contract.
type ScannerRegistry struct {
	ScannerRegistryCaller     // Read-only binding to the contract
	ScannerRegistryTransactor // Write-only binding to the contract
	ScannerRegistryFilterer   // Log filterer for contract events
}

// ScannerRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ScannerRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScannerRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ScannerRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScannerRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ScannerRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ScannerRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ScannerRegistrySession struct {
	Contract     *ScannerRegistry  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ScannerRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ScannerRegistryCallerSession struct {
	Contract *ScannerRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// ScannerRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ScannerRegistryTransactorSession struct {
	Contract     *ScannerRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// ScannerRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ScannerRegistryRaw struct {
	Contract *ScannerRegistry // Generic contract binding to access the raw methods on
}

// ScannerRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ScannerRegistryCallerRaw struct {
	Contract *ScannerRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// ScannerRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ScannerRegistryTransactorRaw struct {
	Contract *ScannerRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewScannerRegistry creates a new instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistry(address common.Address, backend bind.ContractBackend) (*ScannerRegistry, error) {
	contract, err := bindScannerRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistry{ScannerRegistryCaller: ScannerRegistryCaller{contract: contract}, ScannerRegistryTransactor: ScannerRegistryTransactor{contract: contract}, ScannerRegistryFilterer: ScannerRegistryFilterer{contract: contract}}, nil
}

// NewScannerRegistryCaller creates a new read-only instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistryCaller(address common.Address, caller bind.ContractCaller) (*ScannerRegistryCaller, error) {
	contract, err := bindScannerRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryCaller{contract: contract}, nil
}

// NewScannerRegistryTransactor creates a new write-only instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*ScannerRegistryTransactor, error) {
	contract, err := bindScannerRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryTransactor{contract: contract}, nil
}

// NewScannerRegistryFilterer creates a new log filterer instance of ScannerRegistry, bound to a specific deployed contract.
func NewScannerRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*ScannerRegistryFilterer, error) {
	contract, err := bindScannerRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryFilterer{contract: contract}, nil
}

// bindScannerRegistry binds a generic wrapper to an already deployed contract.
func bindScannerRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ScannerRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScannerRegistry *ScannerRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScannerRegistry.Contract.ScannerRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScannerRegistry *ScannerRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.ScannerRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScannerRegistry *ScannerRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.ScannerRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ScannerRegistry *ScannerRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ScannerRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ScannerRegistry *ScannerRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ScannerRegistry *ScannerRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.BalanceOf(&_ScannerRegistry.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.BalanceOf(&_ScannerRegistry.CallOpts, owner)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetApproved(&_ScannerRegistry.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetApproved(&_ScannerRegistry.CallOpts, tokenId)
}

// GetManagerAt is a free data retrieval call binding the contract method 0x8e79a369.
//
// Solidity: function getManagerAt(uint256 scannerId, uint256 index) view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) GetManagerAt(opts *bind.CallOpts, scannerId *big.Int, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getManagerAt", scannerId, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetManagerAt is a free data retrieval call binding the contract method 0x8e79a369.
//
// Solidity: function getManagerAt(uint256 scannerId, uint256 index) view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) GetManagerAt(scannerId *big.Int, index *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetManagerAt(&_ScannerRegistry.CallOpts, scannerId, index)
}

// GetManagerAt is a free data retrieval call binding the contract method 0x8e79a369.
//
// Solidity: function getManagerAt(uint256 scannerId, uint256 index) view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetManagerAt(scannerId *big.Int, index *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.GetManagerAt(&_ScannerRegistry.CallOpts, scannerId, index)
}

// GetManagerCount is a free data retrieval call binding the contract method 0xe11cf71e.
//
// Solidity: function getManagerCount(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) GetManagerCount(opts *bind.CallOpts, scannerId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getManagerCount", scannerId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetManagerCount is a free data retrieval call binding the contract method 0xe11cf71e.
//
// Solidity: function getManagerCount(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) GetManagerCount(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetManagerCount(&_ScannerRegistry.CallOpts, scannerId)
}

// GetManagerCount is a free data retrieval call binding the contract method 0xe11cf71e.
//
// Solidity: function getManagerCount(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetManagerCount(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetManagerCount(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScanner is a free data retrieval call binding the contract method 0xa97fe43e.
//
// Solidity: function getScanner(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryCaller) GetScanner(opts *bind.CallOpts, scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
}, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getScanner", scannerId)

	outstruct := new(struct {
		Registered bool
		Owner      common.Address
		ChainId    *big.Int
		Metadata   string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.ChainId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)

	return *outstruct, err

}

// GetScanner is a free data retrieval call binding the contract method 0xa97fe43e.
//
// Solidity: function getScanner(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata)
func (_ScannerRegistry *ScannerRegistrySession) GetScanner(scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
}, error) {
	return _ScannerRegistry.Contract.GetScanner(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScanner is a free data retrieval call binding the contract method 0xa97fe43e.
//
// Solidity: function getScanner(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetScanner(scannerId *big.Int) (struct {
	Registered bool
	Owner      common.Address
	ChainId    *big.Int
	Metadata   string
}, error) {
	return _ScannerRegistry.Contract.GetScanner(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerChainId is a free data retrieval call binding the contract method 0x5109c479.
//
// Solidity: function getScannerChainId(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) GetScannerChainId(opts *bind.CallOpts, scannerId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getScannerChainId", scannerId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetScannerChainId is a free data retrieval call binding the contract method 0x5109c479.
//
// Solidity: function getScannerChainId(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) GetScannerChainId(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetScannerChainId(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerChainId is a free data retrieval call binding the contract method 0x5109c479.
//
// Solidity: function getScannerChainId(uint256 scannerId) view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetScannerChainId(scannerId *big.Int) (*big.Int, error) {
	return _ScannerRegistry.Contract.GetScannerChainId(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerState is a free data retrieval call binding the contract method 0x37fea0e0.
//
// Solidity: function getScannerState(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata, bool enabled, uint256 disabledFlags)
func (_ScannerRegistry *ScannerRegistryCaller) GetScannerState(opts *bind.CallOpts, scannerId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	ChainId       *big.Int
	Metadata      string
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getScannerState", scannerId)

	outstruct := new(struct {
		Registered    bool
		Owner         common.Address
		ChainId       *big.Int
		Metadata      string
		Enabled       bool
		DisabledFlags *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.ChainId = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.Enabled = *abi.ConvertType(out[4], new(bool)).(*bool)
	outstruct.DisabledFlags = *abi.ConvertType(out[5], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetScannerState is a free data retrieval call binding the contract method 0x37fea0e0.
//
// Solidity: function getScannerState(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata, bool enabled, uint256 disabledFlags)
func (_ScannerRegistry *ScannerRegistrySession) GetScannerState(scannerId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	ChainId       *big.Int
	Metadata      string
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	return _ScannerRegistry.Contract.GetScannerState(&_ScannerRegistry.CallOpts, scannerId)
}

// GetScannerState is a free data retrieval call binding the contract method 0x37fea0e0.
//
// Solidity: function getScannerState(uint256 scannerId) view returns(bool registered, address owner, uint256 chainId, string metadata, bool enabled, uint256 disabledFlags)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetScannerState(scannerId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	ChainId       *big.Int
	Metadata      string
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	return _ScannerRegistry.Contract.GetScannerState(&_ScannerRegistry.CallOpts, scannerId)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 subject) view returns((uint256,uint256,bool))
func (_ScannerRegistry *ScannerRegistryCaller) GetStakeThreshold(opts *bind.CallOpts, subject *big.Int) (IStakeSubjectStakeThreshold, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getStakeThreshold", subject)

	if err != nil {
		return *new(IStakeSubjectStakeThreshold), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeSubjectStakeThreshold)).(*IStakeSubjectStakeThreshold)

	return out0, err

}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 subject) view returns((uint256,uint256,bool))
func (_ScannerRegistry *ScannerRegistrySession) GetStakeThreshold(subject *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _ScannerRegistry.Contract.GetStakeThreshold(&_ScannerRegistry.CallOpts, subject)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 subject) view returns((uint256,uint256,bool))
func (_ScannerRegistry *ScannerRegistryCallerSession) GetStakeThreshold(subject *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _ScannerRegistry.Contract.GetStakeThreshold(&_ScannerRegistry.CallOpts, subject)
}

// GetSubjectHandler is a free data retrieval call binding the contract method 0x9f79b63a.
//
// Solidity: function getSubjectHandler() view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) GetSubjectHandler(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "getSubjectHandler")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetSubjectHandler is a free data retrieval call binding the contract method 0x9f79b63a.
//
// Solidity: function getSubjectHandler() view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) GetSubjectHandler() (common.Address, error) {
	return _ScannerRegistry.Contract.GetSubjectHandler(&_ScannerRegistry.CallOpts)
}

// GetSubjectHandler is a free data retrieval call binding the contract method 0x9f79b63a.
//
// Solidity: function getSubjectHandler() view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) GetSubjectHandler() (common.Address, error) {
	return _ScannerRegistry.Contract.GetSubjectHandler(&_ScannerRegistry.CallOpts)
}

// HasMigrationEnded is a free data retrieval call binding the contract method 0x7cf1140d.
//
// Solidity: function hasMigrationEnded() view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) HasMigrationEnded(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "hasMigrationEnded")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasMigrationEnded is a free data retrieval call binding the contract method 0x7cf1140d.
//
// Solidity: function hasMigrationEnded() view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) HasMigrationEnded() (bool, error) {
	return _ScannerRegistry.Contract.HasMigrationEnded(&_ScannerRegistry.CallOpts)
}

// HasMigrationEnded is a free data retrieval call binding the contract method 0x7cf1140d.
//
// Solidity: function hasMigrationEnded() view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) HasMigrationEnded() (bool, error) {
	return _ScannerRegistry.Contract.HasMigrationEnded(&_ScannerRegistry.CallOpts)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsApprovedForAll(&_ScannerRegistry.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsApprovedForAll(&_ScannerRegistry.CallOpts, owner, operator)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsEnabled(opts *bind.CallOpts, scannerId *big.Int) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isEnabled", scannerId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsEnabled(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsEnabled(&_ScannerRegistry.CallOpts, scannerId)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsEnabled(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsEnabled(&_ScannerRegistry.CallOpts, scannerId)
}

// IsManager is a free data retrieval call binding the contract method 0x773ed13c.
//
// Solidity: function isManager(uint256 scannerId, address manager) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsManager(opts *bind.CallOpts, scannerId *big.Int, manager common.Address) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isManager", scannerId, manager)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsManager is a free data retrieval call binding the contract method 0x773ed13c.
//
// Solidity: function isManager(uint256 scannerId, address manager) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsManager(scannerId *big.Int, manager common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsManager(&_ScannerRegistry.CallOpts, scannerId, manager)
}

// IsManager is a free data retrieval call binding the contract method 0x773ed13c.
//
// Solidity: function isManager(uint256 scannerId, address manager) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsManager(scannerId *big.Int, manager common.Address) (bool, error) {
	return _ScannerRegistry.Contract.IsManager(&_ScannerRegistry.CallOpts, scannerId, manager)
}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsRegistered(opts *bind.CallOpts, scannerId *big.Int) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isRegistered", scannerId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsRegistered(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsRegistered(&_ScannerRegistry.CallOpts, scannerId)
}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 scannerId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsRegistered(scannerId *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsRegistered(&_ScannerRegistry.CallOpts, scannerId)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) IsStakedOverMin(opts *bind.CallOpts, subject *big.Int) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "isStakedOverMin", subject)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsStakedOverMin(&_ScannerRegistry.CallOpts, subject)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.IsStakedOverMin(&_ScannerRegistry.CallOpts, subject)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) Name() (string, error) {
	return _ScannerRegistry.Contract.Name(&_ScannerRegistry.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) Name() (string, error) {
	return _ScannerRegistry.Contract.Name(&_ScannerRegistry.CallOpts)
}

// OptingOutOfMigration is a free data retrieval call binding the contract method 0x6eb41f77.
//
// Solidity: function optingOutOfMigration(uint256 ) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) OptingOutOfMigration(opts *bind.CallOpts, arg0 *big.Int) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "optingOutOfMigration", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// OptingOutOfMigration is a free data retrieval call binding the contract method 0x6eb41f77.
//
// Solidity: function optingOutOfMigration(uint256 ) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) OptingOutOfMigration(arg0 *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.OptingOutOfMigration(&_ScannerRegistry.CallOpts, arg0)
}

// OptingOutOfMigration is a free data retrieval call binding the contract method 0x6eb41f77.
//
// Solidity: function optingOutOfMigration(uint256 ) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) OptingOutOfMigration(arg0 *big.Int) (bool, error) {
	return _ScannerRegistry.Contract.OptingOutOfMigration(&_ScannerRegistry.CallOpts, arg0)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 subject) view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) OwnerOf(opts *bind.CallOpts, subject *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "ownerOf", subject)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 subject) view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) OwnerOf(subject *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.OwnerOf(&_ScannerRegistry.CallOpts, subject)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 subject) view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) OwnerOf(subject *big.Int) (common.Address, error) {
	return _ScannerRegistry.Contract.OwnerOf(&_ScannerRegistry.CallOpts, subject)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ScannerRegistry *ScannerRegistryCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ScannerRegistry *ScannerRegistrySession) ProxiableUUID() ([32]byte, error) {
	return _ScannerRegistry.Contract.ProxiableUUID(&_ScannerRegistry.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_ScannerRegistry *ScannerRegistryCallerSession) ProxiableUUID() ([32]byte, error) {
	return _ScannerRegistry.Contract.ProxiableUUID(&_ScannerRegistry.CallOpts)
}

// ScannerAddressToId is a free data retrieval call binding the contract method 0x82fe1bcc.
//
// Solidity: function scannerAddressToId(address scanner) pure returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) ScannerAddressToId(opts *bind.CallOpts, scanner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "scannerAddressToId", scanner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ScannerAddressToId is a free data retrieval call binding the contract method 0x82fe1bcc.
//
// Solidity: function scannerAddressToId(address scanner) pure returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) ScannerAddressToId(scanner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.ScannerAddressToId(&_ScannerRegistry.CallOpts, scanner)
}

// ScannerAddressToId is a free data retrieval call binding the contract method 0x82fe1bcc.
//
// Solidity: function scannerAddressToId(address scanner) pure returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) ScannerAddressToId(scanner common.Address) (*big.Int, error) {
	return _ScannerRegistry.Contract.ScannerAddressToId(&_ScannerRegistry.CallOpts, scanner)
}

// ScannerPoolRegistry is a free data retrieval call binding the contract method 0xcde574fe.
//
// Solidity: function scannerPoolRegistry() view returns(address)
func (_ScannerRegistry *ScannerRegistryCaller) ScannerPoolRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "scannerPoolRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ScannerPoolRegistry is a free data retrieval call binding the contract method 0xcde574fe.
//
// Solidity: function scannerPoolRegistry() view returns(address)
func (_ScannerRegistry *ScannerRegistrySession) ScannerPoolRegistry() (common.Address, error) {
	return _ScannerRegistry.Contract.ScannerPoolRegistry(&_ScannerRegistry.CallOpts)
}

// ScannerPoolRegistry is a free data retrieval call binding the contract method 0xcde574fe.
//
// Solidity: function scannerPoolRegistry() view returns(address)
func (_ScannerRegistry *ScannerRegistryCallerSession) ScannerPoolRegistry() (common.Address, error) {
	return _ScannerRegistry.Contract.ScannerPoolRegistry(&_ScannerRegistry.CallOpts)
}

// SunsettingTime is a free data retrieval call binding the contract method 0xc4b2b346.
//
// Solidity: function sunsettingTime() view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCaller) SunsettingTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "sunsettingTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SunsettingTime is a free data retrieval call binding the contract method 0xc4b2b346.
//
// Solidity: function sunsettingTime() view returns(uint256)
func (_ScannerRegistry *ScannerRegistrySession) SunsettingTime() (*big.Int, error) {
	return _ScannerRegistry.Contract.SunsettingTime(&_ScannerRegistry.CallOpts)
}

// SunsettingTime is a free data retrieval call binding the contract method 0xc4b2b346.
//
// Solidity: function sunsettingTime() view returns(uint256)
func (_ScannerRegistry *ScannerRegistryCallerSession) SunsettingTime() (*big.Int, error) {
	return _ScannerRegistry.Contract.SunsettingTime(&_ScannerRegistry.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ScannerRegistry *ScannerRegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ScannerRegistry.Contract.SupportsInterface(&_ScannerRegistry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_ScannerRegistry *ScannerRegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _ScannerRegistry.Contract.SupportsInterface(&_ScannerRegistry.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) Symbol() (string, error) {
	return _ScannerRegistry.Contract.Symbol(&_ScannerRegistry.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) Symbol() (string, error) {
	return _ScannerRegistry.Contract.Symbol(&_ScannerRegistry.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) TokenURI(tokenId *big.Int) (string, error) {
	return _ScannerRegistry.Contract.TokenURI(&_ScannerRegistry.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _ScannerRegistry.Contract.TokenURI(&_ScannerRegistry.CallOpts, tokenId)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ScannerRegistry *ScannerRegistryCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ScannerRegistry.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ScannerRegistry *ScannerRegistrySession) Version() (string, error) {
	return _ScannerRegistry.Contract.Version(&_ScannerRegistry.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_ScannerRegistry *ScannerRegistryCallerSession) Version() (string, error) {
	return _ScannerRegistry.Contract.Version(&_ScannerRegistry.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistrySession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Approve(&_ScannerRegistry.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Approve(&_ScannerRegistry.TransactOpts, to, tokenId)
}

// ConfigureMigration is a paid mutator transaction binding the contract method 0xa51433c5.
//
// Solidity: function configureMigration(uint256 _sunsettingTime, address _scannerPoolRegistry) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) ConfigureMigration(opts *bind.TransactOpts, _sunsettingTime *big.Int, _scannerPoolRegistry common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "configureMigration", _sunsettingTime, _scannerPoolRegistry)
}

// ConfigureMigration is a paid mutator transaction binding the contract method 0xa51433c5.
//
// Solidity: function configureMigration(uint256 _sunsettingTime, address _scannerPoolRegistry) returns()
func (_ScannerRegistry *ScannerRegistrySession) ConfigureMigration(_sunsettingTime *big.Int, _scannerPoolRegistry common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.ConfigureMigration(&_ScannerRegistry.TransactOpts, _sunsettingTime, _scannerPoolRegistry)
}

// ConfigureMigration is a paid mutator transaction binding the contract method 0xa51433c5.
//
// Solidity: function configureMigration(uint256 _sunsettingTime, address _scannerPoolRegistry) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) ConfigureMigration(_sunsettingTime *big.Int, _scannerPoolRegistry common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.ConfigureMigration(&_ScannerRegistry.TransactOpts, _sunsettingTime, _scannerPoolRegistry)
}

// DeregisterScannerNode is a paid mutator transaction binding the contract method 0x39c7ac21.
//
// Solidity: function deregisterScannerNode(uint256 scannerId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) DeregisterScannerNode(opts *bind.TransactOpts, scannerId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "deregisterScannerNode", scannerId)
}

// DeregisterScannerNode is a paid mutator transaction binding the contract method 0x39c7ac21.
//
// Solidity: function deregisterScannerNode(uint256 scannerId) returns()
func (_ScannerRegistry *ScannerRegistrySession) DeregisterScannerNode(scannerId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DeregisterScannerNode(&_ScannerRegistry.TransactOpts, scannerId)
}

// DeregisterScannerNode is a paid mutator transaction binding the contract method 0x39c7ac21.
//
// Solidity: function deregisterScannerNode(uint256 scannerId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) DeregisterScannerNode(scannerId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DeregisterScannerNode(&_ScannerRegistry.TransactOpts, scannerId)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_ScannerRegistry *ScannerRegistryTransactor) DisableRouter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "disableRouter")
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_ScannerRegistry *ScannerRegistrySession) DisableRouter() (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DisableRouter(&_ScannerRegistry.TransactOpts)
}

// DisableRouter is a paid mutator transaction binding the contract method 0xd858a7e5.
//
// Solidity: function disableRouter() returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) DisableRouter() (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DisableRouter(&_ScannerRegistry.TransactOpts)
}

// DisableScanner is a paid mutator transaction binding the contract method 0x59238297.
//
// Solidity: function disableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) DisableScanner(opts *bind.TransactOpts, scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "disableScanner", scannerId, permission)
}

// DisableScanner is a paid mutator transaction binding the contract method 0x59238297.
//
// Solidity: function disableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistrySession) DisableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DisableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// DisableScanner is a paid mutator transaction binding the contract method 0x59238297.
//
// Solidity: function disableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) DisableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.DisableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// EnableScanner is a paid mutator transaction binding the contract method 0x4629f427.
//
// Solidity: function enableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) EnableScanner(opts *bind.TransactOpts, scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "enableScanner", scannerId, permission)
}

// EnableScanner is a paid mutator transaction binding the contract method 0x4629f427.
//
// Solidity: function enableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistrySession) EnableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.EnableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// EnableScanner is a paid mutator transaction binding the contract method 0x4629f427.
//
// Solidity: function enableScanner(uint256 scannerId, uint8 permission) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) EnableScanner(scannerId *big.Int, permission uint8) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.EnableScanner(&_ScannerRegistry.TransactOpts, scannerId, permission)
}

// Initialize is a paid mutator transaction binding the contract method 0x90657147.
//
// Solidity: function initialize(address __manager, string __name, string __symbol) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) Initialize(opts *bind.TransactOpts, __manager common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "initialize", __manager, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x90657147.
//
// Solidity: function initialize(address __manager, string __name, string __symbol) returns()
func (_ScannerRegistry *ScannerRegistrySession) Initialize(__manager common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Initialize(&_ScannerRegistry.TransactOpts, __manager, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x90657147.
//
// Solidity: function initialize(address __manager, string __name, string __symbol) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) Initialize(__manager common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Initialize(&_ScannerRegistry.TransactOpts, __manager, __name, __symbol)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ScannerRegistry *ScannerRegistryTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ScannerRegistry *ScannerRegistrySession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Multicall(&_ScannerRegistry.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_ScannerRegistry *ScannerRegistryTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.Multicall(&_ScannerRegistry.TransactOpts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistrySession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ScannerRegistry *ScannerRegistrySession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom0(&_ScannerRegistry.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SafeTransferFrom0(&_ScannerRegistry.TransactOpts, from, to, tokenId, data)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetAccessManager(opts *bind.TransactOpts, newManager common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setAccessManager", newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetAccessManager(&_ScannerRegistry.TransactOpts, newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetAccessManager(&_ScannerRegistry.TransactOpts, newManager)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetApprovalForAll(&_ScannerRegistry.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetApprovalForAll(&_ScannerRegistry.TransactOpts, operator, approved)
}

// SetMigrationPrefrence is a paid mutator transaction binding the contract method 0xec6aa8e9.
//
// Solidity: function setMigrationPrefrence(uint256 scannerId, bool isOut) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetMigrationPrefrence(opts *bind.TransactOpts, scannerId *big.Int, isOut bool) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setMigrationPrefrence", scannerId, isOut)
}

// SetMigrationPrefrence is a paid mutator transaction binding the contract method 0xec6aa8e9.
//
// Solidity: function setMigrationPrefrence(uint256 scannerId, bool isOut) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetMigrationPrefrence(scannerId *big.Int, isOut bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetMigrationPrefrence(&_ScannerRegistry.TransactOpts, scannerId, isOut)
}

// SetMigrationPrefrence is a paid mutator transaction binding the contract method 0xec6aa8e9.
//
// Solidity: function setMigrationPrefrence(uint256 scannerId, bool isOut) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetMigrationPrefrence(scannerId *big.Int, isOut bool) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetMigrationPrefrence(&_ScannerRegistry.TransactOpts, scannerId, isOut)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetName(opts *bind.TransactOpts, ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setName", ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetName(&_ScannerRegistry.TransactOpts, ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetName(&_ScannerRegistry.TransactOpts, ensRegistry, ensName)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xa9032e7b.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold, uint256 chainId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetStakeThreshold(opts *bind.TransactOpts, newStakeThreshold IStakeSubjectStakeThreshold, chainId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setStakeThreshold", newStakeThreshold, chainId)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xa9032e7b.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold, uint256 chainId) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold, chainId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetStakeThreshold(&_ScannerRegistry.TransactOpts, newStakeThreshold, chainId)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xa9032e7b.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold, uint256 chainId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold, chainId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetStakeThreshold(&_ScannerRegistry.TransactOpts, newStakeThreshold, chainId)
}

// SetSubjectHandler is a paid mutator transaction binding the contract method 0x44014b6b.
//
// Solidity: function setSubjectHandler(address subjectGateway) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) SetSubjectHandler(opts *bind.TransactOpts, subjectGateway common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "setSubjectHandler", subjectGateway)
}

// SetSubjectHandler is a paid mutator transaction binding the contract method 0x44014b6b.
//
// Solidity: function setSubjectHandler(address subjectGateway) returns()
func (_ScannerRegistry *ScannerRegistrySession) SetSubjectHandler(subjectGateway common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetSubjectHandler(&_ScannerRegistry.TransactOpts, subjectGateway)
}

// SetSubjectHandler is a paid mutator transaction binding the contract method 0x44014b6b.
//
// Solidity: function setSubjectHandler(address subjectGateway) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) SetSubjectHandler(subjectGateway common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.SetSubjectHandler(&_ScannerRegistry.TransactOpts, subjectGateway)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistrySession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.TransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.TransferFrom(&_ScannerRegistry.TransactOpts, from, to, tokenId)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ScannerRegistry *ScannerRegistryTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ScannerRegistry *ScannerRegistrySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeTo(&_ScannerRegistry.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeTo(&_ScannerRegistry.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ScannerRegistry *ScannerRegistryTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ScannerRegistry *ScannerRegistrySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeToAndCall(&_ScannerRegistry.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_ScannerRegistry *ScannerRegistryTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _ScannerRegistry.Contract.UpgradeToAndCall(&_ScannerRegistry.TransactOpts, newImplementation, data)
}

// ScannerRegistryAccessManagerUpdatedIterator is returned from FilterAccessManagerUpdated and is used to iterate over the raw logs and unpacked data for AccessManagerUpdated events raised by the ScannerRegistry contract.
type ScannerRegistryAccessManagerUpdatedIterator struct {
	Event *ScannerRegistryAccessManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryAccessManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryAccessManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryAccessManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryAccessManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryAccessManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryAccessManagerUpdated represents a AccessManagerUpdated event raised by the ScannerRegistry contract.
type ScannerRegistryAccessManagerUpdated struct {
	NewAddressManager common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAccessManagerUpdated is a free log retrieval operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterAccessManagerUpdated(opts *bind.FilterOpts, newAddressManager []common.Address) (*ScannerRegistryAccessManagerUpdatedIterator, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryAccessManagerUpdatedIterator{contract: _ScannerRegistry.contract, event: "AccessManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchAccessManagerUpdated is a free log subscription operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchAccessManagerUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistryAccessManagerUpdated, newAddressManager []common.Address) (event.Subscription, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryAccessManagerUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessManagerUpdated is a log parse operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseAccessManagerUpdated(log types.Log) (*ScannerRegistryAccessManagerUpdated, error) {
	event := new(ScannerRegistryAccessManagerUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the ScannerRegistry contract.
type ScannerRegistryAdminChangedIterator struct {
	Event *ScannerRegistryAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryAdminChanged represents a AdminChanged event raised by the ScannerRegistry contract.
type ScannerRegistryAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*ScannerRegistryAdminChangedIterator, error) {

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryAdminChangedIterator{contract: _ScannerRegistry.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *ScannerRegistryAdminChanged) (event.Subscription, error) {

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryAdminChanged)
				if err := _ScannerRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseAdminChanged(log types.Log) (*ScannerRegistryAdminChanged, error) {
	event := new(ScannerRegistryAdminChanged)
	if err := _ScannerRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ScannerRegistry contract.
type ScannerRegistryApprovalIterator struct {
	Event *ScannerRegistryApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryApproval represents a Approval event raised by the ScannerRegistry contract.
type ScannerRegistryApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*ScannerRegistryApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryApprovalIterator{contract: _ScannerRegistry.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ScannerRegistryApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryApproval)
				if err := _ScannerRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseApproval(log types.Log) (*ScannerRegistryApproval, error) {
	event := new(ScannerRegistryApproval)
	if err := _ScannerRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the ScannerRegistry contract.
type ScannerRegistryApprovalForAllIterator struct {
	Event *ScannerRegistryApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryApprovalForAll represents a ApprovalForAll event raised by the ScannerRegistry contract.
type ScannerRegistryApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*ScannerRegistryApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryApprovalForAllIterator{contract: _ScannerRegistry.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *ScannerRegistryApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryApprovalForAll)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseApprovalForAll(log types.Log) (*ScannerRegistryApprovalForAll, error) {
	event := new(ScannerRegistryApprovalForAll)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the ScannerRegistry contract.
type ScannerRegistryBeaconUpgradedIterator struct {
	Event *ScannerRegistryBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryBeaconUpgraded represents a BeaconUpgraded event raised by the ScannerRegistry contract.
type ScannerRegistryBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*ScannerRegistryBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryBeaconUpgradedIterator{contract: _ScannerRegistry.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *ScannerRegistryBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryBeaconUpgraded)
				if err := _ScannerRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseBeaconUpgraded(log types.Log) (*ScannerRegistryBeaconUpgraded, error) {
	event := new(ScannerRegistryBeaconUpgraded)
	if err := _ScannerRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryConfiguredMigrationIterator is returned from FilterConfiguredMigration and is used to iterate over the raw logs and unpacked data for ConfiguredMigration events raised by the ScannerRegistry contract.
type ScannerRegistryConfiguredMigrationIterator struct {
	Event *ScannerRegistryConfiguredMigration // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryConfiguredMigrationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryConfiguredMigration)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryConfiguredMigration)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryConfiguredMigrationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryConfiguredMigrationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryConfiguredMigration represents a ConfiguredMigration event raised by the ScannerRegistry contract.
type ScannerRegistryConfiguredMigration struct {
	SunsettingTime      *big.Int
	ScannerPoolRegistry common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterConfiguredMigration is a free log retrieval operation binding the contract event 0xdf229224425c8db50e92e3ad3fdf806d155ea3d6cbdaac5ede11188827d7c5a4.
//
// Solidity: event ConfiguredMigration(uint256 sunsettingTime, address scannerPoolRegistry)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterConfiguredMigration(opts *bind.FilterOpts) (*ScannerRegistryConfiguredMigrationIterator, error) {

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ConfiguredMigration")
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryConfiguredMigrationIterator{contract: _ScannerRegistry.contract, event: "ConfiguredMigration", logs: logs, sub: sub}, nil
}

// WatchConfiguredMigration is a free log subscription operation binding the contract event 0xdf229224425c8db50e92e3ad3fdf806d155ea3d6cbdaac5ede11188827d7c5a4.
//
// Solidity: event ConfiguredMigration(uint256 sunsettingTime, address scannerPoolRegistry)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchConfiguredMigration(opts *bind.WatchOpts, sink chan<- *ScannerRegistryConfiguredMigration) (event.Subscription, error) {

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ConfiguredMigration")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryConfiguredMigration)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ConfiguredMigration", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseConfiguredMigration is a log parse operation binding the contract event 0xdf229224425c8db50e92e3ad3fdf806d155ea3d6cbdaac5ede11188827d7c5a4.
//
// Solidity: event ConfiguredMigration(uint256 sunsettingTime, address scannerPoolRegistry)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseConfiguredMigration(log types.Log) (*ScannerRegistryConfiguredMigration, error) {
	event := new(ScannerRegistryConfiguredMigration)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ConfiguredMigration", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryDeregisteredScannerIterator is returned from FilterDeregisteredScanner and is used to iterate over the raw logs and unpacked data for DeregisteredScanner events raised by the ScannerRegistry contract.
type ScannerRegistryDeregisteredScannerIterator struct {
	Event *ScannerRegistryDeregisteredScanner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryDeregisteredScannerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryDeregisteredScanner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryDeregisteredScanner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryDeregisteredScannerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryDeregisteredScannerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryDeregisteredScanner represents a DeregisteredScanner event raised by the ScannerRegistry contract.
type ScannerRegistryDeregisteredScanner struct {
	ScannerId *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterDeregisteredScanner is a free log retrieval operation binding the contract event 0x9a5580f0db5f4bd3ad8e8bc7d501f53e457db9d330e8e3ce873d1d05a932d962.
//
// Solidity: event DeregisteredScanner(uint256 scannerId)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterDeregisteredScanner(opts *bind.FilterOpts) (*ScannerRegistryDeregisteredScannerIterator, error) {

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "DeregisteredScanner")
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryDeregisteredScannerIterator{contract: _ScannerRegistry.contract, event: "DeregisteredScanner", logs: logs, sub: sub}, nil
}

// WatchDeregisteredScanner is a free log subscription operation binding the contract event 0x9a5580f0db5f4bd3ad8e8bc7d501f53e457db9d330e8e3ce873d1d05a932d962.
//
// Solidity: event DeregisteredScanner(uint256 scannerId)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchDeregisteredScanner(opts *bind.WatchOpts, sink chan<- *ScannerRegistryDeregisteredScanner) (event.Subscription, error) {

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "DeregisteredScanner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryDeregisteredScanner)
				if err := _ScannerRegistry.contract.UnpackLog(event, "DeregisteredScanner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDeregisteredScanner is a log parse operation binding the contract event 0x9a5580f0db5f4bd3ad8e8bc7d501f53e457db9d330e8e3ce873d1d05a932d962.
//
// Solidity: event DeregisteredScanner(uint256 scannerId)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseDeregisteredScanner(log types.Log) (*ScannerRegistryDeregisteredScanner, error) {
	event := new(ScannerRegistryDeregisteredScanner)
	if err := _ScannerRegistry.contract.UnpackLog(event, "DeregisteredScanner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ScannerRegistry contract.
type ScannerRegistryInitializedIterator struct {
	Event *ScannerRegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryInitialized represents a Initialized event raised by the ScannerRegistry contract.
type ScannerRegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*ScannerRegistryInitializedIterator, error) {

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryInitializedIterator{contract: _ScannerRegistry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ScannerRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryInitialized)
				if err := _ScannerRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseInitialized(log types.Log) (*ScannerRegistryInitialized, error) {
	event := new(ScannerRegistryInitialized)
	if err := _ScannerRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryManagerEnabledIterator is returned from FilterManagerEnabled and is used to iterate over the raw logs and unpacked data for ManagerEnabled events raised by the ScannerRegistry contract.
type ScannerRegistryManagerEnabledIterator struct {
	Event *ScannerRegistryManagerEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryManagerEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryManagerEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryManagerEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryManagerEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryManagerEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryManagerEnabled represents a ManagerEnabled event raised by the ScannerRegistry contract.
type ScannerRegistryManagerEnabled struct {
	ScannerId *big.Int
	Manager   common.Address
	Enabled   bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterManagerEnabled is a free log retrieval operation binding the contract event 0x538b6537a6fe8f0deae9f3b86ad1924d5e5b3d5a683055276b2824f918be043e.
//
// Solidity: event ManagerEnabled(uint256 indexed scannerId, address indexed manager, bool enabled)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterManagerEnabled(opts *bind.FilterOpts, scannerId []*big.Int, manager []common.Address) (*ScannerRegistryManagerEnabledIterator, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var managerRule []interface{}
	for _, managerItem := range manager {
		managerRule = append(managerRule, managerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ManagerEnabled", scannerIdRule, managerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryManagerEnabledIterator{contract: _ScannerRegistry.contract, event: "ManagerEnabled", logs: logs, sub: sub}, nil
}

// WatchManagerEnabled is a free log subscription operation binding the contract event 0x538b6537a6fe8f0deae9f3b86ad1924d5e5b3d5a683055276b2824f918be043e.
//
// Solidity: event ManagerEnabled(uint256 indexed scannerId, address indexed manager, bool enabled)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchManagerEnabled(opts *bind.WatchOpts, sink chan<- *ScannerRegistryManagerEnabled, scannerId []*big.Int, manager []common.Address) (event.Subscription, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var managerRule []interface{}
	for _, managerItem := range manager {
		managerRule = append(managerRule, managerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ManagerEnabled", scannerIdRule, managerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryManagerEnabled)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ManagerEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseManagerEnabled is a log parse operation binding the contract event 0x538b6537a6fe8f0deae9f3b86ad1924d5e5b3d5a683055276b2824f918be043e.
//
// Solidity: event ManagerEnabled(uint256 indexed scannerId, address indexed manager, bool enabled)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseManagerEnabled(log types.Log) (*ScannerRegistryManagerEnabled, error) {
	event := new(ScannerRegistryManagerEnabled)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ManagerEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryRouterUpdatedIterator is returned from FilterRouterUpdated and is used to iterate over the raw logs and unpacked data for RouterUpdated events raised by the ScannerRegistry contract.
type ScannerRegistryRouterUpdatedIterator struct {
	Event *ScannerRegistryRouterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryRouterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryRouterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryRouterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryRouterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryRouterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryRouterUpdated represents a RouterUpdated event raised by the ScannerRegistry contract.
type ScannerRegistryRouterUpdated struct {
	Router common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRouterUpdated is a free log retrieval operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterRouterUpdated(opts *bind.FilterOpts, router []common.Address) (*ScannerRegistryRouterUpdatedIterator, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryRouterUpdatedIterator{contract: _ScannerRegistry.contract, event: "RouterUpdated", logs: logs, sub: sub}, nil
}

// WatchRouterUpdated is a free log subscription operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchRouterUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistryRouterUpdated, router []common.Address) (event.Subscription, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryRouterUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRouterUpdated is a log parse operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseRouterUpdated(log types.Log) (*ScannerRegistryRouterUpdated, error) {
	event := new(ScannerRegistryRouterUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryScannerEnabledIterator is returned from FilterScannerEnabled and is used to iterate over the raw logs and unpacked data for ScannerEnabled events raised by the ScannerRegistry contract.
type ScannerRegistryScannerEnabledIterator struct {
	Event *ScannerRegistryScannerEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryScannerEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryScannerEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryScannerEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryScannerEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryScannerEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryScannerEnabled represents a ScannerEnabled event raised by the ScannerRegistry contract.
type ScannerRegistryScannerEnabled struct {
	ScannerId  *big.Int
	Enabled    bool
	Permission uint8
	Value      bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterScannerEnabled is a free log retrieval operation binding the contract event 0xcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d4.
//
// Solidity: event ScannerEnabled(uint256 indexed scannerId, bool indexed enabled, uint8 permission, bool value)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterScannerEnabled(opts *bind.FilterOpts, scannerId []*big.Int, enabled []bool) (*ScannerRegistryScannerEnabledIterator, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ScannerEnabled", scannerIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryScannerEnabledIterator{contract: _ScannerRegistry.contract, event: "ScannerEnabled", logs: logs, sub: sub}, nil
}

// WatchScannerEnabled is a free log subscription operation binding the contract event 0xcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d4.
//
// Solidity: event ScannerEnabled(uint256 indexed scannerId, bool indexed enabled, uint8 permission, bool value)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchScannerEnabled(opts *bind.WatchOpts, sink chan<- *ScannerRegistryScannerEnabled, scannerId []*big.Int, enabled []bool) (event.Subscription, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ScannerEnabled", scannerIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryScannerEnabled)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScannerEnabled is a log parse operation binding the contract event 0xcde09e0ec4a155a87ef3eb8c971163d71fa1a87d4916cebef6ae4c9d296b25d4.
//
// Solidity: event ScannerEnabled(uint256 indexed scannerId, bool indexed enabled, uint8 permission, bool value)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseScannerEnabled(log types.Log) (*ScannerRegistryScannerEnabled, error) {
	event := new(ScannerRegistryScannerEnabled)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryScannerUpdatedIterator is returned from FilterScannerUpdated and is used to iterate over the raw logs and unpacked data for ScannerUpdated events raised by the ScannerRegistry contract.
type ScannerRegistryScannerUpdatedIterator struct {
	Event *ScannerRegistryScannerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryScannerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryScannerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryScannerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryScannerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryScannerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryScannerUpdated represents a ScannerUpdated event raised by the ScannerRegistry contract.
type ScannerRegistryScannerUpdated struct {
	ScannerId *big.Int
	ChainId   *big.Int
	Metadata  string
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterScannerUpdated is a free log retrieval operation binding the contract event 0x72d55569a8bd2d7bfb37627de4db16b8967136cfd50c423227036b24055e440d.
//
// Solidity: event ScannerUpdated(uint256 indexed scannerId, uint256 indexed chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterScannerUpdated(opts *bind.FilterOpts, scannerId []*big.Int, chainId []*big.Int) (*ScannerRegistryScannerUpdatedIterator, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "ScannerUpdated", scannerIdRule, chainIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryScannerUpdatedIterator{contract: _ScannerRegistry.contract, event: "ScannerUpdated", logs: logs, sub: sub}, nil
}

// WatchScannerUpdated is a free log subscription operation binding the contract event 0x72d55569a8bd2d7bfb37627de4db16b8967136cfd50c423227036b24055e440d.
//
// Solidity: event ScannerUpdated(uint256 indexed scannerId, uint256 indexed chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchScannerUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistryScannerUpdated, scannerId []*big.Int, chainId []*big.Int) (event.Subscription, error) {

	var scannerIdRule []interface{}
	for _, scannerIdItem := range scannerId {
		scannerIdRule = append(scannerIdRule, scannerIdItem)
	}
	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "ScannerUpdated", scannerIdRule, chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryScannerUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseScannerUpdated is a log parse operation binding the contract event 0x72d55569a8bd2d7bfb37627de4db16b8967136cfd50c423227036b24055e440d.
//
// Solidity: event ScannerUpdated(uint256 indexed scannerId, uint256 indexed chainId, string metadata)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseScannerUpdated(log types.Log) (*ScannerRegistryScannerUpdated, error) {
	event := new(ScannerRegistryScannerUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "ScannerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryStakeThresholdChangedIterator is returned from FilterStakeThresholdChanged and is used to iterate over the raw logs and unpacked data for StakeThresholdChanged events raised by the ScannerRegistry contract.
type ScannerRegistryStakeThresholdChangedIterator struct {
	Event *ScannerRegistryStakeThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryStakeThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryStakeThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryStakeThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryStakeThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryStakeThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryStakeThresholdChanged represents a StakeThresholdChanged event raised by the ScannerRegistry contract.
type ScannerRegistryStakeThresholdChanged struct {
	ChainId   *big.Int
	Min       *big.Int
	Max       *big.Int
	Activated bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStakeThresholdChanged is a free log retrieval operation binding the contract event 0x52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def.
//
// Solidity: event StakeThresholdChanged(uint256 indexed chainId, uint256 min, uint256 max, bool activated)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterStakeThresholdChanged(opts *bind.FilterOpts, chainId []*big.Int) (*ScannerRegistryStakeThresholdChangedIterator, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "StakeThresholdChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryStakeThresholdChangedIterator{contract: _ScannerRegistry.contract, event: "StakeThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchStakeThresholdChanged is a free log subscription operation binding the contract event 0x52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def.
//
// Solidity: event StakeThresholdChanged(uint256 indexed chainId, uint256 min, uint256 max, bool activated)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchStakeThresholdChanged(opts *bind.WatchOpts, sink chan<- *ScannerRegistryStakeThresholdChanged, chainId []*big.Int) (event.Subscription, error) {

	var chainIdRule []interface{}
	for _, chainIdItem := range chainId {
		chainIdRule = append(chainIdRule, chainIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "StakeThresholdChanged", chainIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryStakeThresholdChanged)
				if err := _ScannerRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeThresholdChanged is a log parse operation binding the contract event 0x52921a1904e2f9b3b094f083bd0188a09786c6950b893def59533bc08e341def.
//
// Solidity: event StakeThresholdChanged(uint256 indexed chainId, uint256 min, uint256 max, bool activated)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseStakeThresholdChanged(log types.Log) (*ScannerRegistryStakeThresholdChanged, error) {
	event := new(ScannerRegistryStakeThresholdChanged)
	if err := _ScannerRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistrySubjectHandlerUpdatedIterator is returned from FilterSubjectHandlerUpdated and is used to iterate over the raw logs and unpacked data for SubjectHandlerUpdated events raised by the ScannerRegistry contract.
type ScannerRegistrySubjectHandlerUpdatedIterator struct {
	Event *ScannerRegistrySubjectHandlerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistrySubjectHandlerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistrySubjectHandlerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistrySubjectHandlerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistrySubjectHandlerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistrySubjectHandlerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistrySubjectHandlerUpdated represents a SubjectHandlerUpdated event raised by the ScannerRegistry contract.
type ScannerRegistrySubjectHandlerUpdated struct {
	NewHandler common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterSubjectHandlerUpdated is a free log retrieval operation binding the contract event 0x16d72e484786227d7b6dd05e079be9ff9904a81a0a9ec36fc346b20f8c47aff0.
//
// Solidity: event SubjectHandlerUpdated(address indexed newHandler)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterSubjectHandlerUpdated(opts *bind.FilterOpts, newHandler []common.Address) (*ScannerRegistrySubjectHandlerUpdatedIterator, error) {

	var newHandlerRule []interface{}
	for _, newHandlerItem := range newHandler {
		newHandlerRule = append(newHandlerRule, newHandlerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "SubjectHandlerUpdated", newHandlerRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistrySubjectHandlerUpdatedIterator{contract: _ScannerRegistry.contract, event: "SubjectHandlerUpdated", logs: logs, sub: sub}, nil
}

// WatchSubjectHandlerUpdated is a free log subscription operation binding the contract event 0x16d72e484786227d7b6dd05e079be9ff9904a81a0a9ec36fc346b20f8c47aff0.
//
// Solidity: event SubjectHandlerUpdated(address indexed newHandler)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchSubjectHandlerUpdated(opts *bind.WatchOpts, sink chan<- *ScannerRegistrySubjectHandlerUpdated, newHandler []common.Address) (event.Subscription, error) {

	var newHandlerRule []interface{}
	for _, newHandlerItem := range newHandler {
		newHandlerRule = append(newHandlerRule, newHandlerItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "SubjectHandlerUpdated", newHandlerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistrySubjectHandlerUpdated)
				if err := _ScannerRegistry.contract.UnpackLog(event, "SubjectHandlerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSubjectHandlerUpdated is a log parse operation binding the contract event 0x16d72e484786227d7b6dd05e079be9ff9904a81a0a9ec36fc346b20f8c47aff0.
//
// Solidity: event SubjectHandlerUpdated(address indexed newHandler)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseSubjectHandlerUpdated(log types.Log) (*ScannerRegistrySubjectHandlerUpdated, error) {
	event := new(ScannerRegistrySubjectHandlerUpdated)
	if err := _ScannerRegistry.contract.UnpackLog(event, "SubjectHandlerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ScannerRegistry contract.
type ScannerRegistryTransferIterator struct {
	Event *ScannerRegistryTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryTransfer represents a Transfer event raised by the ScannerRegistry contract.
type ScannerRegistryTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*ScannerRegistryTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryTransferIterator{contract: _ScannerRegistry.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ScannerRegistryTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryTransfer)
				if err := _ScannerRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseTransfer(log types.Log) (*ScannerRegistryTransfer, error) {
	event := new(ScannerRegistryTransfer)
	if err := _ScannerRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ScannerRegistryUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the ScannerRegistry contract.
type ScannerRegistryUpgradedIterator struct {
	Event *ScannerRegistryUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ScannerRegistryUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ScannerRegistryUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ScannerRegistryUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ScannerRegistryUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ScannerRegistryUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ScannerRegistryUpgraded represents a Upgraded event raised by the ScannerRegistry contract.
type ScannerRegistryUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ScannerRegistry *ScannerRegistryFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*ScannerRegistryUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ScannerRegistry.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &ScannerRegistryUpgradedIterator{contract: _ScannerRegistry.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ScannerRegistry *ScannerRegistryFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *ScannerRegistryUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _ScannerRegistry.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ScannerRegistryUpgraded)
				if err := _ScannerRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_ScannerRegistry *ScannerRegistryFilterer) ParseUpgraded(log types.Log) (*ScannerRegistryUpgraded, error) {
	event := new(ScannerRegistryUpgraded)
	if err := _ScannerRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
