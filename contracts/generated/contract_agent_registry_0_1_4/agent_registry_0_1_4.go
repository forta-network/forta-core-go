// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract_agent_registry_0_1_4

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IStakeSubjectStakeThreshold is an auto generated low-level Go binding around an user-defined struct.
type IStakeSubjectStakeThreshold struct {
	Min       *big.Int
	Max       *big.Int
	Activated bool
}

// AgentRegistryMetaData contains all meta data concerning the AgentRegistry contract.
var AgentRegistryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddressManager\",\"type\":\"address\"}],\"name\":\"AccessManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"}],\"name\":\"AgentCommitted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"enumAgentRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"AgentEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"AgentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"FrontRunningDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"RouterUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newstakeController\",\"type\":\"address\"}],\"name\":\"StakeControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"name\":\"StakeThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"createAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"enumAgentRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"disableAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"enumAgentRegistryEnable.Permission\",\"name\":\"permission\",\"type\":\"uint8\"}],\"name\":\"enableAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frontRunningDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agentVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgentByChainAndIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgentByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getAgentCountByChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getAgentState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"agentVersion\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"disabledFlags\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"}],\"name\":\"getCommitTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getDisableFlags\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeController\",\"outputs\":[{\"internalType\":\"contractIStakeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getStakeThreshold\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"__manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"__router\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"__name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"__symbol\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"isEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"subject\",\"type\":\"uint256\"}],\"name\":\"isStakedOverMin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commit\",\"type\":\"bytes32\"}],\"name\":\"prepareAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"setAccessManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"name\":\"setFrontRunningDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ensRegistry\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"ensName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakeController\",\"type\":\"address\"}],\"name\":\"setStakeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"activated\",\"type\":\"bool\"}],\"internalType\":\"structIStakeSubject.StakeThreshold\",\"name\":\"newStakeThreshold\",\"type\":\"tuple\"}],\"name\":\"setStakeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"chainIds\",\"type\":\"uint256[]\"}],\"name\":\"updateAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523060a0523480156200001557600080fd5b5060405162004a3b38038062004a3b833981016040819052620000389162000180565b6001600160a01b038116608052600054610100900460ff1615808015620000665750600054600160ff909116105b8062000096575062000083306200017160201b62001cce1760201c565b15801562000096575060005460ff166001145b620000fe5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff19166001179055801562000122576000805461ff0019166101001790555b801562000169576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050620001b2565b6001600160a01b03163b151590565b6000602082840312156200019357600080fd5b81516001600160a01b0381168114620001ab57600080fd5b9392505050565b60805160a051614840620001fb60003960008181610f5801528181610f980152818161105301528181611093015261112201526000818161051e01526137fe01526148406000f3fe6080604052600436106102725760003560e01c80637935d5b41161014f578063ac9650d8116100c1578063c783034c1161007a578063c783034c14610818578063c87b56dd14610838578063c958080414610858578063d0c6464b14610878578063e985e9c514610898578063e9965e44146108e257600080fd5b8063ac9650d814610755578063aebb515014610782578063b7b57b27146107a1578063b88d4fde146107c1578063c02674c5146107e1578063c0d78655146107f857600080fd5b806395d89b411161011357806395d89b41146106a05780639a9d67bd146106b5578063a22cb465146106d5578063a8439d98146106f5578063aa9ac6c614610715578063ac388ff51461073557600080fd5b80637935d5b4146105f2578063871016e11461061257806389432d401461064b5780638eea276f1461066b57806391cab63e1461068b57600080fd5b80633659cfe6116101e857806355d372fb116101ac57806355d372fb146104e1578063572b6c0514610501578063579a69881461054e578063624ade3c1461056e5780636352211e146105b257806370a08231146105d257600080fd5b80633659cfe61461044857806342842e0e146104685780634f1ef2861461048857806352d1902d1461049b57806354fd4d50146104b057600080fd5b80631e4def831161023a5780631e4def83146103645780632016a0d21461039757806321095d65146103b757806323b872dd146103d75780632de5aaf7146103f75780633121db1c1461042857600080fd5b806301ffc9a71461027757806306fdde03146102ac578063081812fc146102ce578063095ea7b314610306578063143527df14610328575b600080fd5b34801561028357600080fd5b50610297610292366004613946565b610902565b60405190151581526020015b60405180910390f35b3480156102b857600080fd5b506102c1610954565b6040516102a391906139bb565b3480156102da57600080fd5b506102ee6102e93660046139ce565b6109e7565b6040516001600160a01b0390911681526020016102a3565b34801561031257600080fd5b506103266103213660046139fc565b610a0f565b005b34801561033457600080fd5b506103566103433660046139ce565b600090815261012d602052604090205490565b6040519081526020016102a3565b34801561037057600080fd5b5061038461037f3660046139ce565b610b3c565b6040516102a39796959493929190613a63565b3480156103a357600080fd5b506103266103b2366004613b03565b610b9c565b3480156103c357600080fd5b506103266103d2366004613b97565b610cf1565b3480156103e357600080fd5b506103266103f2366004613bcb565b610d5d565b34801561040357600080fd5b506104176104123660046139ce565b610d95565b6040516102a3959493929190613c0c565b34801561043457600080fd5b50610326610443366004613c59565b610ed2565b34801561045457600080fd5b50610326610463366004613cad565b610f4d565b34801561047457600080fd5b50610326610483366004613bcb565b61102d565b610326610496366004613d6c565b611048565b3480156104a757600080fd5b50610356611115565b3480156104bc57600080fd5b506102c1604051806040016040528060058152602001640c0b8c4b8d60da1b81525081565b3480156104ed57600080fd5b506103266104fc3660046139ce565b6111c8565b34801561050d57600080fd5b5061029761051c366004613cad565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b34801561055a57600080fd5b506102976105693660046139ce565b611240565b34801561057a57600080fd5b5061058e6105893660046139ce565b61124b565b604080518251815260208084015190820152918101511515908201526060016102a3565b3480156105be57600080fd5b506102ee6105cd3660046139ce565b61129f565b3480156105de57600080fd5b506103566105ed366004613cad565b611300565b3480156105fe57600080fd5b5061032661060d366004613dff565b611387565b34801561061e57600080fd5b5061035661062d3660046139ce565b60009081526101c46020908152604080832083805290915290205490565b34801561065757600080fd5b506103566106663660046139ce565b6115ce565b34801561067757600080fd5b506103566106863660046139ce565b6115dc565b34801561069757600080fd5b506103566115f4565b3480156106ac57600080fd5b506102c1611606565b3480156106c157600080fd5b506103266106d0366004613cad565b611616565b3480156106e157600080fd5b506103266106f0366004613e86565b61163a565b34801561070157600080fd5b506103266107103660046139ce565b61164c565b34801561072157600080fd5b50610326610730366004613eb4565b611655565b34801561074157600080fd5b50610356610750366004613f2d565b61184f565b34801561076157600080fd5b50610775610770366004613f4f565b61186f565b6040516102a39190613f90565b34801561078e57600080fd5b50610192546001600160a01b03166102ee565b3480156107ad57600080fd5b506102976107bc3660046139ce565b611963565b3480156107cd57600080fd5b506103266107dc366004613ff2565b61196e565b3480156107ed57600080fd5b5061035661019a5481565b34801561080457600080fd5b50610326610813366004613cad565b6119a7565b34801561082457600080fd5b506102976108333660046139ce565b611a50565b34801561084457600080fd5b506102c16108533660046139ce565b611a8f565b34801561086457600080fd5b50610326610873366004613cad565b611b02565b34801561088457600080fd5b50610326610893366004613b97565b611bc0565b3480156108a457600080fd5b506102976108b336600461405d565b6001600160a01b0391821660009081526101656020908152604080832093909416825291909152205460ff1690565b3480156108ee57600080fd5b506103266108fd36600461408b565b611c0b565b60006001600160e01b031982166380ac58cd60e01b148061093357506001600160e01b03198216635b5e139f60e01b145b8061094e57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606101608054610964906140ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610990906140ec565b80156109dd5780601f106109b2576101008083540402835291602001916109dd565b820191906000526020600020905b8154815290600101906020018083116109c057829003601f168201915b5050505050905090565b60006109f282611cdd565b50600090815261016460205260409020546001600160a01b031690565b6000610a1a8261129f565b9050806001600160a01b0316836001600160a01b03161415610a8d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b806001600160a01b0316610a9f611d2d565b6001600160a01b03161480610abb5750610abb816108b3611d2d565b610b2d5760405162461bcd60e51b815260206004820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152608401610a84565b610b378383611d37565b505050565b6000806000606080600080610b5088610d95565b939a509198509650945092508686868686610b6a8d611a50565b60008e81526101c460209081526040808320838052909152902054959e949d50929b5090995097509550909350915050565b600054610100900460ff1615808015610bbc5750600054600160ff909116105b80610bd65750303b158015610bd6575060005460ff166001145b610bf25760405162461bcd60e51b8152600401610a8490614127565b6000805460ff191660011790558015610c15576000805461ff0019166101001790555b610c1e87611da6565b610c2786611f00565b610c2f612042565b610ca285858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8901819004810282018101909252878152925087915086908190840183828082843760009201919091525061206b92505050565b8015610ce8576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050565b610cfb828261209c565b610d4d57610d07611d2d565b816002811115610d1957610d19614175565b6040516372fa0ebb60e11b81526001600160a01b03909216600483015260ff16602482015260448101839052606401610a84565b610d5982826000612138565b5050565b610d6e610d68611d2d565b8261214e565b610d8a5760405162461bcd60e51b8152600401610a849061418b565b610b378383836121ce565b60008060006060806000610da88761236d565b90508081610db7576000610dc0565b610dc08861129f565b60008981526101f6602052604090208054600182018054919290916002909101908290610dec906140ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610e18906140ec565b8015610e655780601f10610e3a57610100808354040283529160200191610e65565b820191906000526020600020905b815481529060010190602001808311610e4857829003601f168201915b5050505050915080805480602002602001604051908101604052809291908181526020018280548015610eb757602002820191906000526020600020905b815481526020019060010190808311610ea3575b50505050509050955095509550955095505091939590929450565b7f664245c7af190fec316596e8231f724e8171b1966cfcd124347ac5a66c34f64a610f0481610eff611d2d565b61238b565b610f3c5780610f11611d2d565b6040516301d4003760e61b815260048101929092526001600160a01b03166024820152604401610a84565b610f47848484612410565b50505050565b306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161415610f965760405162461bcd60e51b8152600401610a84906141d9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fdf6000805160206147c4833981519152546001600160a01b031690565b6001600160a01b0316146110055760405162461bcd60e51b8152600401610a8490614225565b61100e81612526565b6040805160008082526020820190925261102a91839190612560565b50565b610b378383836040518060200160405280600081525061196e565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156110915760405162461bcd60e51b8152600401610a84906141d9565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166110da6000805160206147c4833981519152546001600160a01b031690565b6001600160a01b0316146111005760405162461bcd60e51b8152600401610a8490614225565b61110982612526565b610d5982826001612560565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146111b55760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610a84565b506000805160206147c483398151915290565b7f2a32a1662c1214ad9d5a31a0a1cb01ef357b3d1954570b75c128485ad3931dbc6111f581610eff611d2d565b6112025780610f11611d2d565b61019a8290556040518281527ff6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77906020015b60405180910390a15050565b600061094e8261236d565b611271604051806060016040528060008152602001600081526020016000151581525090565b5050604080516060810182526101975481526101985460208201526101995460ff1615159181019190915290565b600081815261016260205260408120546001600160a01b03168061094e5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a84565b60006001600160a01b03821661136a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610a84565b506001600160a01b03166000908152610163602052604090205490565b818180806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250508251151591506113dd905057604051630446493360e01b8152600401610a8490614271565b60015b815181101561145757816113f56001836142a9565b81518110611405576114056142c0565b602002602001015182828151811061141f5761141f6142c0565b6020026020010151116114455760405163237c384f60e01b8152600401610a8490614271565b8061144f816142d6565b9150506113e0565b50868686868686604051602001611473969594939291906142f1565b60408051601f19818403018152918152815160209283012061019a54600082815261012d90945291909220548115806114bf575080158015906114bf5750426114bc8383614352565b11155b6114dc57604051631a74087f60e01b815260040160405180910390fd5b600083815261012d60205260408120556114f6898b6126da565b61153a8a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a915061280f9050565b61157e8a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a915061281b9050565b6115c28a89898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a91506128279050565b50505050505050505050565b600061094e61022883612870565b600081815261022a6020526040812061094e9061287c565b600061160161022861287c565b905090565b60606101618054610964906140ec565b600061162481610eff611d2d565b6116315780610f11611d2d565b610d5982612886565b610d59611645611d2d565b838361291a565b61102a816129eb565b8461165f8161129f565b6001600160a01b0316611670611d2d565b6001600160a01b0316146116b257611686611d2d565b60405163871d7af360e01b81526001600160a01b03909116600482015260248101829052604401610a84565b82828080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050825115159150611708905057604051630446493360e01b8152600401610a8490614271565b60015b815181101561178257816117206001836142a9565b81518110611730576117306142c0565b602002602001015182828151811061174a5761174a6142c0565b6020026020010151116117705760405163237c384f60e01b8152600401610a8490614271565b8061177a816142d6565b91505061170b565b506117c78787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525089925088915061280f9050565b61180b8787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525089925088915061281b9050565b610ce88787878080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508992508891506128279050565b600082815261022a602052604081206118689083612870565b9392505050565b6060816001600160401b0381111561188957611889613cca565b6040519080825280602002602001820160405280156118bc57816020015b60608152602001906001900390816118a75790505b50905060005b8281101561195c5761192c308585848181106118e0576118e06142c0565b90506020028101906118f2919061436a565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612a2d92505050565b82828151811061193e5761193e6142c0565b60200260200101819052508080611954906142d6565b9150506118c2565b5092915050565b600061094e82612a52565b61197f611979611d2d565b8361214e565b61199b5760405162461bcd60e51b8152600401610a849061418b565b610f4784848484612b23565b60006119b581610eff611d2d565b6119c25780610f11611d2d565b6001600160a01b038216611a055760405163eac0d38960e01b81526020600482015260096024820152683732bba937baba32b960b91b6044820152606401610a84565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc8090600090a25050565b6000611a5b82611240565b8015611a7f575060008281526101c460209081526040808320838052909152902054155b801561094e575061094e82612a52565b6060611a9a82611cdd565b6000611ab160408051602081019091526000815290565b90506000815111611ad15760405180602001604052806000815250611868565b80611adb84612b56565b604051602001611aec9291906143b0565b6040516020818303038152906040529392505050565b6000611b1081610eff611d2d565b611b1d5780610f11611d2d565b611b376001600160a01b038316637965db0b60e01b612c53565b611b75576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610a84565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a25050565b611bc982612a52565b611be9576040516316b7494760e01b815260048101839052602401610a84565b611bf3828261209c565b611bff57610d07611d2d565b610d5982826001612138565b7f2a32a1662c1214ad9d5a31a0a1cb01ef357b3d1954570b75c128485ad3931dbc611c3881610eff611d2d565b611c455780610f11611d2d565b8151602083015111611c6a57604051632ca637fd60e21b815260040160405180910390fd5b8151610197819055602080840151610198819055604080860151610199805460ff191691151591821790558151948552928401919091528201527f6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b590606001611234565b6001600160a01b03163b151590565b611ce68161236d565b61102a5760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b6044820152606401610a84565b6000611601612c6f565b60008181526101646020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611d6d8261129f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600054610100900460ff1615808015611dc65750600054600160ff909116105b80611de05750303b158015611de0575060005460ff166001145b611dfc5760405162461bcd60e51b8152600401610a8490614127565b6000805460ff191660011790558015611e1f576000805461ff0019166101001790555b611e396001600160a01b038316637965db0b60e01b612c53565b611e77576040516301a1fdbb60e41b815260206004820152600e60248201526d125058d8d95cdcd0dbdb9d1c9bdb60921b6044820152606401610a84565b603380546001600160a01b0319166001600160a01b0384169081179091556040517fa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c90600090a28015610d59576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611234565b600054610100900460ff1615808015611f205750600054600160ff909116105b80611f3a5750303b158015611f3a575060005460ff166001145b611f565760405162461bcd60e51b8152600401610a8490614127565b6000805460ff191660011790558015611f79576000805461ff0019166101001790555b6001600160a01b038216611fb95760405163eac0d38960e01b81526020600482015260066024820152653937baba32b960d11b6044820152606401610a84565b606580546001600160a01b0319166001600160a01b0384169081179091556040517f7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc8090600090a28015610d59576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001611234565b600054610100900460ff166120695760405162461bcd60e51b8152600401610a84906143df565b565b600054610100900460ff166120925760405162461bcd60e51b8152600401610a84906143df565b610d598282612c79565b6000808260028111156120b1576120b1614175565b14156120ea576120e37f2a32a1662c1214ad9d5a31a0a1cb01ef357b3d1954570b75c128485ad3931dbc610eff611d2d565b905061094e565b60018260028111156120fe576120fe614175565b141561212f5761210d8361129f565b6001600160a01b031661211e611d2d565b6001600160a01b031614905061094e565b50600092915050565b612143838383612cc9565b610b37838383612d35565b60008061215a8361129f565b9050806001600160a01b0316846001600160a01b031614806121a257506001600160a01b038082166000908152610165602090815260408083209388168352929052205460ff165b806121c65750836001600160a01b03166121bb846109e7565b6001600160a01b0316145b949350505050565b826001600160a01b03166121e18261129f565b6001600160a01b0316146122455760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610a84565b6001600160a01b0382166122a75760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a84565b6122b2600082611d37565b6001600160a01b0383166000908152610163602052604081208054600192906122dc9084906142a9565b90915550506001600160a01b03821660009081526101636020526040812080546001929061230b908490614352565b90915550506000818152610162602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600090815261016260205260409020546001600160a01b0316151590565b603354604051632474521560e21b8152600481018490526001600160a01b03838116602483015260009216906391d148549060440160206040518083038186803b1580156123d857600080fd5b505afa1580156123ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611868919061442a565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526001600160a01b038416906302571be39060240160206040518083038186803b15801561246f57600080fd5b505afa158015612483573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124a79190614447565b6001600160a01b031663c47f002783836040518363ffffffff1660e01b81526004016124d4929190614464565b602060405180830381600087803b1580156124ee57600080fd5b505af1158015612502573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f479190614493565b7f189ab7a9244df0848122154315af71fe140f3db0fe014031783b0946b8c9d2e361255381610eff611d2d565b610d595780610f11611d2d565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561259357610b3783612d98565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125cc57600080fd5b505afa9250505080156125fc575060408051601f3d908101601f191682019092526125f991810190614493565b60015b61265f5760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610a84565b6000805160206147c483398151915281146126ce5760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610a84565b50610b37838383612e34565b6001600160a01b0382166127305760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a84565b6127398161236d565b156127865760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a84565b6001600160a01b0382166000908152610163602052604081208054600192906127b0908490614352565b90915550506000818152610162602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b610f4784848484612e59565b610f4784848484613009565b610f478484848460405160240161284194939291906144e2565b60408051601f198184030181529190526020810180516001600160e01b031663ad3dcf3360e01b17905261315b565b600061186883836131ce565b600061094e825490565b6001600160a01b0381166128cf5760405163eac0d38960e01b815260206004820152600f60248201526e39ba30b5b2a1b7b73a3937b63632b960891b6044820152606401610a84565b61019280546001600160a01b0319166001600160a01b0383169081179091556040517fcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f0090600090a250565b816001600160a01b0316836001600160a01b0316141561297c5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a84565b6001600160a01b0383811660008181526101656020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191015b60405180910390a3505050565b600081815261012d602052604090205415612a195760405163012b37c560e21b815260040160405180910390fd5b600090815261012d60205260409020429055565b606061186883836040518060600160405280602781526020016147e4602791396131f8565b600080612a68610192546001600160a01b031690565b6001600160a01b03161415612a7f57506001919050565b61019754610192546001600160a01b031660405163145217e760e31b815260016004820152602481018590526001600160a01b03919091169063a290bf389060440160206040518083038186803b158015612ad957600080fd5b505afa158015612aed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b119190614493565b1015801561094e575061094e8261236d565b612b2e8484846121ce565b612b3a84848484613296565b610f475760405162461bcd60e51b8152600401610a8490614519565b606081612b7a5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612ba45780612b8e816142d6565b9150612b9d9050600a83614581565b9150612b7e565b6000816001600160401b03811115612bbe57612bbe613cca565b6040519080825280601f01601f191660200182016040528015612be8576020820181803683370190505b5090505b84156121c657612bfd6001836142a9565b9150612c0a600a86614595565b612c15906030614352565b60f81b818381518110612c2a57612c2a6142c0565b60200101906001600160f81b031916908160001a905350612c4c600a86614581565b9450612bec565b6000612c5e836133aa565b8015611868575061186883836133dd565b60006116016134bc565b600054610100900460ff16612ca05760405162461bcd60e51b8152600401610a84906143df565b8151612cb49061016090602085019061385d565b508051610b379061016190602084019061385d565b612cf8826002811115612cde57612cde614175565b60008581526101c4602052604090209060ff1683156134c6565b612d0183611a50565b1515837fb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d64184846040516129de9291906145a9565b610b3783836002811115612d4b57612d4b614175565b604051602481019290925260ff166044820152821515606482015260840160408051601f198184030181529190526020810180516001600160e01b0316637dae17cf60e01b17905261315b565b6001600160a01b0381163b612e055760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610a84565b6000805160206147c483398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b612e3d83613515565b600082511180612e4a5750805b15610b3757610f478383613555565b600080612e6586610d95565b945050935050508160001415612e8357612e816102288761360a565b505b6000805b8251821080612e9557508481105b15612fff578251821415612ef257612eec8861022a6000898986612eb8816142d6565b9750818110612ec957612ec96142c0565b90506020020135815260200190815260200160002061360a90919063ffffffff16565b50612e87565b80851415612f4457612eec8861022a60008686612f0e816142d6565b975081518110612f2057612f206142c0565b6020026020010151815260200190815260200160002061361690919063ffffffff16565b858582818110612f5657612f566142c0565b90506020020135838381518110612f6f57612f6f6142c0565b60200260200101511015612f9157612eec8861022a60008686612f0e816142d6565b858582818110612fa357612fa36142c0565b90506020020135838381518110612fbc57612fbc6142c0565b60200260200101511115612fdf57612eec8861022a6000898986612eb8816142d6565b81612fe9816142d6565b9250508080612ff7906142d6565b915050612e87565b5050505050505050565b61301584848484613622565b60008481526101f66020526040808220905161303491600101906145da565b6040805191829003909120855160208088019190912060008181526101f79092529290205490925060ff1615613080576040516313f6180160e31b815260048101829052602401610a84565b60008181526101f7602090815260408083208054600160ff199182168117909255868552828520805490911690558984526101f69092528220546130c391614352565b9050604051806060016040528082815260200187815260200186868080602002602001604051908101604052809392919081815260200183836020028082843760009201829052509390945250508981526101f6602090815260409091208351815583820151805191935061313f92600185019291019061385d565b50604082015180516115c29160028401916020909101906138e1565b6065546001600160a01b03161561102a57606554604051630fe888b160e21b81526001600160a01b0390911690633fa222c49061319c9084906004016139bb565b600060405180830381600087803b1580156131b657600080fd5b505af19250505080156131c7575060015b61102a5750565b60008260000182815481106131e5576131e56142c0565b9060005260206000200154905092915050565b60606001600160a01b0384163b6132215760405162461bcd60e51b8152600401610a8490614676565b600080856001600160a01b03168560405161323c91906146bc565b600060405180830381855af49150503d8060008114613277576040519150601f19603f3d011682016040523d82523d6000602084013e61327c565b606091505b509150915061328c828286613675565b9695505050505050565b60006001600160a01b0384163b1561339f57836001600160a01b031663150b7a026132bf611d2d565b8786866040518563ffffffff1660e01b81526004016132e194939291906146d8565b602060405180830381600087803b1580156132fb57600080fd5b505af192505050801561332b575060408051601f3d908101601f191682019092526133289181019061470b565b60015b613385573d808015613359576040519150601f19603f3d011682016040523d82523d6000602084013e61335e565b606091505b50805161337d5760405162461bcd60e51b8152600401610a8490614519565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506121c6565b506001949350505050565b60006133bd826301ffc9a760e01b6133dd565b801561094e57506133d6826001600160e01b03196133dd565b1592915050565b604080516001600160e01b0319831660248083019190915282518083039091018152604490910182526020810180516001600160e01b03166301ffc9a760e01b179052905160009190829081906001600160a01b03871690617530906134449086906146bc565b6000604051808303818686fa925050503d8060008114613480576040519150601f19603f3d011682016040523d82523d6000602084013e613485565b606091505b50915091506020815110156134a0576000935050505061094e565b81801561328c57508080602001905181019061328c919061442a565b60006116016136ae565b80156134f057600882901c60009081526020849052604090208054600160ff85161b179055505050565b600882901c60009081526020849052604090208054600160ff85161b19169055505050565b61351e81612d98565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606001600160a01b0383163b61357e5760405162461bcd60e51b8152600401610a8490614676565b600080846001600160a01b03168460405161359991906146bc565b600060405180830381855af49150503d80600081146135d4576040519150601f19603f3d011682016040523d82523d6000602084013e6135d9565b606091505b509150915061360182826040518060600160405280602781526020016147e460279139613675565b95945050505050565b600061186883836136b8565b60006118688383613707565b61362a611d2d565b6001600160a01b0316847f334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff685858560405161366793929190614728565b60405180910390a350505050565b60608315613684575081611868565b8251156136945782518084602001fd5b8160405162461bcd60e51b8152600401610a8491906139bb565b60006116016137fa565b60008181526001830160205260408120546136ff5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915561094e565b50600061094e565b600081815260018301602052604081205480156137f057600061372b6001836142a9565b855490915060009061373f906001906142a9565b90508181146137a457600086600001828154811061375f5761375f6142c0565b9060005260206000200154905080876000018481548110613782576137826142c0565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806137b5576137b561474e565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061094e565b600091505061094e565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03163314156138585760003661383b6014826142a9565b61384792369290614764565b6138509161478e565b60601c905090565b503390565b828054613869906140ec565b90600052602060002090601f01602090048101928261388b57600085556138d1565b82601f106138a457805160ff19168380011785556138d1565b828001600101855582156138d1579182015b828111156138d15782518255916020019190600101906138b6565b506138dd92915061391b565b5090565b8280548282559060005260206000209081019282156138d157916020028201828111156138d15782518255916020019190600101906138b6565b5b808211156138dd576000815560010161391c565b6001600160e01b03198116811461102a57600080fd5b60006020828403121561395857600080fd5b813561186881613930565b60005b8381101561397e578181015183820152602001613966565b83811115610f475750506000910152565b600081518084526139a7816020860160208601613963565b601f01601f19169290920160200192915050565b602081526000611868602083018461398f565b6000602082840312156139e057600080fd5b5035919050565b6001600160a01b038116811461102a57600080fd5b60008060408385031215613a0f57600080fd5b8235613a1a816139e7565b946020939093013593505050565b600081518084526020808501945080840160005b83811015613a5857815187529582019590820190600101613a3c565b509495945050505050565b871515815260018060a01b038716602082015285604082015260e060608201526000613a9260e083018761398f565b8281036080840152613aa48187613a28565b94151560a0840152505060c0015295945050505050565b60008083601f840112613acd57600080fd5b5081356001600160401b03811115613ae457600080fd5b602083019150836020828501011115613afc57600080fd5b9250929050565b60008060008060008060808789031215613b1c57600080fd5b8635613b27816139e7565b95506020870135613b37816139e7565b945060408701356001600160401b0380821115613b5357600080fd5b613b5f8a838b01613abb565b90965094506060890135915080821115613b7857600080fd5b50613b8589828a01613abb565b979a9699509497509295939492505050565b60008060408385031215613baa57600080fd5b82359150602083013560038110613bc057600080fd5b809150509250929050565b600080600060608486031215613be057600080fd5b8335613beb816139e7565b92506020840135613bfb816139e7565b929592945050506040919091013590565b851515815260018060a01b038516602082015283604082015260a060608201526000613c3b60a083018561398f565b8281036080840152613c4d8185613a28565b98975050505050505050565b600080600060408486031215613c6e57600080fd5b8335613c79816139e7565b925060208401356001600160401b03811115613c9457600080fd5b613ca086828701613abb565b9497909650939450505050565b600060208284031215613cbf57600080fd5b8135611868816139e7565b634e487b7160e01b600052604160045260246000fd5b600082601f830112613cf157600080fd5b81356001600160401b0380821115613d0b57613d0b613cca565b604051601f8301601f19908116603f01168101908282118183101715613d3357613d33613cca565b81604052838152866020858801011115613d4c57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060408385031215613d7f57600080fd5b8235613d8a816139e7565b915060208301356001600160401b03811115613da557600080fd5b613db185828601613ce0565b9150509250929050565b60008083601f840112613dcd57600080fd5b5081356001600160401b03811115613de457600080fd5b6020830191508360208260051b8501011115613afc57600080fd5b60008060008060008060808789031215613e1857600080fd5b863595506020870135613e2a816139e7565b945060408701356001600160401b0380821115613e4657600080fd5b613e528a838b01613abb565b90965094506060890135915080821115613e6b57600080fd5b50613b8589828a01613dbb565b801515811461102a57600080fd5b60008060408385031215613e9957600080fd5b8235613ea4816139e7565b91506020830135613bc081613e78565b600080600080600060608688031215613ecc57600080fd5b8535945060208601356001600160401b0380821115613eea57600080fd5b613ef689838a01613abb565b90965094506040880135915080821115613f0f57600080fd5b50613f1c88828901613dbb565b969995985093965092949392505050565b60008060408385031215613f4057600080fd5b50508035926020909101359150565b60008060208385031215613f6257600080fd5b82356001600160401b03811115613f7857600080fd5b613f8485828601613dbb565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613fe557603f19888603018452613fd385835161398f565b94509285019290850190600101613fb7565b5092979650505050505050565b6000806000806080858703121561400857600080fd5b8435614013816139e7565b93506020850135614023816139e7565b92506040850135915060608501356001600160401b0381111561404557600080fd5b61405187828801613ce0565b91505092959194509250565b6000806040838503121561407057600080fd5b823561407b816139e7565b91506020830135613bc0816139e7565b60006060828403121561409d57600080fd5b604051606081018181106001600160401b03821117156140bf576140bf613cca565b8060405250823581526020830135602082015260408301356140e081613e78565b60408201529392505050565b600181811c9082168061410057607f821691505b6020821081141561412157634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b6020808252602e908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526d1c881b9bdc88185c1c1c9bdd995960921b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b602080825260089082015267636861696e49647360c01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000828210156142bb576142bb614293565b500390565b634e487b7160e01b600052603260045260246000fd5b60006000198214156142ea576142ea614293565b5060010190565b8681526bffffffffffffffffffffffff198660601b166020820152838560348301376000848201603481018281526001600160fb1b0385111561433357600080fd5b8460051b80878337600092016034019182525098975050505050505050565b6000821982111561436557614365614293565b500190565b6000808335601e1984360301811261438157600080fd5b8301803591506001600160401b0382111561439b57600080fd5b602001915036819003821315613afc57600080fd5b600083516143c2818460208801613963565b8351908301906143d6818360208801613963565b01949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561443c57600080fd5b815161186881613e78565b60006020828403121561445957600080fd5b8151611868816139e7565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b6000602082840312156144a557600080fd5b5051919050565b81835260006001600160fb1b038311156144c557600080fd5b8260051b8083602087013760009401602001938452509192915050565b8481526060602082015260006144fb606083018661398f565b828103604084015261450e8185876144ac565b979650505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b6000826145905761459061456b565b500490565b6000826145a4576145a461456b565b500690565b60408101600384106145cb57634e487b7160e01b600052602160045260246000fd5b92815290151560209091015290565b600080835481600182811c9150808316806145f657607f831692505b602080841082141561461657634e487b7160e01b86526022600452602486fd5b81801561462a576001811461463b57614668565b60ff19861689528489019650614668565b60008a81526020902060005b868110156146605781548b820152908501908301614647565b505084890196505b509498975050505050505050565b60208082526026908201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6040820152651b9d1c9858dd60d21b606082015260800190565b600082516146ce818460208701613963565b9190910192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061328c9083018461398f565b60006020828403121561471d57600080fd5b815161186881613930565b60408152600061473b604083018661398f565b828103602084015261328c8185876144ac565b634e487b7160e01b600052603160045260246000fd5b6000808585111561477457600080fd5b8386111561478157600080fd5b5050820193919092039150565b6bffffffffffffffffffffffff1981358181169160148510156147bb5780818660140360031b1b83161692505b50509291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207198fa717e0553577c38ac35ce6c3910766fe80b4a95357231b0606aa08ef8b564736f6c63430008090033",
}

// AgentRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use AgentRegistryMetaData.ABI instead.
var AgentRegistryABI = AgentRegistryMetaData.ABI

// AgentRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use AgentRegistryMetaData.Bin instead.
var AgentRegistryBin = AgentRegistryMetaData.Bin

// DeployAgentRegistry deploys a new Ethereum contract, binding an instance of AgentRegistry to it.
func DeployAgentRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, forwarder common.Address) (common.Address, *types.Transaction, *AgentRegistry, error) {
	parsed, err := AgentRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(AgentRegistryBin), backend, forwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &AgentRegistry{AgentRegistryCaller: AgentRegistryCaller{contract: contract}, AgentRegistryTransactor: AgentRegistryTransactor{contract: contract}, AgentRegistryFilterer: AgentRegistryFilterer{contract: contract}}, nil
}

// AgentRegistry is an auto generated Go binding around an Ethereum contract.
type AgentRegistry struct {
	AgentRegistryCaller     // Read-only binding to the contract
	AgentRegistryTransactor // Write-only binding to the contract
	AgentRegistryFilterer   // Log filterer for contract events
}

// AgentRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type AgentRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AgentRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type AgentRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AgentRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type AgentRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// AgentRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type AgentRegistrySession struct {
	Contract     *AgentRegistry    // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// AgentRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type AgentRegistryCallerSession struct {
	Contract *AgentRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts        // Call options to use throughout this session
}

// AgentRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type AgentRegistryTransactorSession struct {
	Contract     *AgentRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// AgentRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type AgentRegistryRaw struct {
	Contract *AgentRegistry // Generic contract binding to access the raw methods on
}

// AgentRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type AgentRegistryCallerRaw struct {
	Contract *AgentRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// AgentRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type AgentRegistryTransactorRaw struct {
	Contract *AgentRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewAgentRegistry creates a new instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistry(address common.Address, backend bind.ContractBackend) (*AgentRegistry, error) {
	contract, err := bindAgentRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &AgentRegistry{AgentRegistryCaller: AgentRegistryCaller{contract: contract}, AgentRegistryTransactor: AgentRegistryTransactor{contract: contract}, AgentRegistryFilterer: AgentRegistryFilterer{contract: contract}}, nil
}

// NewAgentRegistryCaller creates a new read-only instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistryCaller(address common.Address, caller bind.ContractCaller) (*AgentRegistryCaller, error) {
	contract, err := bindAgentRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryCaller{contract: contract}, nil
}

// NewAgentRegistryTransactor creates a new write-only instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*AgentRegistryTransactor, error) {
	contract, err := bindAgentRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryTransactor{contract: contract}, nil
}

// NewAgentRegistryFilterer creates a new log filterer instance of AgentRegistry, bound to a specific deployed contract.
func NewAgentRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*AgentRegistryFilterer, error) {
	contract, err := bindAgentRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryFilterer{contract: contract}, nil
}

// bindAgentRegistry binds a generic wrapper to an already deployed contract.
func bindAgentRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := AgentRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AgentRegistry *AgentRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AgentRegistry.Contract.AgentRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AgentRegistry *AgentRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AgentRegistry.Contract.AgentRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AgentRegistry *AgentRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AgentRegistry.Contract.AgentRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_AgentRegistry *AgentRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _AgentRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_AgentRegistry *AgentRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _AgentRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_AgentRegistry *AgentRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _AgentRegistry.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _AgentRegistry.Contract.BalanceOf(&_AgentRegistry.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _AgentRegistry.Contract.BalanceOf(&_AgentRegistry.CallOpts, owner)
}

// FrontRunningDelay is a free data retrieval call binding the contract method 0xc02674c5.
//
// Solidity: function frontRunningDelay() view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) FrontRunningDelay(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "frontRunningDelay")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// FrontRunningDelay is a free data retrieval call binding the contract method 0xc02674c5.
//
// Solidity: function frontRunningDelay() view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) FrontRunningDelay() (*big.Int, error) {
	return _AgentRegistry.Contract.FrontRunningDelay(&_AgentRegistry.CallOpts)
}

// FrontRunningDelay is a free data retrieval call binding the contract method 0xc02674c5.
//
// Solidity: function frontRunningDelay() view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) FrontRunningDelay() (*big.Int, error) {
	return _AgentRegistry.Contract.FrontRunningDelay(&_AgentRegistry.CallOpts)
}

// GetAgent is a free data retrieval call binding the contract method 0x2de5aaf7.
//
// Solidity: function getAgent(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryCaller) GetAgent(opts *bind.CallOpts, agentId *big.Int) (struct {
	Registered   bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
}, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgent", agentId)

	outstruct := new(struct {
		Registered   bool
		Owner        common.Address
		AgentVersion *big.Int
		Metadata     string
		ChainIds     []*big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.AgentVersion = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.ChainIds = *abi.ConvertType(out[4], new([]*big.Int)).(*[]*big.Int)

	return *outstruct, err

}

// GetAgent is a free data retrieval call binding the contract method 0x2de5aaf7.
//
// Solidity: function getAgent(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistrySession) GetAgent(agentId *big.Int) (struct {
	Registered   bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
}, error) {
	return _AgentRegistry.Contract.GetAgent(&_AgentRegistry.CallOpts, agentId)
}

// GetAgent is a free data retrieval call binding the contract method 0x2de5aaf7.
//
// Solidity: function getAgent(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgent(agentId *big.Int) (struct {
	Registered   bool
	Owner        common.Address
	AgentVersion *big.Int
	Metadata     string
	ChainIds     []*big.Int
}, error) {
	return _AgentRegistry.Contract.GetAgent(&_AgentRegistry.CallOpts, agentId)
}

// GetAgentByChainAndIndex is a free data retrieval call binding the contract method 0xac388ff5.
//
// Solidity: function getAgentByChainAndIndex(uint256 chainId, uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentByChainAndIndex(opts *bind.CallOpts, chainId *big.Int, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentByChainAndIndex", chainId, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentByChainAndIndex is a free data retrieval call binding the contract method 0xac388ff5.
//
// Solidity: function getAgentByChainAndIndex(uint256 chainId, uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentByChainAndIndex(chainId *big.Int, index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByChainAndIndex(&_AgentRegistry.CallOpts, chainId, index)
}

// GetAgentByChainAndIndex is a free data retrieval call binding the contract method 0xac388ff5.
//
// Solidity: function getAgentByChainAndIndex(uint256 chainId, uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentByChainAndIndex(chainId *big.Int, index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByChainAndIndex(&_AgentRegistry.CallOpts, chainId, index)
}

// GetAgentByIndex is a free data retrieval call binding the contract method 0x89432d40.
//
// Solidity: function getAgentByIndex(uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentByIndex is a free data retrieval call binding the contract method 0x89432d40.
//
// Solidity: function getAgentByIndex(uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentByIndex(index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByIndex(&_AgentRegistry.CallOpts, index)
}

// GetAgentByIndex is a free data retrieval call binding the contract method 0x89432d40.
//
// Solidity: function getAgentByIndex(uint256 index) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentByIndex(index *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentByIndex(&_AgentRegistry.CallOpts, index)
}

// GetAgentCount is a free data retrieval call binding the contract method 0x91cab63e.
//
// Solidity: function getAgentCount() view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentCount is a free data retrieval call binding the contract method 0x91cab63e.
//
// Solidity: function getAgentCount() view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentCount() (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCount(&_AgentRegistry.CallOpts)
}

// GetAgentCount is a free data retrieval call binding the contract method 0x91cab63e.
//
// Solidity: function getAgentCount() view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentCount() (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCount(&_AgentRegistry.CallOpts)
}

// GetAgentCountByChain is a free data retrieval call binding the contract method 0x8eea276f.
//
// Solidity: function getAgentCountByChain(uint256 chainId) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetAgentCountByChain(opts *bind.CallOpts, chainId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentCountByChain", chainId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetAgentCountByChain is a free data retrieval call binding the contract method 0x8eea276f.
//
// Solidity: function getAgentCountByChain(uint256 chainId) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetAgentCountByChain(chainId *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCountByChain(&_AgentRegistry.CallOpts, chainId)
}

// GetAgentCountByChain is a free data retrieval call binding the contract method 0x8eea276f.
//
// Solidity: function getAgentCountByChain(uint256 chainId) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentCountByChain(chainId *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetAgentCountByChain(&_AgentRegistry.CallOpts, chainId)
}

// GetAgentState is a free data retrieval call binding the contract method 0x1e4def83.
//
// Solidity: function getAgentState(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled, uint256 disabledFlags)
func (_AgentRegistry *AgentRegistryCaller) GetAgentState(opts *bind.CallOpts, agentId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	AgentVersion  *big.Int
	Metadata      string
	ChainIds      []*big.Int
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getAgentState", agentId)

	outstruct := new(struct {
		Registered    bool
		Owner         common.Address
		AgentVersion  *big.Int
		Metadata      string
		ChainIds      []*big.Int
		Enabled       bool
		DisabledFlags *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Registered = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.Owner = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
	outstruct.AgentVersion = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.Metadata = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.ChainIds = *abi.ConvertType(out[4], new([]*big.Int)).(*[]*big.Int)
	outstruct.Enabled = *abi.ConvertType(out[5], new(bool)).(*bool)
	outstruct.DisabledFlags = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetAgentState is a free data retrieval call binding the contract method 0x1e4def83.
//
// Solidity: function getAgentState(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled, uint256 disabledFlags)
func (_AgentRegistry *AgentRegistrySession) GetAgentState(agentId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	AgentVersion  *big.Int
	Metadata      string
	ChainIds      []*big.Int
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	return _AgentRegistry.Contract.GetAgentState(&_AgentRegistry.CallOpts, agentId)
}

// GetAgentState is a free data retrieval call binding the contract method 0x1e4def83.
//
// Solidity: function getAgentState(uint256 agentId) view returns(bool registered, address owner, uint256 agentVersion, string metadata, uint256[] chainIds, bool enabled, uint256 disabledFlags)
func (_AgentRegistry *AgentRegistryCallerSession) GetAgentState(agentId *big.Int) (struct {
	Registered    bool
	Owner         common.Address
	AgentVersion  *big.Int
	Metadata      string
	ChainIds      []*big.Int
	Enabled       bool
	DisabledFlags *big.Int
}, error) {
	return _AgentRegistry.Contract.GetAgentState(&_AgentRegistry.CallOpts, agentId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistryCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistrySession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.GetApproved(&_AgentRegistry.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistryCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.GetApproved(&_AgentRegistry.CallOpts, tokenId)
}

// GetCommitTimestamp is a free data retrieval call binding the contract method 0x143527df.
//
// Solidity: function getCommitTimestamp(bytes32 commit) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetCommitTimestamp(opts *bind.CallOpts, commit [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getCommitTimestamp", commit)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCommitTimestamp is a free data retrieval call binding the contract method 0x143527df.
//
// Solidity: function getCommitTimestamp(bytes32 commit) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetCommitTimestamp(commit [32]byte) (*big.Int, error) {
	return _AgentRegistry.Contract.GetCommitTimestamp(&_AgentRegistry.CallOpts, commit)
}

// GetCommitTimestamp is a free data retrieval call binding the contract method 0x143527df.
//
// Solidity: function getCommitTimestamp(bytes32 commit) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetCommitTimestamp(commit [32]byte) (*big.Int, error) {
	return _AgentRegistry.Contract.GetCommitTimestamp(&_AgentRegistry.CallOpts, commit)
}

// GetDisableFlags is a free data retrieval call binding the contract method 0x871016e1.
//
// Solidity: function getDisableFlags(uint256 agentId) view returns(uint256)
func (_AgentRegistry *AgentRegistryCaller) GetDisableFlags(opts *bind.CallOpts, agentId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getDisableFlags", agentId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDisableFlags is a free data retrieval call binding the contract method 0x871016e1.
//
// Solidity: function getDisableFlags(uint256 agentId) view returns(uint256)
func (_AgentRegistry *AgentRegistrySession) GetDisableFlags(agentId *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetDisableFlags(&_AgentRegistry.CallOpts, agentId)
}

// GetDisableFlags is a free data retrieval call binding the contract method 0x871016e1.
//
// Solidity: function getDisableFlags(uint256 agentId) view returns(uint256)
func (_AgentRegistry *AgentRegistryCallerSession) GetDisableFlags(agentId *big.Int) (*big.Int, error) {
	return _AgentRegistry.Contract.GetDisableFlags(&_AgentRegistry.CallOpts, agentId)
}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_AgentRegistry *AgentRegistryCaller) GetStakeController(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getStakeController")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_AgentRegistry *AgentRegistrySession) GetStakeController() (common.Address, error) {
	return _AgentRegistry.Contract.GetStakeController(&_AgentRegistry.CallOpts)
}

// GetStakeController is a free data retrieval call binding the contract method 0xaebb5150.
//
// Solidity: function getStakeController() view returns(address)
func (_AgentRegistry *AgentRegistryCallerSession) GetStakeController() (common.Address, error) {
	return _AgentRegistry.Contract.GetStakeController(&_AgentRegistry.CallOpts)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 ) view returns((uint256,uint256,bool))
func (_AgentRegistry *AgentRegistryCaller) GetStakeThreshold(opts *bind.CallOpts, arg0 *big.Int) (IStakeSubjectStakeThreshold, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "getStakeThreshold", arg0)

	if err != nil {
		return *new(IStakeSubjectStakeThreshold), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakeSubjectStakeThreshold)).(*IStakeSubjectStakeThreshold)

	return out0, err

}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 ) view returns((uint256,uint256,bool))
func (_AgentRegistry *AgentRegistrySession) GetStakeThreshold(arg0 *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _AgentRegistry.Contract.GetStakeThreshold(&_AgentRegistry.CallOpts, arg0)
}

// GetStakeThreshold is a free data retrieval call binding the contract method 0x624ade3c.
//
// Solidity: function getStakeThreshold(uint256 ) view returns((uint256,uint256,bool))
func (_AgentRegistry *AgentRegistryCallerSession) GetStakeThreshold(arg0 *big.Int) (IStakeSubjectStakeThreshold, error) {
	return _AgentRegistry.Contract.GetStakeThreshold(&_AgentRegistry.CallOpts, arg0)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _AgentRegistry.Contract.IsApprovedForAll(&_AgentRegistry.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _AgentRegistry.Contract.IsApprovedForAll(&_AgentRegistry.CallOpts, owner, operator)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsEnabled(opts *bind.CallOpts, agentId *big.Int) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isEnabled", agentId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsEnabled(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsEnabled(&_AgentRegistry.CallOpts, agentId)
}

// IsEnabled is a free data retrieval call binding the contract method 0xc783034c.
//
// Solidity: function isEnabled(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsEnabled(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsEnabled(&_AgentRegistry.CallOpts, agentId)
}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsRegistered(opts *bind.CallOpts, agentId *big.Int) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isRegistered", agentId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsRegistered(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsRegistered(&_AgentRegistry.CallOpts, agentId)
}

// IsRegistered is a free data retrieval call binding the contract method 0x579a6988.
//
// Solidity: function isRegistered(uint256 agentId) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsRegistered(agentId *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsRegistered(&_AgentRegistry.CallOpts, agentId)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsStakedOverMin(opts *bind.CallOpts, subject *big.Int) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isStakedOverMin", subject)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsStakedOverMin(&_AgentRegistry.CallOpts, subject)
}

// IsStakedOverMin is a free data retrieval call binding the contract method 0xb7b57b27.
//
// Solidity: function isStakedOverMin(uint256 subject) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsStakedOverMin(subject *big.Int) (bool, error) {
	return _AgentRegistry.Contract.IsStakedOverMin(&_AgentRegistry.CallOpts, subject)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _AgentRegistry.Contract.IsTrustedForwarder(&_AgentRegistry.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _AgentRegistry.Contract.IsTrustedForwarder(&_AgentRegistry.CallOpts, forwarder)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AgentRegistry *AgentRegistryCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AgentRegistry *AgentRegistrySession) Name() (string, error) {
	return _AgentRegistry.Contract.Name(&_AgentRegistry.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) Name() (string, error) {
	return _AgentRegistry.Contract.Name(&_AgentRegistry.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistryCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistrySession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.OwnerOf(&_AgentRegistry.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_AgentRegistry *AgentRegistryCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _AgentRegistry.Contract.OwnerOf(&_AgentRegistry.CallOpts, tokenId)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AgentRegistry *AgentRegistryCaller) ProxiableUUID(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "proxiableUUID")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AgentRegistry *AgentRegistrySession) ProxiableUUID() ([32]byte, error) {
	return _AgentRegistry.Contract.ProxiableUUID(&_AgentRegistry.CallOpts)
}

// ProxiableUUID is a free data retrieval call binding the contract method 0x52d1902d.
//
// Solidity: function proxiableUUID() view returns(bytes32)
func (_AgentRegistry *AgentRegistryCallerSession) ProxiableUUID() ([32]byte, error) {
	return _AgentRegistry.Contract.ProxiableUUID(&_AgentRegistry.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AgentRegistry *AgentRegistryCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AgentRegistry *AgentRegistrySession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AgentRegistry.Contract.SupportsInterface(&_AgentRegistry.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_AgentRegistry *AgentRegistryCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _AgentRegistry.Contract.SupportsInterface(&_AgentRegistry.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AgentRegistry *AgentRegistryCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AgentRegistry *AgentRegistrySession) Symbol() (string, error) {
	return _AgentRegistry.Contract.Symbol(&_AgentRegistry.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) Symbol() (string, error) {
	return _AgentRegistry.Contract.Symbol(&_AgentRegistry.CallOpts)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AgentRegistry *AgentRegistryCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AgentRegistry *AgentRegistrySession) TokenURI(tokenId *big.Int) (string, error) {
	return _AgentRegistry.Contract.TokenURI(&_AgentRegistry.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _AgentRegistry.Contract.TokenURI(&_AgentRegistry.CallOpts, tokenId)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AgentRegistry *AgentRegistryCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _AgentRegistry.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AgentRegistry *AgentRegistrySession) Version() (string, error) {
	return _AgentRegistry.Contract.Version(&_AgentRegistry.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() view returns(string)
func (_AgentRegistry *AgentRegistryCallerSession) Version() (string, error) {
	return _AgentRegistry.Contract.Version(&_AgentRegistry.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistrySession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Approve(&_AgentRegistry.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Approve(&_AgentRegistry.TransactOpts, to, tokenId)
}

// CreateAgent is a paid mutator transaction binding the contract method 0x7935d5b4.
//
// Solidity: function createAgent(uint256 agentId, address owner, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactor) CreateAgent(opts *bind.TransactOpts, agentId *big.Int, owner common.Address, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "createAgent", agentId, owner, metadata, chainIds)
}

// CreateAgent is a paid mutator transaction binding the contract method 0x7935d5b4.
//
// Solidity: function createAgent(uint256 agentId, address owner, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistrySession) CreateAgent(agentId *big.Int, owner common.Address, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.CreateAgent(&_AgentRegistry.TransactOpts, agentId, owner, metadata, chainIds)
}

// CreateAgent is a paid mutator transaction binding the contract method 0x7935d5b4.
//
// Solidity: function createAgent(uint256 agentId, address owner, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) CreateAgent(agentId *big.Int, owner common.Address, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.CreateAgent(&_AgentRegistry.TransactOpts, agentId, owner, metadata, chainIds)
}

// DisableAgent is a paid mutator transaction binding the contract method 0x21095d65.
//
// Solidity: function disableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactor) DisableAgent(opts *bind.TransactOpts, agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "disableAgent", agentId, permission)
}

// DisableAgent is a paid mutator transaction binding the contract method 0x21095d65.
//
// Solidity: function disableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistrySession) DisableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.DisableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// DisableAgent is a paid mutator transaction binding the contract method 0x21095d65.
//
// Solidity: function disableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) DisableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.DisableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// EnableAgent is a paid mutator transaction binding the contract method 0xd0c6464b.
//
// Solidity: function enableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactor) EnableAgent(opts *bind.TransactOpts, agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "enableAgent", agentId, permission)
}

// EnableAgent is a paid mutator transaction binding the contract method 0xd0c6464b.
//
// Solidity: function enableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistrySession) EnableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.EnableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// EnableAgent is a paid mutator transaction binding the contract method 0xd0c6464b.
//
// Solidity: function enableAgent(uint256 agentId, uint8 permission) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) EnableAgent(agentId *big.Int, permission uint8) (*types.Transaction, error) {
	return _AgentRegistry.Contract.EnableAgent(&_AgentRegistry.TransactOpts, agentId, permission)
}

// Initialize is a paid mutator transaction binding the contract method 0x2016a0d2.
//
// Solidity: function initialize(address __manager, address __router, string __name, string __symbol) returns()
func (_AgentRegistry *AgentRegistryTransactor) Initialize(opts *bind.TransactOpts, __manager common.Address, __router common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "initialize", __manager, __router, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x2016a0d2.
//
// Solidity: function initialize(address __manager, address __router, string __name, string __symbol) returns()
func (_AgentRegistry *AgentRegistrySession) Initialize(__manager common.Address, __router common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Initialize(&_AgentRegistry.TransactOpts, __manager, __router, __name, __symbol)
}

// Initialize is a paid mutator transaction binding the contract method 0x2016a0d2.
//
// Solidity: function initialize(address __manager, address __router, string __name, string __symbol) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) Initialize(__manager common.Address, __router common.Address, __name string, __symbol string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Initialize(&_AgentRegistry.TransactOpts, __manager, __router, __name, __symbol)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_AgentRegistry *AgentRegistryTransactor) Multicall(opts *bind.TransactOpts, data [][]byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "multicall", data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_AgentRegistry *AgentRegistrySession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Multicall(&_AgentRegistry.TransactOpts, data)
}

// Multicall is a paid mutator transaction binding the contract method 0xac9650d8.
//
// Solidity: function multicall(bytes[] data) returns(bytes[] results)
func (_AgentRegistry *AgentRegistryTransactorSession) Multicall(data [][]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.Multicall(&_AgentRegistry.TransactOpts, data)
}

// PrepareAgent is a paid mutator transaction binding the contract method 0xa8439d98.
//
// Solidity: function prepareAgent(bytes32 commit) returns()
func (_AgentRegistry *AgentRegistryTransactor) PrepareAgent(opts *bind.TransactOpts, commit [32]byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "prepareAgent", commit)
}

// PrepareAgent is a paid mutator transaction binding the contract method 0xa8439d98.
//
// Solidity: function prepareAgent(bytes32 commit) returns()
func (_AgentRegistry *AgentRegistrySession) PrepareAgent(commit [32]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.PrepareAgent(&_AgentRegistry.TransactOpts, commit)
}

// PrepareAgent is a paid mutator transaction binding the contract method 0xa8439d98.
//
// Solidity: function prepareAgent(bytes32 commit) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) PrepareAgent(commit [32]byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.PrepareAgent(&_AgentRegistry.TransactOpts, commit)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistrySession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AgentRegistry *AgentRegistryTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AgentRegistry *AgentRegistrySession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom0(&_AgentRegistry.TransactOpts, from, to, tokenId, data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SafeTransferFrom0(&_AgentRegistry.TransactOpts, from, to, tokenId, data)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetAccessManager(opts *bind.TransactOpts, newManager common.Address) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setAccessManager", newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_AgentRegistry *AgentRegistrySession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetAccessManager(&_AgentRegistry.TransactOpts, newManager)
}

// SetAccessManager is a paid mutator transaction binding the contract method 0xc9580804.
//
// Solidity: function setAccessManager(address newManager) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetAccessManager(newManager common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetAccessManager(&_AgentRegistry.TransactOpts, newManager)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AgentRegistry *AgentRegistrySession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetApprovalForAll(&_AgentRegistry.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetApprovalForAll(&_AgentRegistry.TransactOpts, operator, approved)
}

// SetFrontRunningDelay is a paid mutator transaction binding the contract method 0x55d372fb.
//
// Solidity: function setFrontRunningDelay(uint256 delay) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetFrontRunningDelay(opts *bind.TransactOpts, delay *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setFrontRunningDelay", delay)
}

// SetFrontRunningDelay is a paid mutator transaction binding the contract method 0x55d372fb.
//
// Solidity: function setFrontRunningDelay(uint256 delay) returns()
func (_AgentRegistry *AgentRegistrySession) SetFrontRunningDelay(delay *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetFrontRunningDelay(&_AgentRegistry.TransactOpts, delay)
}

// SetFrontRunningDelay is a paid mutator transaction binding the contract method 0x55d372fb.
//
// Solidity: function setFrontRunningDelay(uint256 delay) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetFrontRunningDelay(delay *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetFrontRunningDelay(&_AgentRegistry.TransactOpts, delay)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetName(opts *bind.TransactOpts, ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setName", ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_AgentRegistry *AgentRegistrySession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetName(&_AgentRegistry.TransactOpts, ensRegistry, ensName)
}

// SetName is a paid mutator transaction binding the contract method 0x3121db1c.
//
// Solidity: function setName(address ensRegistry, string ensName) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetName(ensRegistry common.Address, ensName string) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetName(&_AgentRegistry.TransactOpts, ensRegistry, ensName)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetRouter(opts *bind.TransactOpts, newRouter common.Address) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setRouter", newRouter)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_AgentRegistry *AgentRegistrySession) SetRouter(newRouter common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetRouter(&_AgentRegistry.TransactOpts, newRouter)
}

// SetRouter is a paid mutator transaction binding the contract method 0xc0d78655.
//
// Solidity: function setRouter(address newRouter) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetRouter(newRouter common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetRouter(&_AgentRegistry.TransactOpts, newRouter)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetStakeController(opts *bind.TransactOpts, stakeController common.Address) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setStakeController", stakeController)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_AgentRegistry *AgentRegistrySession) SetStakeController(stakeController common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetStakeController(&_AgentRegistry.TransactOpts, stakeController)
}

// SetStakeController is a paid mutator transaction binding the contract method 0x9a9d67bd.
//
// Solidity: function setStakeController(address stakeController) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetStakeController(stakeController common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetStakeController(&_AgentRegistry.TransactOpts, stakeController)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xe9965e44.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold) returns()
func (_AgentRegistry *AgentRegistryTransactor) SetStakeThreshold(opts *bind.TransactOpts, newStakeThreshold IStakeSubjectStakeThreshold) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "setStakeThreshold", newStakeThreshold)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xe9965e44.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold) returns()
func (_AgentRegistry *AgentRegistrySession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetStakeThreshold(&_AgentRegistry.TransactOpts, newStakeThreshold)
}

// SetStakeThreshold is a paid mutator transaction binding the contract method 0xe9965e44.
//
// Solidity: function setStakeThreshold((uint256,uint256,bool) newStakeThreshold) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) SetStakeThreshold(newStakeThreshold IStakeSubjectStakeThreshold) (*types.Transaction, error) {
	return _AgentRegistry.Contract.SetStakeThreshold(&_AgentRegistry.TransactOpts, newStakeThreshold)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistrySession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.TransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.TransferFrom(&_AgentRegistry.TransactOpts, from, to, tokenId)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0xaa9ac6c6.
//
// Solidity: function updateAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactor) UpdateAgent(opts *bind.TransactOpts, agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "updateAgent", agentId, metadata, chainIds)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0xaa9ac6c6.
//
// Solidity: function updateAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistrySession) UpdateAgent(agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpdateAgent(&_AgentRegistry.TransactOpts, agentId, metadata, chainIds)
}

// UpdateAgent is a paid mutator transaction binding the contract method 0xaa9ac6c6.
//
// Solidity: function updateAgent(uint256 agentId, string metadata, uint256[] chainIds) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) UpdateAgent(agentId *big.Int, metadata string, chainIds []*big.Int) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpdateAgent(&_AgentRegistry.TransactOpts, agentId, metadata, chainIds)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AgentRegistry *AgentRegistryTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AgentRegistry *AgentRegistrySession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeTo(&_AgentRegistry.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_AgentRegistry *AgentRegistryTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeTo(&_AgentRegistry.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AgentRegistry *AgentRegistryTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AgentRegistry *AgentRegistrySession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeToAndCall(&_AgentRegistry.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_AgentRegistry *AgentRegistryTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _AgentRegistry.Contract.UpgradeToAndCall(&_AgentRegistry.TransactOpts, newImplementation, data)
}

// AgentRegistryAccessManagerUpdatedIterator is returned from FilterAccessManagerUpdated and is used to iterate over the raw logs and unpacked data for AccessManagerUpdated events raised by the AgentRegistry contract.
type AgentRegistryAccessManagerUpdatedIterator struct {
	Event *AgentRegistryAccessManagerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAccessManagerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAccessManagerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAccessManagerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAccessManagerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAccessManagerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAccessManagerUpdated represents a AccessManagerUpdated event raised by the AgentRegistry contract.
type AgentRegistryAccessManagerUpdated struct {
	NewAddressManager common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAccessManagerUpdated is a free log retrieval operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_AgentRegistry *AgentRegistryFilterer) FilterAccessManagerUpdated(opts *bind.FilterOpts, newAddressManager []common.Address) (*AgentRegistryAccessManagerUpdatedIterator, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAccessManagerUpdatedIterator{contract: _AgentRegistry.contract, event: "AccessManagerUpdated", logs: logs, sub: sub}, nil
}

// WatchAccessManagerUpdated is a free log subscription operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_AgentRegistry *AgentRegistryFilterer) WatchAccessManagerUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistryAccessManagerUpdated, newAddressManager []common.Address) (event.Subscription, error) {

	var newAddressManagerRule []interface{}
	for _, newAddressManagerItem := range newAddressManager {
		newAddressManagerRule = append(newAddressManagerRule, newAddressManagerItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AccessManagerUpdated", newAddressManagerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAccessManagerUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAccessManagerUpdated is a log parse operation binding the contract event 0xa5bc17e575e3b53b23d0e93e121a5a66d1de4d5edb4dfde6027b14d79b7f2b9c.
//
// Solidity: event AccessManagerUpdated(address indexed newAddressManager)
func (_AgentRegistry *AgentRegistryFilterer) ParseAccessManagerUpdated(log types.Log) (*AgentRegistryAccessManagerUpdated, error) {
	event := new(AgentRegistryAccessManagerUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "AccessManagerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the AgentRegistry contract.
type AgentRegistryAdminChangedIterator struct {
	Event *AgentRegistryAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAdminChanged represents a AdminChanged event raised by the AgentRegistry contract.
type AgentRegistryAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AgentRegistry *AgentRegistryFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*AgentRegistryAdminChangedIterator, error) {

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAdminChangedIterator{contract: _AgentRegistry.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AgentRegistry *AgentRegistryFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *AgentRegistryAdminChanged) (event.Subscription, error) {

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAdminChanged)
				if err := _AgentRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_AgentRegistry *AgentRegistryFilterer) ParseAdminChanged(log types.Log) (*AgentRegistryAdminChanged, error) {
	event := new(AgentRegistryAdminChanged)
	if err := _AgentRegistry.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAgentCommittedIterator is returned from FilterAgentCommitted and is used to iterate over the raw logs and unpacked data for AgentCommitted events raised by the AgentRegistry contract.
type AgentRegistryAgentCommittedIterator struct {
	Event *AgentRegistryAgentCommitted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAgentCommittedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAgentCommitted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAgentCommitted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAgentCommittedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAgentCommittedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAgentCommitted represents a AgentCommitted event raised by the AgentRegistry contract.
type AgentRegistryAgentCommitted struct {
	Commit [32]byte
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterAgentCommitted is a free log retrieval operation binding the contract event 0x43343771105cc71439fde05af6660ad660519c971ddc249e5d5cd9c29da46d38.
//
// Solidity: event AgentCommitted(bytes32 indexed commit)
func (_AgentRegistry *AgentRegistryFilterer) FilterAgentCommitted(opts *bind.FilterOpts, commit [][32]byte) (*AgentRegistryAgentCommittedIterator, error) {

	var commitRule []interface{}
	for _, commitItem := range commit {
		commitRule = append(commitRule, commitItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AgentCommitted", commitRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAgentCommittedIterator{contract: _AgentRegistry.contract, event: "AgentCommitted", logs: logs, sub: sub}, nil
}

// WatchAgentCommitted is a free log subscription operation binding the contract event 0x43343771105cc71439fde05af6660ad660519c971ddc249e5d5cd9c29da46d38.
//
// Solidity: event AgentCommitted(bytes32 indexed commit)
func (_AgentRegistry *AgentRegistryFilterer) WatchAgentCommitted(opts *bind.WatchOpts, sink chan<- *AgentRegistryAgentCommitted, commit [][32]byte) (event.Subscription, error) {

	var commitRule []interface{}
	for _, commitItem := range commit {
		commitRule = append(commitRule, commitItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AgentCommitted", commitRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAgentCommitted)
				if err := _AgentRegistry.contract.UnpackLog(event, "AgentCommitted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentCommitted is a log parse operation binding the contract event 0x43343771105cc71439fde05af6660ad660519c971ddc249e5d5cd9c29da46d38.
//
// Solidity: event AgentCommitted(bytes32 indexed commit)
func (_AgentRegistry *AgentRegistryFilterer) ParseAgentCommitted(log types.Log) (*AgentRegistryAgentCommitted, error) {
	event := new(AgentRegistryAgentCommitted)
	if err := _AgentRegistry.contract.UnpackLog(event, "AgentCommitted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAgentEnabledIterator is returned from FilterAgentEnabled and is used to iterate over the raw logs and unpacked data for AgentEnabled events raised by the AgentRegistry contract.
type AgentRegistryAgentEnabledIterator struct {
	Event *AgentRegistryAgentEnabled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAgentEnabledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAgentEnabled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAgentEnabled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAgentEnabledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAgentEnabledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAgentEnabled represents a AgentEnabled event raised by the AgentRegistry contract.
type AgentRegistryAgentEnabled struct {
	AgentId    *big.Int
	Enabled    bool
	Permission uint8
	Value      bool
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAgentEnabled is a free log retrieval operation binding the contract event 0xb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d641.
//
// Solidity: event AgentEnabled(uint256 indexed agentId, bool indexed enabled, uint8 permission, bool value)
func (_AgentRegistry *AgentRegistryFilterer) FilterAgentEnabled(opts *bind.FilterOpts, agentId []*big.Int, enabled []bool) (*AgentRegistryAgentEnabledIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AgentEnabled", agentIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAgentEnabledIterator{contract: _AgentRegistry.contract, event: "AgentEnabled", logs: logs, sub: sub}, nil
}

// WatchAgentEnabled is a free log subscription operation binding the contract event 0xb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d641.
//
// Solidity: event AgentEnabled(uint256 indexed agentId, bool indexed enabled, uint8 permission, bool value)
func (_AgentRegistry *AgentRegistryFilterer) WatchAgentEnabled(opts *bind.WatchOpts, sink chan<- *AgentRegistryAgentEnabled, agentId []*big.Int, enabled []bool) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var enabledRule []interface{}
	for _, enabledItem := range enabled {
		enabledRule = append(enabledRule, enabledItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AgentEnabled", agentIdRule, enabledRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAgentEnabled)
				if err := _AgentRegistry.contract.UnpackLog(event, "AgentEnabled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentEnabled is a log parse operation binding the contract event 0xb3910705ae5b4ecc20f77ab0d947aafd48ed7328af2294ca08dea714b041d641.
//
// Solidity: event AgentEnabled(uint256 indexed agentId, bool indexed enabled, uint8 permission, bool value)
func (_AgentRegistry *AgentRegistryFilterer) ParseAgentEnabled(log types.Log) (*AgentRegistryAgentEnabled, error) {
	event := new(AgentRegistryAgentEnabled)
	if err := _AgentRegistry.contract.UnpackLog(event, "AgentEnabled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryAgentUpdatedIterator is returned from FilterAgentUpdated and is used to iterate over the raw logs and unpacked data for AgentUpdated events raised by the AgentRegistry contract.
type AgentRegistryAgentUpdatedIterator struct {
	Event *AgentRegistryAgentUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryAgentUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryAgentUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryAgentUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryAgentUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryAgentUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryAgentUpdated represents a AgentUpdated event raised by the AgentRegistry contract.
type AgentRegistryAgentUpdated struct {
	AgentId  *big.Int
	By       common.Address
	Metadata string
	ChainIds []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterAgentUpdated is a free log retrieval operation binding the contract event 0x334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff6.
//
// Solidity: event AgentUpdated(uint256 indexed agentId, address indexed by, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryFilterer) FilterAgentUpdated(opts *bind.FilterOpts, agentId []*big.Int, by []common.Address) (*AgentRegistryAgentUpdatedIterator, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var byRule []interface{}
	for _, byItem := range by {
		byRule = append(byRule, byItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "AgentUpdated", agentIdRule, byRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryAgentUpdatedIterator{contract: _AgentRegistry.contract, event: "AgentUpdated", logs: logs, sub: sub}, nil
}

// WatchAgentUpdated is a free log subscription operation binding the contract event 0x334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff6.
//
// Solidity: event AgentUpdated(uint256 indexed agentId, address indexed by, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryFilterer) WatchAgentUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistryAgentUpdated, agentId []*big.Int, by []common.Address) (event.Subscription, error) {

	var agentIdRule []interface{}
	for _, agentIdItem := range agentId {
		agentIdRule = append(agentIdRule, agentIdItem)
	}
	var byRule []interface{}
	for _, byItem := range by {
		byRule = append(byRule, byItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "AgentUpdated", agentIdRule, byRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryAgentUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "AgentUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAgentUpdated is a log parse operation binding the contract event 0x334f6d330b99b468cd5f1185b6926d611b5471d99134d7cd171f7541f2e6bff6.
//
// Solidity: event AgentUpdated(uint256 indexed agentId, address indexed by, string metadata, uint256[] chainIds)
func (_AgentRegistry *AgentRegistryFilterer) ParseAgentUpdated(log types.Log) (*AgentRegistryAgentUpdated, error) {
	event := new(AgentRegistryAgentUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "AgentUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the AgentRegistry contract.
type AgentRegistryApprovalIterator struct {
	Event *AgentRegistryApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryApproval represents a Approval event raised by the AgentRegistry contract.
type AgentRegistryApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*AgentRegistryApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryApprovalIterator{contract: _AgentRegistry.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *AgentRegistryApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryApproval)
				if err := _AgentRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) ParseApproval(log types.Log) (*AgentRegistryApproval, error) {
	event := new(AgentRegistryApproval)
	if err := _AgentRegistry.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the AgentRegistry contract.
type AgentRegistryApprovalForAllIterator struct {
	Event *AgentRegistryApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryApprovalForAll represents a ApprovalForAll event raised by the AgentRegistry contract.
type AgentRegistryApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AgentRegistry *AgentRegistryFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*AgentRegistryApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryApprovalForAllIterator{contract: _AgentRegistry.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AgentRegistry *AgentRegistryFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *AgentRegistryApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryApprovalForAll)
				if err := _AgentRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_AgentRegistry *AgentRegistryFilterer) ParseApprovalForAll(log types.Log) (*AgentRegistryApprovalForAll, error) {
	event := new(AgentRegistryApprovalForAll)
	if err := _AgentRegistry.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the AgentRegistry contract.
type AgentRegistryBeaconUpgradedIterator struct {
	Event *AgentRegistryBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryBeaconUpgraded represents a BeaconUpgraded event raised by the AgentRegistry contract.
type AgentRegistryBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AgentRegistry *AgentRegistryFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*AgentRegistryBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryBeaconUpgradedIterator{contract: _AgentRegistry.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AgentRegistry *AgentRegistryFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *AgentRegistryBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryBeaconUpgraded)
				if err := _AgentRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_AgentRegistry *AgentRegistryFilterer) ParseBeaconUpgraded(log types.Log) (*AgentRegistryBeaconUpgraded, error) {
	event := new(AgentRegistryBeaconUpgraded)
	if err := _AgentRegistry.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryFrontRunningDelaySetIterator is returned from FilterFrontRunningDelaySet and is used to iterate over the raw logs and unpacked data for FrontRunningDelaySet events raised by the AgentRegistry contract.
type AgentRegistryFrontRunningDelaySetIterator struct {
	Event *AgentRegistryFrontRunningDelaySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryFrontRunningDelaySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryFrontRunningDelaySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryFrontRunningDelaySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryFrontRunningDelaySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryFrontRunningDelaySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryFrontRunningDelaySet represents a FrontRunningDelaySet event raised by the AgentRegistry contract.
type AgentRegistryFrontRunningDelaySet struct {
	Delay *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterFrontRunningDelaySet is a free log retrieval operation binding the contract event 0xf6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77.
//
// Solidity: event FrontRunningDelaySet(uint256 delay)
func (_AgentRegistry *AgentRegistryFilterer) FilterFrontRunningDelaySet(opts *bind.FilterOpts) (*AgentRegistryFrontRunningDelaySetIterator, error) {

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "FrontRunningDelaySet")
	if err != nil {
		return nil, err
	}
	return &AgentRegistryFrontRunningDelaySetIterator{contract: _AgentRegistry.contract, event: "FrontRunningDelaySet", logs: logs, sub: sub}, nil
}

// WatchFrontRunningDelaySet is a free log subscription operation binding the contract event 0xf6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77.
//
// Solidity: event FrontRunningDelaySet(uint256 delay)
func (_AgentRegistry *AgentRegistryFilterer) WatchFrontRunningDelaySet(opts *bind.WatchOpts, sink chan<- *AgentRegistryFrontRunningDelaySet) (event.Subscription, error) {

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "FrontRunningDelaySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryFrontRunningDelaySet)
				if err := _AgentRegistry.contract.UnpackLog(event, "FrontRunningDelaySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseFrontRunningDelaySet is a log parse operation binding the contract event 0xf6d2e0894a3154937e3e8b8183c5b52341e64b1be69238e7ed6c0e1bba59fb77.
//
// Solidity: event FrontRunningDelaySet(uint256 delay)
func (_AgentRegistry *AgentRegistryFilterer) ParseFrontRunningDelaySet(log types.Log) (*AgentRegistryFrontRunningDelaySet, error) {
	event := new(AgentRegistryFrontRunningDelaySet)
	if err := _AgentRegistry.contract.UnpackLog(event, "FrontRunningDelaySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the AgentRegistry contract.
type AgentRegistryInitializedIterator struct {
	Event *AgentRegistryInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryInitialized represents a Initialized event raised by the AgentRegistry contract.
type AgentRegistryInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_AgentRegistry *AgentRegistryFilterer) FilterInitialized(opts *bind.FilterOpts) (*AgentRegistryInitializedIterator, error) {

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &AgentRegistryInitializedIterator{contract: _AgentRegistry.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_AgentRegistry *AgentRegistryFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *AgentRegistryInitialized) (event.Subscription, error) {

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryInitialized)
				if err := _AgentRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_AgentRegistry *AgentRegistryFilterer) ParseInitialized(log types.Log) (*AgentRegistryInitialized, error) {
	event := new(AgentRegistryInitialized)
	if err := _AgentRegistry.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryRouterUpdatedIterator is returned from FilterRouterUpdated and is used to iterate over the raw logs and unpacked data for RouterUpdated events raised by the AgentRegistry contract.
type AgentRegistryRouterUpdatedIterator struct {
	Event *AgentRegistryRouterUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryRouterUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryRouterUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryRouterUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryRouterUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryRouterUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryRouterUpdated represents a RouterUpdated event raised by the AgentRegistry contract.
type AgentRegistryRouterUpdated struct {
	Router common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterRouterUpdated is a free log retrieval operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_AgentRegistry *AgentRegistryFilterer) FilterRouterUpdated(opts *bind.FilterOpts, router []common.Address) (*AgentRegistryRouterUpdatedIterator, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryRouterUpdatedIterator{contract: _AgentRegistry.contract, event: "RouterUpdated", logs: logs, sub: sub}, nil
}

// WatchRouterUpdated is a free log subscription operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_AgentRegistry *AgentRegistryFilterer) WatchRouterUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistryRouterUpdated, router []common.Address) (event.Subscription, error) {

	var routerRule []interface{}
	for _, routerItem := range router {
		routerRule = append(routerRule, routerItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "RouterUpdated", routerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryRouterUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRouterUpdated is a log parse operation binding the contract event 0x7aed1d3e8155a07ccf395e44ea3109a0e2d6c9b29bbbe9f142d9790596f4dc80.
//
// Solidity: event RouterUpdated(address indexed router)
func (_AgentRegistry *AgentRegistryFilterer) ParseRouterUpdated(log types.Log) (*AgentRegistryRouterUpdated, error) {
	event := new(AgentRegistryRouterUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "RouterUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryStakeControllerUpdatedIterator is returned from FilterStakeControllerUpdated and is used to iterate over the raw logs and unpacked data for StakeControllerUpdated events raised by the AgentRegistry contract.
type AgentRegistryStakeControllerUpdatedIterator struct {
	Event *AgentRegistryStakeControllerUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryStakeControllerUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryStakeControllerUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryStakeControllerUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryStakeControllerUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryStakeControllerUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryStakeControllerUpdated represents a StakeControllerUpdated event raised by the AgentRegistry contract.
type AgentRegistryStakeControllerUpdated struct {
	NewstakeController common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterStakeControllerUpdated is a free log retrieval operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_AgentRegistry *AgentRegistryFilterer) FilterStakeControllerUpdated(opts *bind.FilterOpts, newstakeController []common.Address) (*AgentRegistryStakeControllerUpdatedIterator, error) {

	var newstakeControllerRule []interface{}
	for _, newstakeControllerItem := range newstakeController {
		newstakeControllerRule = append(newstakeControllerRule, newstakeControllerItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "StakeControllerUpdated", newstakeControllerRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryStakeControllerUpdatedIterator{contract: _AgentRegistry.contract, event: "StakeControllerUpdated", logs: logs, sub: sub}, nil
}

// WatchStakeControllerUpdated is a free log subscription operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_AgentRegistry *AgentRegistryFilterer) WatchStakeControllerUpdated(opts *bind.WatchOpts, sink chan<- *AgentRegistryStakeControllerUpdated, newstakeController []common.Address) (event.Subscription, error) {

	var newstakeControllerRule []interface{}
	for _, newstakeControllerItem := range newstakeController {
		newstakeControllerRule = append(newstakeControllerRule, newstakeControllerItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "StakeControllerUpdated", newstakeControllerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryStakeControllerUpdated)
				if err := _AgentRegistry.contract.UnpackLog(event, "StakeControllerUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeControllerUpdated is a log parse operation binding the contract event 0xcaa3d2f2b6f12475c0d16d986f57f334e0e8b9fff5335d3b6aafbca251da3f00.
//
// Solidity: event StakeControllerUpdated(address indexed newstakeController)
func (_AgentRegistry *AgentRegistryFilterer) ParseStakeControllerUpdated(log types.Log) (*AgentRegistryStakeControllerUpdated, error) {
	event := new(AgentRegistryStakeControllerUpdated)
	if err := _AgentRegistry.contract.UnpackLog(event, "StakeControllerUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryStakeThresholdChangedIterator is returned from FilterStakeThresholdChanged and is used to iterate over the raw logs and unpacked data for StakeThresholdChanged events raised by the AgentRegistry contract.
type AgentRegistryStakeThresholdChangedIterator struct {
	Event *AgentRegistryStakeThresholdChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryStakeThresholdChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryStakeThresholdChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryStakeThresholdChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryStakeThresholdChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryStakeThresholdChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryStakeThresholdChanged represents a StakeThresholdChanged event raised by the AgentRegistry contract.
type AgentRegistryStakeThresholdChanged struct {
	Min       *big.Int
	Max       *big.Int
	Activated bool
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStakeThresholdChanged is a free log retrieval operation binding the contract event 0x6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b5.
//
// Solidity: event StakeThresholdChanged(uint256 min, uint256 max, bool activated)
func (_AgentRegistry *AgentRegistryFilterer) FilterStakeThresholdChanged(opts *bind.FilterOpts) (*AgentRegistryStakeThresholdChangedIterator, error) {

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "StakeThresholdChanged")
	if err != nil {
		return nil, err
	}
	return &AgentRegistryStakeThresholdChangedIterator{contract: _AgentRegistry.contract, event: "StakeThresholdChanged", logs: logs, sub: sub}, nil
}

// WatchStakeThresholdChanged is a free log subscription operation binding the contract event 0x6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b5.
//
// Solidity: event StakeThresholdChanged(uint256 min, uint256 max, bool activated)
func (_AgentRegistry *AgentRegistryFilterer) WatchStakeThresholdChanged(opts *bind.WatchOpts, sink chan<- *AgentRegistryStakeThresholdChanged) (event.Subscription, error) {

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "StakeThresholdChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryStakeThresholdChanged)
				if err := _AgentRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStakeThresholdChanged is a log parse operation binding the contract event 0x6f04c04a580d3632b42047d685b761c2be08b12eff709155ff4ee115ef0dc5b5.
//
// Solidity: event StakeThresholdChanged(uint256 min, uint256 max, bool activated)
func (_AgentRegistry *AgentRegistryFilterer) ParseStakeThresholdChanged(log types.Log) (*AgentRegistryStakeThresholdChanged, error) {
	event := new(AgentRegistryStakeThresholdChanged)
	if err := _AgentRegistry.contract.UnpackLog(event, "StakeThresholdChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the AgentRegistry contract.
type AgentRegistryTransferIterator struct {
	Event *AgentRegistryTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryTransfer represents a Transfer event raised by the AgentRegistry contract.
type AgentRegistryTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*AgentRegistryTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryTransferIterator{contract: _AgentRegistry.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *AgentRegistryTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryTransfer)
				if err := _AgentRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_AgentRegistry *AgentRegistryFilterer) ParseTransfer(log types.Log) (*AgentRegistryTransfer, error) {
	event := new(AgentRegistryTransfer)
	if err := _AgentRegistry.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// AgentRegistryUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the AgentRegistry contract.
type AgentRegistryUpgradedIterator struct {
	Event *AgentRegistryUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *AgentRegistryUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(AgentRegistryUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(AgentRegistryUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *AgentRegistryUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *AgentRegistryUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// AgentRegistryUpgraded represents a Upgraded event raised by the AgentRegistry contract.
type AgentRegistryUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AgentRegistry *AgentRegistryFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*AgentRegistryUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AgentRegistry.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &AgentRegistryUpgradedIterator{contract: _AgentRegistry.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AgentRegistry *AgentRegistryFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *AgentRegistryUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _AgentRegistry.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(AgentRegistryUpgraded)
				if err := _AgentRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_AgentRegistry *AgentRegistryFilterer) ParseUpgraded(log types.Log) (*AgentRegistryUpgraded, error) {
	event := new(AgentRegistryUpgraded)
	if err := _AgentRegistry.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
