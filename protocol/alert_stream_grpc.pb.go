// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: alert_stream.proto

package protocol

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertStreamServiceClient is the client API for AlertStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertStreamServiceClient interface {
	Subscribe(ctx context.Context, in *AlertStreamRequest, opts ...grpc.CallOption) (AlertStreamService_SubscribeClient, error)
}

type alertStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertStreamServiceClient(cc grpc.ClientConnInterface) AlertStreamServiceClient {
	return &alertStreamServiceClient{cc}
}

func (c *alertStreamServiceClient) Subscribe(ctx context.Context, in *AlertStreamRequest, opts ...grpc.CallOption) (AlertStreamService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlertStreamService_ServiceDesc.Streams[0], "/network.forta.AlertStreamService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &alertStreamServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlertStreamService_SubscribeClient interface {
	Recv() (*AlertStreamResponse, error)
	grpc.ClientStream
}

type alertStreamServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *alertStreamServiceSubscribeClient) Recv() (*AlertStreamResponse, error) {
	m := new(AlertStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlertStreamServiceServer is the server API for AlertStreamService service.
// All implementations must embed UnimplementedAlertStreamServiceServer
// for forward compatibility
type AlertStreamServiceServer interface {
	Subscribe(*AlertStreamRequest, AlertStreamService_SubscribeServer) error
	mustEmbedUnimplementedAlertStreamServiceServer()
}

// UnimplementedAlertStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlertStreamServiceServer struct {
}

func (UnimplementedAlertStreamServiceServer) Subscribe(*AlertStreamRequest, AlertStreamService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAlertStreamServiceServer) mustEmbedUnimplementedAlertStreamServiceServer() {}

// UnsafeAlertStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertStreamServiceServer will
// result in compilation errors.
type UnsafeAlertStreamServiceServer interface {
	mustEmbedUnimplementedAlertStreamServiceServer()
}

func RegisterAlertStreamServiceServer(s grpc.ServiceRegistrar, srv AlertStreamServiceServer) {
	s.RegisterService(&AlertStreamService_ServiceDesc, srv)
}

func _AlertStreamService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AlertStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlertStreamServiceServer).Subscribe(m, &alertStreamServiceSubscribeServer{stream})
}

type AlertStreamService_SubscribeServer interface {
	Send(*AlertStreamResponse) error
	grpc.ServerStream
}

type alertStreamServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *alertStreamServiceSubscribeServer) Send(m *AlertStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// AlertStreamService_ServiceDesc is the grpc.ServiceDesc for AlertStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlertStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.forta.AlertStreamService",
	HandlerType: (*AlertStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _AlertStreamService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "alert_stream.proto",
}
