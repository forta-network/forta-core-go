// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: batch.proto

package protocol

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// defaults to batch because previous batch schema didn't have the type property
type SignedPayload_PayloadType int32

const (
	SignedPayload_BATCH         SignedPayload_PayloadType = 0
	SignedPayload_BATCH_SUMMARY SignedPayload_PayloadType = 1
	SignedPayload_BATCH_RECEIPT SignedPayload_PayloadType = 2
)

// Enum value maps for SignedPayload_PayloadType.
var (
	SignedPayload_PayloadType_name = map[int32]string{
		0: "BATCH",
		1: "BATCH_SUMMARY",
		2: "BATCH_RECEIPT",
	}
	SignedPayload_PayloadType_value = map[string]int32{
		"BATCH":         0,
		"BATCH_SUMMARY": 1,
		"BATCH_RECEIPT": 2,
	}
)

func (x SignedPayload_PayloadType) Enum() *SignedPayload_PayloadType {
	p := new(SignedPayload_PayloadType)
	*p = x
	return p
}

func (x SignedPayload_PayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignedPayload_PayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_batch_proto_enumTypes[0].Descriptor()
}

func (SignedPayload_PayloadType) Type() protoreflect.EnumType {
	return &file_batch_proto_enumTypes[0]
}

func (x SignedPayload_PayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignedPayload_PayloadType.Descriptor instead.
func (SignedPayload_PayloadType) EnumDescriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{2, 0}
}

// a scanner encodes this into a SignedPayload of type BATCH_SUMMARY
type BatchSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch             string             `protobuf:"bytes,1,opt,name=batch,proto3" json:"batch,omitempty"`
	ChainId           uint64             `protobuf:"varint,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	BlockStart        uint64             `protobuf:"varint,3,opt,name=blockStart,proto3" json:"blockStart,omitempty"`
	BlockEnd          uint64             `protobuf:"varint,4,opt,name=blockEnd,proto3" json:"blockEnd,omitempty"`
	AlertCount        uint32             `protobuf:"varint,5,opt,name=alertCount,proto3" json:"alertCount,omitempty"`
	ScannerVersion    *ScannerVersion    `protobuf:"bytes,6,opt,name=scannerVersion,proto3" json:"scannerVersion,omitempty"`
	PreviousReceipt   string             `protobuf:"bytes,7,opt,name=previousReceipt,proto3" json:"previousReceipt,omitempty"`
	LatestBlockInput  uint64             `protobuf:"varint,8,opt,name=latestBlockInput,proto3" json:"latestBlockInput,omitempty"`
	Timestamp         string             `protobuf:"bytes,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	InspectionResults *InspectionResults `protobuf:"bytes,13,opt,name=inspectionResults,proto3" json:"inspectionResults,omitempty"`
	Provider          *Provider          `protobuf:"bytes,14,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *BatchSummary) Reset() {
	*x = BatchSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSummary) ProtoMessage() {}

func (x *BatchSummary) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSummary.ProtoReflect.Descriptor instead.
func (*BatchSummary) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{0}
}

func (x *BatchSummary) GetBatch() string {
	if x != nil {
		return x.Batch
	}
	return ""
}

func (x *BatchSummary) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *BatchSummary) GetBlockStart() uint64 {
	if x != nil {
		return x.BlockStart
	}
	return 0
}

func (x *BatchSummary) GetBlockEnd() uint64 {
	if x != nil {
		return x.BlockEnd
	}
	return 0
}

func (x *BatchSummary) GetAlertCount() uint32 {
	if x != nil {
		return x.AlertCount
	}
	return 0
}

func (x *BatchSummary) GetScannerVersion() *ScannerVersion {
	if x != nil {
		return x.ScannerVersion
	}
	return nil
}

func (x *BatchSummary) GetPreviousReceipt() string {
	if x != nil {
		return x.PreviousReceipt
	}
	return ""
}

func (x *BatchSummary) GetLatestBlockInput() uint64 {
	if x != nil {
		return x.LatestBlockInput
	}
	return 0
}

func (x *BatchSummary) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *BatchSummary) GetInspectionResults() *InspectionResults {
	if x != nil {
		return x.InspectionResults
	}
	return nil
}

func (x *BatchSummary) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

// an analyzer endpoint encodes this into a SignedPayload of type BATCH_RECEIPT
type BatchReceipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSummary *SignedPayload `protobuf:"bytes,1,opt,name=batchSummary,proto3" json:"batchSummary,omitempty"`
	Timestamp    string         `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *BatchReceipt) Reset() {
	*x = BatchReceipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchReceipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchReceipt) ProtoMessage() {}

func (x *BatchReceipt) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchReceipt.ProtoReflect.Descriptor instead.
func (*BatchReceipt) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{1}
}

func (x *BatchReceipt) GetBatchSummary() *SignedPayload {
	if x != nil {
		return x.BatchSummary
	}
	return nil
}

func (x *BatchReceipt) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type SignedPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      SignedPayload_PayloadType `protobuf:"varint,1,opt,name=type,proto3,enum=network.forta.SignedPayload_PayloadType" json:"type,omitempty"`
	Signature *Signature                `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Encoded   string                    `protobuf:"bytes,3,opt,name=encoded,proto3" json:"encoded,omitempty"`
}

func (x *SignedPayload) Reset() {
	*x = SignedPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedPayload) ProtoMessage() {}

func (x *SignedPayload) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedPayload.ProtoReflect.Descriptor instead.
func (*SignedPayload) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{2}
}

func (x *SignedPayload) GetType() SignedPayload_PayloadType {
	if x != nil {
		return x.Type
	}
	return SignedPayload_BATCH
}

func (x *SignedPayload) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignedPayload) GetEncoded() string {
	if x != nil {
		return x.Encoded
	}
	return ""
}

// a scanner encodes this into a SignedPayload of type BATCH
type AlertBatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId           uint64                     `protobuf:"varint,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	BlockStart        uint64                     `protobuf:"varint,2,opt,name=blockStart,proto3" json:"blockStart,omitempty"`
	BlockEnd          uint64                     `protobuf:"varint,3,opt,name=blockEnd,proto3" json:"blockEnd,omitempty"`
	AlertCount        uint32                     `protobuf:"varint,4,opt,name=alertCount,proto3" json:"alertCount,omitempty"`
	MaxSeverity       Finding_Severity           `protobuf:"varint,5,opt,name=maxSeverity,proto3,enum=network.forta.Finding_Severity" json:"maxSeverity,omitempty"`
	Results           []*BlockResults            `protobuf:"bytes,6,rep,name=results,proto3" json:"results,omitempty"`
	Agents            []*BatchAgent              `protobuf:"bytes,7,rep,name=agents,proto3" json:"agents,omitempty"`
	Metrics           []*AgentMetrics            `protobuf:"bytes,8,rep,name=metrics,proto3" json:"metrics,omitempty"`
	ScannerVersion    *ScannerVersion            `protobuf:"bytes,9,opt,name=scannerVersion,proto3" json:"scannerVersion,omitempty"`
	Parent            string                     `protobuf:"bytes,10,opt,name=parent,proto3" json:"parent,omitempty"`
	PrivateAlerts     []*AgentAlerts             `protobuf:"bytes,11,rep,name=privateAlerts,proto3" json:"privateAlerts,omitempty"`
	LatestBlockInput  uint64                     `protobuf:"varint,12,opt,name=latestBlockInput,proto3" json:"latestBlockInput,omitempty"`
	InspectionResults *InspectionResults         `protobuf:"bytes,13,opt,name=inspectionResults,proto3" json:"inspectionResults,omitempty"`
	CombinationAlerts []*CombinationAlertResults `protobuf:"bytes,14,rep,name=combinationAlerts,proto3" json:"combinationAlerts,omitempty"`
	Provider          *Provider                  `protobuf:"bytes,15,opt,name=provider,proto3" json:"provider,omitempty"`
	Estimation        *Estimation                `protobuf:"bytes,16,opt,name=estimation,proto3" json:"estimation,omitempty"`
}

func (x *AlertBatch) Reset() {
	*x = AlertBatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertBatch) ProtoMessage() {}

func (x *AlertBatch) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertBatch.ProtoReflect.Descriptor instead.
func (*AlertBatch) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{3}
}

func (x *AlertBatch) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *AlertBatch) GetBlockStart() uint64 {
	if x != nil {
		return x.BlockStart
	}
	return 0
}

func (x *AlertBatch) GetBlockEnd() uint64 {
	if x != nil {
		return x.BlockEnd
	}
	return 0
}

func (x *AlertBatch) GetAlertCount() uint32 {
	if x != nil {
		return x.AlertCount
	}
	return 0
}

func (x *AlertBatch) GetMaxSeverity() Finding_Severity {
	if x != nil {
		return x.MaxSeverity
	}
	return Finding_UNKNOWN
}

func (x *AlertBatch) GetResults() []*BlockResults {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *AlertBatch) GetAgents() []*BatchAgent {
	if x != nil {
		return x.Agents
	}
	return nil
}

func (x *AlertBatch) GetMetrics() []*AgentMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *AlertBatch) GetScannerVersion() *ScannerVersion {
	if x != nil {
		return x.ScannerVersion
	}
	return nil
}

func (x *AlertBatch) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *AlertBatch) GetPrivateAlerts() []*AgentAlerts {
	if x != nil {
		return x.PrivateAlerts
	}
	return nil
}

func (x *AlertBatch) GetLatestBlockInput() uint64 {
	if x != nil {
		return x.LatestBlockInput
	}
	return 0
}

func (x *AlertBatch) GetInspectionResults() *InspectionResults {
	if x != nil {
		return x.InspectionResults
	}
	return nil
}

func (x *AlertBatch) GetCombinationAlerts() []*CombinationAlertResults {
	if x != nil {
		return x.CombinationAlerts
	}
	return nil
}

func (x *AlertBatch) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *AlertBatch) GetEstimation() *Estimation {
	if x != nil {
		return x.Estimation
	}
	return nil
}

type BlockResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block        *Block                `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Results      []*AgentAlerts        `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	Transactions []*TransactionResults `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *BlockResults) Reset() {
	*x = BlockResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockResults) ProtoMessage() {}

func (x *BlockResults) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockResults.ProtoReflect.Descriptor instead.
func (*BlockResults) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{4}
}

func (x *BlockResults) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BlockResults) GetResults() []*AgentAlerts {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BlockResults) GetTransactions() []*TransactionResults {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type TransactionResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *TransactionEvent `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Results     []*AgentAlerts    `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *TransactionResults) Reset() {
	*x = TransactionResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionResults) ProtoMessage() {}

func (x *TransactionResults) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionResults.ProtoReflect.Descriptor instead.
func (*TransactionResults) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionResults) GetTransaction() *TransactionEvent {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionResults) GetResults() []*AgentAlerts {
	if x != nil {
		return x.Results
	}
	return nil
}

type CombinationAlertResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlertEvent *AlertEvent    `protobuf:"bytes,1,opt,name=alertEvent,proto3" json:"alertEvent,omitempty"`
	Results    []*AgentAlerts `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CombinationAlertResults) Reset() {
	*x = CombinationAlertResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombinationAlertResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinationAlertResults) ProtoMessage() {}

func (x *CombinationAlertResults) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinationAlertResults.ProtoReflect.Descriptor instead.
func (*CombinationAlertResults) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{6}
}

func (x *CombinationAlertResults) GetAlertEvent() *AlertEvent {
	if x != nil {
		return x.AlertEvent
	}
	return nil
}

func (x *CombinationAlertResults) GetResults() []*AgentAlerts {
	if x != nil {
		return x.Results
	}
	return nil
}

type AgentAlerts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentManifest string         `protobuf:"bytes,1,opt,name=agentManifest,proto3" json:"agentManifest,omitempty"`
	Alerts        []*SignedAlert `protobuf:"bytes,2,rep,name=alerts,proto3" json:"alerts,omitempty"`
}

func (x *AgentAlerts) Reset() {
	*x = AgentAlerts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentAlerts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentAlerts) ProtoMessage() {}

func (x *AgentAlerts) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentAlerts.ProtoReflect.Descriptor instead.
func (*AgentAlerts) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{7}
}

func (x *AgentAlerts) GetAgentManifest() string {
	if x != nil {
		return x.AgentManifest
	}
	return ""
}

func (x *AgentAlerts) GetAlerts() []*SignedAlert {
	if x != nil {
		return x.Alerts
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash      string `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	BlockNumber    uint64 `protobuf:"varint,2,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	BlockTimestamp string `protobuf:"bytes,3,opt,name=blockTimestamp,proto3" json:"blockTimestamp,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{8}
}

func (x *Block) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Block) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Block) GetBlockTimestamp() string {
	if x != nil {
		return x.BlockTimestamp
	}
	return ""
}

type BatchAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info         *AgentInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Blocks       []uint64   `protobuf:"varint,2,rep,packed,name=blocks,proto3" json:"blocks,omitempty"`
	Transactions []string   `protobuf:"bytes,3,rep,name=transactions,proto3" json:"transactions,omitempty"`
	Combinations []string   `protobuf:"bytes,4,rep,name=combinations,proto3" json:"combinations,omitempty"`
}

func (x *BatchAgent) Reset() {
	*x = BatchAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchAgent) ProtoMessage() {}

func (x *BatchAgent) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchAgent.ProtoReflect.Descriptor instead.
func (*BatchAgent) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{9}
}

func (x *BatchAgent) GetInfo() *AgentInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *BatchAgent) GetBlocks() []uint64 {
	if x != nil {
		return x.Blocks
	}
	return nil
}

func (x *BatchAgent) GetTransactions() []string {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *BatchAgent) GetCombinations() []string {
	if x != nil {
		return x.Combinations
	}
	return nil
}

type ScannerVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit      string `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
	Ipfs        string `protobuf:"bytes,2,opt,name=ipfs,proto3" json:"ipfs,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	AutoUpdates bool   `protobuf:"varint,4,opt,name=autoUpdates,proto3" json:"autoUpdates,omitempty"`
}

func (x *ScannerVersion) Reset() {
	*x = ScannerVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScannerVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannerVersion) ProtoMessage() {}

func (x *ScannerVersion) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScannerVersion.ProtoReflect.Descriptor instead.
func (*ScannerVersion) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{10}
}

func (x *ScannerVersion) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *ScannerVersion) GetIpfs() string {
	if x != nil {
		return x.Ipfs
	}
	return ""
}

func (x *ScannerVersion) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ScannerVersion) GetAutoUpdates() bool {
	if x != nil {
		return x.AutoUpdates
	}
	return false
}

type InspectionResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs     *InspectionInputs  `protobuf:"bytes,1,opt,name=inputs,proto3" json:"inputs,omitempty"`
	Metadata   map[string]string  `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Indicators map[string]float64 `protobuf:"bytes,3,rep,name=indicators,proto3" json:"indicators,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *InspectionResults) Reset() {
	*x = InspectionResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectionResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectionResults) ProtoMessage() {}

func (x *InspectionResults) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectionResults.ProtoReflect.Descriptor instead.
func (*InspectionResults) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{11}
}

func (x *InspectionResults) GetInputs() *InspectionInputs {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *InspectionResults) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InspectionResults) GetIndicators() map[string]float64 {
	if x != nil {
		return x.Indicators
	}
	return nil
}

type InspectionInputs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNumber        uint64 `protobuf:"varint,1,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	ScanApiHost        string `protobuf:"bytes,2,opt,name=scanApiHost,proto3" json:"scanApiHost,omitempty"`
	ProxyApiHost       string `protobuf:"bytes,3,opt,name=proxyApiHost,proto3" json:"proxyApiHost,omitempty"`
	TraceApiHost       string `protobuf:"bytes,4,opt,name=traceApiHost,proto3" json:"traceApiHost,omitempty"`
	CheckTrace         bool   `protobuf:"varint,5,opt,name=checkTrace,proto3" json:"checkTrace,omitempty"`
	RegistryApiHost    string `protobuf:"bytes,6,opt,name=registryApiHost,proto3" json:"registryApiHost,omitempty"`
	EnsContractAddress string `protobuf:"bytes,7,opt,name=ensContractAddress,proto3" json:"ensContractAddress,omitempty"`
	ScannerAddress     string `protobuf:"bytes,8,opt,name=scannerAddress,proto3" json:"scannerAddress,omitempty"`
}

func (x *InspectionInputs) Reset() {
	*x = InspectionInputs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InspectionInputs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InspectionInputs) ProtoMessage() {}

func (x *InspectionInputs) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InspectionInputs.ProtoReflect.Descriptor instead.
func (*InspectionInputs) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{12}
}

func (x *InspectionInputs) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *InspectionInputs) GetScanApiHost() string {
	if x != nil {
		return x.ScanApiHost
	}
	return ""
}

func (x *InspectionInputs) GetProxyApiHost() string {
	if x != nil {
		return x.ProxyApiHost
	}
	return ""
}

func (x *InspectionInputs) GetTraceApiHost() string {
	if x != nil {
		return x.TraceApiHost
	}
	return ""
}

func (x *InspectionInputs) GetCheckTrace() bool {
	if x != nil {
		return x.CheckTrace
	}
	return false
}

func (x *InspectionInputs) GetRegistryApiHost() string {
	if x != nil {
		return x.RegistryApiHost
	}
	return ""
}

func (x *InspectionInputs) GetEnsContractAddress() string {
	if x != nil {
		return x.EnsContractAddress
	}
	return ""
}

func (x *InspectionInputs) GetScannerAddress() string {
	if x != nil {
		return x.ScannerAddress
	}
	return ""
}

type Estimation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockScore float64 `protobuf:"fixed64,1,opt,name=blockScore,proto3" json:"blockScore,omitempty"`
}

func (x *Estimation) Reset() {
	*x = Estimation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batch_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Estimation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Estimation) ProtoMessage() {}

func (x *Estimation) ProtoReflect() protoreflect.Message {
	mi := &file_batch_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Estimation.ProtoReflect.Descriptor instead.
func (*Estimation) Descriptor() ([]byte, []int) {
	return file_batch_proto_rawDescGZIP(), []int{13}
}

func (x *Estimation) GetBlockScore() float64 {
	if x != nil {
		return x.BlockScore
	}
	return 0
}

var File_batch_proto protoreflect.FileDescriptor

var file_batch_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x1a, 0x0f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x62, 0x6f, 0x74, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x61,
	0x6c, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x03, 0x0a, 0x0c, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x53,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x4e, 0x0a, 0x11, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x11,
	0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f,
	0x72, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xdf, 0x01, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x22, 0x3e, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x55, 0x4d, 0x4d,
	0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52,
	0x45, 0x43, 0x45, 0x49, 0x50, 0x54, 0x10, 0x02, 0x22, 0xc9, 0x06, 0x0a, 0x0a, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a,
	0x0b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72,
	0x74, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74,
	0x61, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x40, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x4e,
	0x0a, 0x11, 0x69, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x11, 0x69, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x54,
	0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66,
	0x6f, 0x72, 0x74, 0x61, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72,
	0x74, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x8d,
	0x01, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x8a,
	0x01, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x67, 0x0a, 0x0b, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x06, 0x61, 0x6c,
	0x65, 0x72, 0x74, 0x73, 0x22, 0x6f, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c, 0x0a,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x9a, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72,
	0x74, 0x61, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x78, 0x0a, 0x0e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x70, 0x66, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x70, 0x66, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xe6, 0x02, 0x0a,
	0x11, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72,
	0x74, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x49, 0x6e,
	0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x2e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x69,
	0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc0, 0x02, 0x0a, 0x10, 0x49, 0x6e, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x63, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x41, 0x70, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x70, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x41, 0x70, 0x69, 0x48, 0x6f,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x41, 0x70, 0x69, 0x48, 0x6f,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x41,
	0x70, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x41, 0x70, 0x69, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x41, 0x70, 0x69, 0x48, 0x6f, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x6e,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2c, 0x0a, 0x0a, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x00, 0x50, 0x01, 0x50, 0x02, 0x50, 0x03, 0x50, 0x04, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_batch_proto_rawDescOnce sync.Once
	file_batch_proto_rawDescData = file_batch_proto_rawDesc
)

func file_batch_proto_rawDescGZIP() []byte {
	file_batch_proto_rawDescOnce.Do(func() {
		file_batch_proto_rawDescData = protoimpl.X.CompressGZIP(file_batch_proto_rawDescData)
	})
	return file_batch_proto_rawDescData
}

var file_batch_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_batch_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_batch_proto_goTypes = []interface{}{
	(SignedPayload_PayloadType)(0),  // 0: network.forta.SignedPayload.PayloadType
	(*BatchSummary)(nil),            // 1: network.forta.BatchSummary
	(*BatchReceipt)(nil),            // 2: network.forta.BatchReceipt
	(*SignedPayload)(nil),           // 3: network.forta.SignedPayload
	(*AlertBatch)(nil),              // 4: network.forta.AlertBatch
	(*BlockResults)(nil),            // 5: network.forta.BlockResults
	(*TransactionResults)(nil),      // 6: network.forta.TransactionResults
	(*CombinationAlertResults)(nil), // 7: network.forta.CombinationAlertResults
	(*AgentAlerts)(nil),             // 8: network.forta.AgentAlerts
	(*Block)(nil),                   // 9: network.forta.Block
	(*BatchAgent)(nil),              // 10: network.forta.BatchAgent
	(*ScannerVersion)(nil),          // 11: network.forta.ScannerVersion
	(*InspectionResults)(nil),       // 12: network.forta.InspectionResults
	(*InspectionInputs)(nil),        // 13: network.forta.InspectionInputs
	(*Estimation)(nil),              // 14: network.forta.Estimation
	nil,                             // 15: network.forta.InspectionResults.MetadataEntry
	nil,                             // 16: network.forta.InspectionResults.IndicatorsEntry
	(*Provider)(nil),                // 17: network.forta.Provider
	(*Signature)(nil),               // 18: network.forta.Signature
	(Finding_Severity)(0),           // 19: network.forta.Finding.Severity
	(*AgentMetrics)(nil),            // 20: network.forta.AgentMetrics
	(*TransactionEvent)(nil),        // 21: network.forta.TransactionEvent
	(*AlertEvent)(nil),              // 22: network.forta.AlertEvent
	(*SignedAlert)(nil),             // 23: network.forta.SignedAlert
	(*AgentInfo)(nil),               // 24: network.forta.AgentInfo
}
var file_batch_proto_depIdxs = []int32{
	11, // 0: network.forta.BatchSummary.scannerVersion:type_name -> network.forta.ScannerVersion
	12, // 1: network.forta.BatchSummary.inspectionResults:type_name -> network.forta.InspectionResults
	17, // 2: network.forta.BatchSummary.provider:type_name -> network.forta.Provider
	3,  // 3: network.forta.BatchReceipt.batchSummary:type_name -> network.forta.SignedPayload
	0,  // 4: network.forta.SignedPayload.type:type_name -> network.forta.SignedPayload.PayloadType
	18, // 5: network.forta.SignedPayload.signature:type_name -> network.forta.Signature
	19, // 6: network.forta.AlertBatch.maxSeverity:type_name -> network.forta.Finding.Severity
	5,  // 7: network.forta.AlertBatch.results:type_name -> network.forta.BlockResults
	10, // 8: network.forta.AlertBatch.agents:type_name -> network.forta.BatchAgent
	20, // 9: network.forta.AlertBatch.metrics:type_name -> network.forta.AgentMetrics
	11, // 10: network.forta.AlertBatch.scannerVersion:type_name -> network.forta.ScannerVersion
	8,  // 11: network.forta.AlertBatch.privateAlerts:type_name -> network.forta.AgentAlerts
	12, // 12: network.forta.AlertBatch.inspectionResults:type_name -> network.forta.InspectionResults
	7,  // 13: network.forta.AlertBatch.combinationAlerts:type_name -> network.forta.CombinationAlertResults
	17, // 14: network.forta.AlertBatch.provider:type_name -> network.forta.Provider
	14, // 15: network.forta.AlertBatch.estimation:type_name -> network.forta.Estimation
	9,  // 16: network.forta.BlockResults.block:type_name -> network.forta.Block
	8,  // 17: network.forta.BlockResults.results:type_name -> network.forta.AgentAlerts
	6,  // 18: network.forta.BlockResults.transactions:type_name -> network.forta.TransactionResults
	21, // 19: network.forta.TransactionResults.transaction:type_name -> network.forta.TransactionEvent
	8,  // 20: network.forta.TransactionResults.results:type_name -> network.forta.AgentAlerts
	22, // 21: network.forta.CombinationAlertResults.alertEvent:type_name -> network.forta.AlertEvent
	8,  // 22: network.forta.CombinationAlertResults.results:type_name -> network.forta.AgentAlerts
	23, // 23: network.forta.AgentAlerts.alerts:type_name -> network.forta.SignedAlert
	24, // 24: network.forta.BatchAgent.info:type_name -> network.forta.AgentInfo
	13, // 25: network.forta.InspectionResults.inputs:type_name -> network.forta.InspectionInputs
	15, // 26: network.forta.InspectionResults.metadata:type_name -> network.forta.InspectionResults.MetadataEntry
	16, // 27: network.forta.InspectionResults.indicators:type_name -> network.forta.InspectionResults.IndicatorsEntry
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_batch_proto_init() }
func file_batch_proto_init() {
	if File_batch_proto != nil {
		return
	}
	file_publisher_proto_init()
	file_agent_proto_init()
	file_bot_metrics_proto_init()
	file_alert_proto_init()
	file_storage_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_batch_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchReceipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertBatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CombinationAlertResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentAlerts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScannerVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectionResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InspectionInputs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batch_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Estimation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_batch_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_batch_proto_goTypes,
		DependencyIndexes: file_batch_proto_depIdxs,
		EnumInfos:         file_batch_proto_enumTypes,
		MessageInfos:      file_batch_proto_msgTypes,
	}.Build()
	File_batch_proto = out.File
	file_batch_proto_rawDesc = nil
	file_batch_proto_goTypes = nil
	file_batch_proto_depIdxs = nil
}
