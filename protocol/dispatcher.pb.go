// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: dispatcher.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlocksData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Blocks []*BlockData `protobuf:"bytes,1,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *BlocksData) Reset() {
	*x = BlocksData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlocksData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlocksData) ProtoMessage() {}

func (x *BlocksData) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlocksData.ProtoReflect.Descriptor instead.
func (*BlocksData) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{0}
}

func (x *BlocksData) GetBlocks() []*BlockData {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type BlockData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainID uint64                 `protobuf:"varint,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	Block   *BlockWithTransactions `protobuf:"bytes,2,opt,name=block,proto3" json:"block,omitempty"`
	Logs    []*LogEntry            `protobuf:"bytes,3,rep,name=logs,proto3" json:"logs,omitempty"`
	Traces  []*Trace               `protobuf:"bytes,4,rep,name=traces,proto3" json:"traces,omitempty"`
}

func (x *BlockData) Reset() {
	*x = BlockData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockData) ProtoMessage() {}

func (x *BlockData) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockData.ProtoReflect.Descriptor instead.
func (*BlockData) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{1}
}

func (x *BlockData) GetChainID() uint64 {
	if x != nil {
		return x.ChainID
	}
	return 0
}

func (x *BlockData) GetBlock() *BlockWithTransactions {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *BlockData) GetLogs() []*LogEntry {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *BlockData) GetTraces() []*Trace {
	if x != nil {
		return x.Traces
	}
	return nil
}

type BlockWithTransactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseFeePerGas         string         `protobuf:"bytes,1,opt,name=baseFeePerGas,proto3" json:"baseFeePerGas,omitempty"`
	Difficulty            string         `protobuf:"bytes,2,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	ExtraData             string         `protobuf:"bytes,3,opt,name=extraData,proto3" json:"extraData,omitempty"`
	GasLimit              string         `protobuf:"bytes,4,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	GasUsed               string         `protobuf:"bytes,5,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`
	Hash                  string         `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	LogsBloom             string         `protobuf:"bytes,7,opt,name=logsBloom,proto3" json:"logsBloom,omitempty"`
	Miner                 string         `protobuf:"bytes,8,opt,name=miner,proto3" json:"miner,omitempty"`
	MixHash               string         `protobuf:"bytes,9,opt,name=mixHash,proto3" json:"mixHash,omitempty"`
	Nonce                 string         `protobuf:"bytes,10,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Number                string         `protobuf:"bytes,11,opt,name=number,proto3" json:"number,omitempty"`
	ParentHash            string         `protobuf:"bytes,12,opt,name=parentHash,proto3" json:"parentHash,omitempty"`
	ReceiptsRoot          string         `protobuf:"bytes,13,opt,name=receiptsRoot,proto3" json:"receiptsRoot,omitempty"`
	Sha3Uncles            string         `protobuf:"bytes,14,opt,name=sha3Uncles,proto3" json:"sha3Uncles,omitempty"`
	Size                  string         `protobuf:"bytes,15,opt,name=size,proto3" json:"size,omitempty"`
	StateRoot             string         `protobuf:"bytes,16,opt,name=stateRoot,proto3" json:"stateRoot,omitempty"`
	Timestamp             string         `protobuf:"bytes,17,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TotalDifficulty       string         `protobuf:"bytes,18,opt,name=totalDifficulty,proto3" json:"totalDifficulty,omitempty"`
	Transactions          []*Transaction `protobuf:"bytes,19,rep,name=transactions,proto3" json:"transactions,omitempty"`
	TransactionsRoot      string         `protobuf:"bytes,20,opt,name=transactionsRoot,proto3" json:"transactionsRoot,omitempty"`
	Uncles                []string       `protobuf:"bytes,21,rep,name=uncles,proto3" json:"uncles,omitempty"`
	BlobGasUsed           string         `protobuf:"bytes,22,opt,name=blobGasUsed,proto3" json:"blobGasUsed,omitempty"`
	ParentBeaconBlockRoot string         `protobuf:"bytes,23,opt,name=parentBeaconBlockRoot,proto3" json:"parentBeaconBlockRoot,omitempty"`
	ExcessBlobGas         string         `protobuf:"bytes,24,opt,name=excessBlobGas,proto3" json:"excessBlobGas,omitempty"`
	Withdrawals           []*Withdrawal  `protobuf:"bytes,25,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	WithdrawalsRoot       string         `protobuf:"bytes,26,opt,name=withdrawalsRoot,proto3" json:"withdrawalsRoot,omitempty"`
}

func (x *BlockWithTransactions) Reset() {
	*x = BlockWithTransactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockWithTransactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockWithTransactions) ProtoMessage() {}

func (x *BlockWithTransactions) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockWithTransactions.ProtoReflect.Descriptor instead.
func (*BlockWithTransactions) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{2}
}

func (x *BlockWithTransactions) GetBaseFeePerGas() string {
	if x != nil {
		return x.BaseFeePerGas
	}
	return ""
}

func (x *BlockWithTransactions) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *BlockWithTransactions) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

func (x *BlockWithTransactions) GetGasLimit() string {
	if x != nil {
		return x.GasLimit
	}
	return ""
}

func (x *BlockWithTransactions) GetGasUsed() string {
	if x != nil {
		return x.GasUsed
	}
	return ""
}

func (x *BlockWithTransactions) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *BlockWithTransactions) GetLogsBloom() string {
	if x != nil {
		return x.LogsBloom
	}
	return ""
}

func (x *BlockWithTransactions) GetMiner() string {
	if x != nil {
		return x.Miner
	}
	return ""
}

func (x *BlockWithTransactions) GetMixHash() string {
	if x != nil {
		return x.MixHash
	}
	return ""
}

func (x *BlockWithTransactions) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *BlockWithTransactions) GetNumber() string {
	if x != nil {
		return x.Number
	}
	return ""
}

func (x *BlockWithTransactions) GetParentHash() string {
	if x != nil {
		return x.ParentHash
	}
	return ""
}

func (x *BlockWithTransactions) GetReceiptsRoot() string {
	if x != nil {
		return x.ReceiptsRoot
	}
	return ""
}

func (x *BlockWithTransactions) GetSha3Uncles() string {
	if x != nil {
		return x.Sha3Uncles
	}
	return ""
}

func (x *BlockWithTransactions) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *BlockWithTransactions) GetStateRoot() string {
	if x != nil {
		return x.StateRoot
	}
	return ""
}

func (x *BlockWithTransactions) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *BlockWithTransactions) GetTotalDifficulty() string {
	if x != nil {
		return x.TotalDifficulty
	}
	return ""
}

func (x *BlockWithTransactions) GetTransactions() []*Transaction {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *BlockWithTransactions) GetTransactionsRoot() string {
	if x != nil {
		return x.TransactionsRoot
	}
	return ""
}

func (x *BlockWithTransactions) GetUncles() []string {
	if x != nil {
		return x.Uncles
	}
	return nil
}

func (x *BlockWithTransactions) GetBlobGasUsed() string {
	if x != nil {
		return x.BlobGasUsed
	}
	return ""
}

func (x *BlockWithTransactions) GetParentBeaconBlockRoot() string {
	if x != nil {
		return x.ParentBeaconBlockRoot
	}
	return ""
}

func (x *BlockWithTransactions) GetExcessBlobGas() string {
	if x != nil {
		return x.ExcessBlobGas
	}
	return ""
}

func (x *BlockWithTransactions) GetWithdrawals() []*Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *BlockWithTransactions) GetWithdrawalsRoot() string {
	if x != nil {
		return x.WithdrawalsRoot
	}
	return ""
}

type Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index          string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	ValidatorIndex string `protobuf:"bytes,2,opt,name=validatorIndex,proto3" json:"validatorIndex,omitempty"`
	Address        string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Amount         string `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *Withdrawal) Reset() {
	*x = Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Withdrawal) ProtoMessage() {}

func (x *Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Withdrawal.ProtoReflect.Descriptor instead.
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{3}
}

func (x *Withdrawal) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *Withdrawal) GetValidatorIndex() string {
	if x != nil {
		return x.ValidatorIndex
	}
	return ""
}

func (x *Withdrawal) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Withdrawal) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type LogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BlockHash        string   `protobuf:"bytes,2,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	BlockNumber      string   `protobuf:"bytes,3,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	Data             string   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	LogIndex         string   `protobuf:"bytes,5,opt,name=logIndex,proto3" json:"logIndex,omitempty"`
	Removed          bool     `protobuf:"varint,6,opt,name=removed,proto3" json:"removed,omitempty"`
	Topics           []string `protobuf:"bytes,7,rep,name=topics,proto3" json:"topics,omitempty"`
	TransactionHash  string   `protobuf:"bytes,8,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`
	TransactionIndex string   `protobuf:"bytes,9,opt,name=transactionIndex,proto3" json:"transactionIndex,omitempty"`
}

func (x *LogEntry) Reset() {
	*x = LogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntry) ProtoMessage() {}

func (x *LogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntry.ProtoReflect.Descriptor instead.
func (*LogEntry) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{4}
}

func (x *LogEntry) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LogEntry) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *LogEntry) GetBlockNumber() string {
	if x != nil {
		return x.BlockNumber
	}
	return ""
}

func (x *LogEntry) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *LogEntry) GetLogIndex() string {
	if x != nil {
		return x.LogIndex
	}
	return ""
}

func (x *LogEntry) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

func (x *LogEntry) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *LogEntry) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *LogEntry) GetTransactionIndex() string {
	if x != nil {
		return x.TransactionIndex
	}
	return ""
}

type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From                 string        `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Gas                  string        `protobuf:"bytes,4,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice             string        `protobuf:"bytes,5,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	Hash                 string        `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	Input                string        `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`
	Nonce                string        `protobuf:"bytes,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	To                   string        `protobuf:"bytes,9,opt,name=to,proto3" json:"to,omitempty"`
	TransactionIndex     string        `protobuf:"bytes,10,opt,name=transactionIndex,proto3" json:"transactionIndex,omitempty"`
	Value                string        `protobuf:"bytes,11,opt,name=value,proto3" json:"value,omitempty"`
	V                    string        `protobuf:"bytes,12,opt,name=v,proto3" json:"v,omitempty"`
	R                    string        `protobuf:"bytes,13,opt,name=r,proto3" json:"r,omitempty"`
	S                    string        `protobuf:"bytes,14,opt,name=s,proto3" json:"s,omitempty"`
	MaxFeePerGas         string        `protobuf:"bytes,15,opt,name=maxFeePerGas,proto3" json:"maxFeePerGas,omitempty"`
	MaxPriorityFeePerGas string        `protobuf:"bytes,16,opt,name=maxPriorityFeePerGas,proto3" json:"maxPriorityFeePerGas,omitempty"`
	Type                 string        `protobuf:"bytes,17,opt,name=type,proto3" json:"type,omitempty"`
	AccessList           []*AccessList `protobuf:"bytes,18,rep,name=accessList,proto3" json:"accessList,omitempty"`
	YParity              string        `protobuf:"bytes,19,opt,name=yParity,proto3" json:"yParity,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{5}
}

func (x *Transaction) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Transaction) GetGas() string {
	if x != nil {
		return x.Gas
	}
	return ""
}

func (x *Transaction) GetGasPrice() string {
	if x != nil {
		return x.GasPrice
	}
	return ""
}

func (x *Transaction) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Transaction) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *Transaction) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *Transaction) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Transaction) GetTransactionIndex() string {
	if x != nil {
		return x.TransactionIndex
	}
	return ""
}

func (x *Transaction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Transaction) GetV() string {
	if x != nil {
		return x.V
	}
	return ""
}

func (x *Transaction) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

func (x *Transaction) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *Transaction) GetMaxFeePerGas() string {
	if x != nil {
		return x.MaxFeePerGas
	}
	return ""
}

func (x *Transaction) GetMaxPriorityFeePerGas() string {
	if x != nil {
		return x.MaxPriorityFeePerGas
	}
	return ""
}

func (x *Transaction) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Transaction) GetAccessList() []*AccessList {
	if x != nil {
		return x.AccessList
	}
	return nil
}

func (x *Transaction) GetYParity() string {
	if x != nil {
		return x.YParity
	}
	return ""
}

type AccessList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	StorageKeys []string `protobuf:"bytes,2,rep,name=storageKeys,proto3" json:"storageKeys,omitempty"`
}

func (x *AccessList) Reset() {
	*x = AccessList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessList) ProtoMessage() {}

func (x *AccessList) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessList.ProtoReflect.Descriptor instead.
func (*AccessList) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{6}
}

func (x *AccessList) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AccessList) GetStorageKeys() []string {
	if x != nil {
		return x.StorageKeys
	}
	return nil
}

type TraceAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallType      string `protobuf:"bytes,1,opt,name=callType,proto3" json:"callType,omitempty"`
	To            string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Input         string `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	From          string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	Gas           string `protobuf:"bytes,5,opt,name=gas,proto3" json:"gas,omitempty"`
	Value         string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	Init          string `protobuf:"bytes,7,opt,name=init,proto3" json:"init,omitempty"`
	Address       string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	Balance       string `protobuf:"bytes,9,opt,name=balance,proto3" json:"balance,omitempty"`
	RefundAddress string `protobuf:"bytes,10,opt,name=refundAddress,proto3" json:"refundAddress,omitempty"`
}

func (x *TraceAction) Reset() {
	*x = TraceAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceAction) ProtoMessage() {}

func (x *TraceAction) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceAction.ProtoReflect.Descriptor instead.
func (*TraceAction) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{7}
}

func (x *TraceAction) GetCallType() string {
	if x != nil {
		return x.CallType
	}
	return ""
}

func (x *TraceAction) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TraceAction) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *TraceAction) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TraceAction) GetGas() string {
	if x != nil {
		return x.Gas
	}
	return ""
}

func (x *TraceAction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TraceAction) GetInit() string {
	if x != nil {
		return x.Init
	}
	return ""
}

func (x *TraceAction) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TraceAction) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

func (x *TraceAction) GetRefundAddress() string {
	if x != nil {
		return x.RefundAddress
	}
	return ""
}

type TraceResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output  string `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	GasUsed string `protobuf:"bytes,2,opt,name=gasUsed,proto3" json:"gasUsed,omitempty"`
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Code    string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *TraceResult) Reset() {
	*x = TraceResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceResult) ProtoMessage() {}

func (x *TraceResult) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceResult.ProtoReflect.Descriptor instead.
func (*TraceResult) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{8}
}

func (x *TraceResult) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

func (x *TraceResult) GetGasUsed() string {
	if x != nil {
		return x.GasUsed
	}
	return ""
}

func (x *TraceResult) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TraceResult) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type Trace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action              *TraceAction `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
	Result              *TraceResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Subtraces           int32        `protobuf:"varint,3,opt,name=subtraces,proto3" json:"subtraces,omitempty"`
	TraceAddress        []int64      `protobuf:"varint,4,rep,packed,name=traceAddress,proto3" json:"traceAddress,omitempty"`
	TransactionHash     string       `protobuf:"bytes,5,opt,name=transactionHash,proto3" json:"transactionHash,omitempty"`
	TransactionPosition int64        `protobuf:"varint,6,opt,name=transactionPosition,proto3" json:"transactionPosition,omitempty"`
	Type                string       `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	Error               string       `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Trace) Reset() {
	*x = Trace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dispatcher_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trace) ProtoMessage() {}

func (x *Trace) ProtoReflect() protoreflect.Message {
	mi := &file_dispatcher_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trace.ProtoReflect.Descriptor instead.
func (*Trace) Descriptor() ([]byte, []int) {
	return file_dispatcher_proto_rawDescGZIP(), []int{9}
}

func (x *Trace) GetAction() *TraceAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *Trace) GetResult() *TraceResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Trace) GetSubtraces() int32 {
	if x != nil {
		return x.Subtraces
	}
	return 0
}

func (x *Trace) GetTraceAddress() []int64 {
	if x != nil {
		return x.TraceAddress
	}
	return nil
}

func (x *Trace) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *Trace) GetTransactionPosition() int64 {
	if x != nil {
		return x.TransactionPosition
	}
	return 0
}

func (x *Trace) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Trace) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_dispatcher_proto protoreflect.FileDescriptor

var file_dispatcher_proto_rawDesc = []byte{
	0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74,
	0x61, 0x22, 0x3e, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0xbc, 0x01, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x05, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f,
	0x72, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x6f,
	0x67, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72,
	0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x22, 0x88, 0x07, 0x0a, 0x15, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x61,
	0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x73,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x73,
	0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x67,
	0x73, 0x42, 0x6c, 0x6f, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x69, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x69, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73,
	0x52, 0x6f, 0x6f, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x68, 0x61, 0x33,
	0x55, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68,
	0x61, 0x33, 0x55, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x6e, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x62, 0x47, 0x61,
	0x73, 0x55, 0x73, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f,
	0x62, 0x47, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f, 0x62, 0x47, 0x61, 0x73, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x65, 0x73, 0x73, 0x42, 0x6c, 0x6f,
	0x62, 0x47, 0x61, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73,
	0x52, 0x6f, 0x6f, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x7c, 0x0a, 0x0a, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x26, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9c, 0x02, 0x0a, 0x08, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xcc, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0c, 0x0a, 0x01,
	0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x76, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x01, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x46, 0x65, 0x65,
	0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61,
	0x78, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47,
	0x61, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x50, 0x65, 0x72, 0x47, 0x61, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x79, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x79, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x22, 0x48, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x22, 0xf9, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69,
	0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x6d, 0x0a,
	0x0b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xb7, 0x02, 0x0a,
	0x05, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x66, 0x6f, 0x72, 0x74, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x28, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dispatcher_proto_rawDescOnce sync.Once
	file_dispatcher_proto_rawDescData = file_dispatcher_proto_rawDesc
)

func file_dispatcher_proto_rawDescGZIP() []byte {
	file_dispatcher_proto_rawDescOnce.Do(func() {
		file_dispatcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_dispatcher_proto_rawDescData)
	})
	return file_dispatcher_proto_rawDescData
}

var file_dispatcher_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_dispatcher_proto_goTypes = []interface{}{
	(*BlocksData)(nil),            // 0: network.forta.BlocksData
	(*BlockData)(nil),             // 1: network.forta.BlockData
	(*BlockWithTransactions)(nil), // 2: network.forta.BlockWithTransactions
	(*Withdrawal)(nil),            // 3: network.forta.Withdrawal
	(*LogEntry)(nil),              // 4: network.forta.LogEntry
	(*Transaction)(nil),           // 5: network.forta.Transaction
	(*AccessList)(nil),            // 6: network.forta.AccessList
	(*TraceAction)(nil),           // 7: network.forta.TraceAction
	(*TraceResult)(nil),           // 8: network.forta.TraceResult
	(*Trace)(nil),                 // 9: network.forta.Trace
}
var file_dispatcher_proto_depIdxs = []int32{
	1, // 0: network.forta.BlocksData.blocks:type_name -> network.forta.BlockData
	2, // 1: network.forta.BlockData.block:type_name -> network.forta.BlockWithTransactions
	4, // 2: network.forta.BlockData.logs:type_name -> network.forta.LogEntry
	9, // 3: network.forta.BlockData.traces:type_name -> network.forta.Trace
	5, // 4: network.forta.BlockWithTransactions.transactions:type_name -> network.forta.Transaction
	3, // 5: network.forta.BlockWithTransactions.withdrawals:type_name -> network.forta.Withdrawal
	6, // 6: network.forta.Transaction.accessList:type_name -> network.forta.AccessList
	7, // 7: network.forta.Trace.action:type_name -> network.forta.TraceAction
	8, // 8: network.forta.Trace.result:type_name -> network.forta.TraceResult
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_dispatcher_proto_init() }
func file_dispatcher_proto_init() {
	if File_dispatcher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dispatcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlocksData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockWithTransactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dispatcher_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dispatcher_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dispatcher_proto_goTypes,
		DependencyIndexes: file_dispatcher_proto_depIdxs,
		MessageInfos:      file_dispatcher_proto_msgTypes,
	}.Build()
	File_dispatcher_proto = out.File
	file_dispatcher_proto_rawDesc = nil
	file_dispatcher_proto_goTypes = nil
	file_dispatcher_proto_depIdxs = nil
}
