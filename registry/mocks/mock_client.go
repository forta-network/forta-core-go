// Code generated by MockGen. DO NOT EDIT.
// Source: registry/client.go

// Package mock_registry is a generated GoMock package.
package mock_registry

import (
	reflect "reflect"

	registry "github.com/forta-protocol/forta-core-go/registry"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ForEachAssignedAgent mocks base method.
func (m *MockClient) ForEachAssignedAgent(scannerID string, handler func(*registry.Agent) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForEachAssignedAgent", scannerID, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForEachAssignedAgent indicates an expected call of ForEachAssignedAgent.
func (mr *MockClientMockRecorder) ForEachAssignedAgent(scannerID, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForEachAssignedAgent", reflect.TypeOf((*MockClient)(nil).ForEachAssignedAgent), scannerID, handler)
}

// GetAgent mocks base method.
func (m *MockClient) GetAgent(agentID string) (*registry.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgent", agentID)
	ret0, _ := ret[0].(*registry.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgent indicates an expected call of GetAgent.
func (mr *MockClientMockRecorder) GetAgent(agentID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgent", reflect.TypeOf((*MockClient)(nil).GetAgent), agentID)
}

// GetAssignmentHash mocks base method.
func (m *MockClient) GetAssignmentHash(scannerID string) (*registry.AssignmentHash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAssignmentHash", scannerID)
	ret0, _ := ret[0].(*registry.AssignmentHash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAssignmentHash indicates an expected call of GetAssignmentHash.
func (mr *MockClientMockRecorder) GetAssignmentHash(scannerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAssignmentHash", reflect.TypeOf((*MockClient)(nil).GetAssignmentHash), scannerID)
}

// GetScanner mocks base method.
func (m *MockClient) GetScanner(scannerID string) (*registry.Scanner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScanner", scannerID)
	ret0, _ := ret[0].(*registry.Scanner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScanner indicates an expected call of GetScanner.
func (mr *MockClientMockRecorder) GetScanner(scannerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScanner", reflect.TypeOf((*MockClient)(nil).GetScanner), scannerID)
}

// GetScannerNodeVersion mocks base method.
func (m *MockClient) GetScannerNodeVersion() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScannerNodeVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScannerNodeVersion indicates an expected call of GetScannerNodeVersion.
func (mr *MockClientMockRecorder) GetScannerNodeVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScannerNodeVersion", reflect.TypeOf((*MockClient)(nil).GetScannerNodeVersion))
}

// IsEnabledScanner mocks base method.
func (m *MockClient) IsEnabledScanner(scannerID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabledScanner", scannerID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEnabledScanner indicates an expected call of IsEnabledScanner.
func (mr *MockClientMockRecorder) IsEnabledScanner(scannerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabledScanner", reflect.TypeOf((*MockClient)(nil).IsEnabledScanner), scannerID)
}

// PegLatestBlock mocks base method.
func (m *MockClient) PegLatestBlock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PegLatestBlock")
	ret0, _ := ret[0].(error)
	return ret0
}

// PegLatestBlock indicates an expected call of PegLatestBlock.
func (mr *MockClientMockRecorder) PegLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PegLatestBlock", reflect.TypeOf((*MockClient)(nil).PegLatestBlock))
}

// ResetOpts mocks base method.
func (m *MockClient) ResetOpts() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetOpts")
}

// ResetOpts indicates an expected call of ResetOpts.
func (mr *MockClientMockRecorder) ResetOpts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetOpts", reflect.TypeOf((*MockClient)(nil).ResetOpts))
}
